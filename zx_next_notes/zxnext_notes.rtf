{\rtf1\ansi\uc1\deff0\deflang1024
{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}
{\f1\fnil\fcharset0 Arial;}
{\f2\fnil\fcharset0 Arial;}
{\f3\fnil\fcharset0 Courier New;}
{\f4\fnil\fcharset0 Zapf Chancery;}
{\f5\fnil\fcharset0 STIXGeneral;}
{\f6\fnil\fcharset0 MS Gothic;}
}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
}
{\stylesheet
{\s0\qj\widctlpar\f0\fs22 \snext0 Normal;}
{\cs10 \additive\ssemihidden Default Paragraph Font;}
{\s1\qc\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 Part;}
{\s2\ql\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 heading 1;}
{\s3\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 2;}
{\s4\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 3;}
{\s5\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 4;}
{\s6\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 5;}
{\s7\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 6;}
{\s8\qr\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext8 rightpar;}
{\s9\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext9 centerpar;}
{\s10\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext10 leftpar;}
{\s11\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equation;}
{\s12\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationNum;}
{\s13\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlign;}
{\s14\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlignNum;}
{\s15\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArray;}
{\s16\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArrayNum;}
{\s17\ql\sb120\sa120\keep\widctlpar\f0\fs20 \sbasedon0\snext0 theorem;}
{\s18\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 bitmapCenter;}
{\s20\qc\sb240\sa240\b\f0\fs36 \sbasedon0\snext21 Title;}
{\s21\qc\sa120\f0\fs22 \sbasedon0\snext0 author;}
{\s22\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext22 footer;}
{\s23\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext23 header;}
{\s30\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 caption;}
{\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext0 Figure;}
{\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext32 Table;}
{\s33\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext33 Tabular;}
{\s34\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext34 Tabbing;}
{\s35\qj\li1024\ri1024\fi340\widctlpar\f0\fs20 \sbasedon0\snext35 Quote;}
{\s38\ql\widctlpar\f3\fs22 \snext38 verbatim;}
{\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext46 List;}
{\s47\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext47 List 1;}
{\s50\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 latex picture;}
{\s51\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 subfigure;}
{\s61\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext62 bibheading;}
{\s62\ql\fi-567\li567\sb0\sa0\f0\fs20 \sbasedon0\snext62 bibitem;}
{\s64\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext64 endnotes;}
{\s65\ql\fi-113\li397\lin397\f0\fs22 \sbasedon0\snext65 footnote text;}
{\s66\qj\fi-170\li454\lin454\f0\fs22 \sbasedon0\snext66 endnote text;}
{\cs62\super \additive\sbasedon10 footnote reference;}
{\cs63\super \additive\sbasedon10 endnote reference;}
{\s67\ql\sb60\sa60\keepn\f0\fs22 \sbasedon0\snext67 acronym;}
{\s70\qc\sa120\b\f0\fs22 \sbasedon0\snext71 abstract title;}
{\s71\qj\li1024\ri1024\fi340\widctlpar\f0\fs22 \sbasedon0\snext0 abstract;}
{\s80\ql\sb240\sa120\keepn\f0\b\fs20 \sbasedon0\snext0 contents_heading;}
{\s81\ql\li425\tqr\tldot\tx8222\sb240\sa60\keepn\f0\fs22\b \sbasedon0\snext82 toc 1;}
{\s82\ql\li512\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs22 \sbasedon0\snext83 toc 2;}
{\s83\ql\li1024\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs22 \sbasedon0\snext84 toc 3;}
{\s84\ql\li1536\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs22 \sbasedon0\snext85 toc 4;}
{\s85\ql\li2048\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs22 \sbasedon0\snext86 toc 5;}
{\s86\ql\li2560\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs22 \sbasedon0\snext86 toc 6;}
}
{\info
{\title Original file was zxnext_notes.tex}
{\doccomm Created using latex2rtf 2.3.17 r1261 (released March 28, 2018) on Tue Dec  8 08:34:54 2020
}
}
{\footer\pard\plain\f0\fs22\qc\chpgn\par}
\paperw12280\paperh15900\margl2680\margr2700\margt2540\margb1760\pgnstart0\widowctrl\qj\ftnbj\f0\aftnnar
{\pard\plain\s20\qc\sb240\sa240\b\f0\fs36\sl240\slmult1 \fi0 ZX Spectrum Next Programming Notes\par
\pard\plain\s21\qc\sa120\f0\fs22\sl240\slmult1 \sb120 \fi0 Theodore (Alex) Evans\par
\pard\plain\s21\qc\sa120\f0\fs22\sl240\slmult1 \sb120 \fi0 \chdate \par
\pard\plain\s80\ql\sb240\sa120\keepn\f0\b\fs22\sl240\slmult1 \sb120 \fi0  Contents\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\field{\*\fldinst TOC \\o "1-3" }{\fldrslt }}
\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb180 \fi0 Chapter 1\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Introduction\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 The ZX Spectrum Next is an extension of the original ZX Spectrum implemented in FPGA which implements many of the common additions to the system includin the characteristics of all of the original ZX Spectrum line, including the Timex/Sinclair 2068, along with a number of characteristics to modernize the design.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This document is an attempt to consolidate the programming interface for the ZX Spectrum Next into a single location. This document started when much of the documentation on the ZX Spectrum Next site (https://www.specnext.com/) was out of date and/or difficult to figure out. The way to figure out how things actually worked was to either dig through the forums and ask questions or find someones code that implemented a particular bit of functionality and reverse engineer it. The situation has greatly improved and this document may even be redundant at this point.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Description from http://www.specnext.com/about/:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Spectrum Next is fully implemented with FPGA technology, ensuring it can be upgraded and enhanced while remaining truly compatible with the original hardware by using special memory chips and clever design. Here\u226?\u8364?\u8482?s what under the hood of the machine:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Processor: Z80n normal and turbo modes \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Memory: 1024Kb RAM (expandable to 2048Kb on board) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Video: Multilayer video implementing classic ZX Spectrum, Timex Hi-Resolution, Timex Hi-Colour, LoRes, Layer 2, and Tilemap video modes with Hardware sprites \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Video Output: RGB, VGA, HDMI \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Storage: SD Card slot, with DivMMC-compatible protocol \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Audio: ZX Spectrum 1-bit audio, Turbo Sound Next (3x AY-3-8912 audio chips with stereo output), stereo PCM audio, and ability to use Pi accelerator as a sound source \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Joystick: DB9 compatible with Cursor, Kempston and Interface 2 protocols (selectable) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
PS/2 port: Mouse with Kempston mode emulation and an external keyboard \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Special: Multiface functionality for memory access, savegames, cheats etc. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Tape support: Mic and Ear ports for tape loading and saving \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Expansion: Original external bus expansion port and accelerator expansion port \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Accelerator board (optional): Pi Zero with GPU / 1Ghz CPU / 512Mb RAM \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Network (optional): Wi Fi module \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Extras: Real Time Clock (optional), internal speaker (optional) \par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb180 \fi0 Chapter 2\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Video\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 ZX Spectrum Next video splits the display types into four categories (layer 1 (ULA/Timex/LoRes), layer 2, layer 3 (tilemap) and sprites) which have their own sets of controls for colour palettes, clipping, and scrolling. Some aspects of ULA and tilemap are tied together, but all the rest operate in a largely independent manner using a layering system. The ULA category has a number of separate video modes that it can use. One of these (LoRes) is incompatible with using tilemaps (This may have change in the most recent cores).\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 2.1  General Features\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 There are a number of control features for the various video modes that are done in a unified fashion. These features are layering and transparency, palettes, scrolling, and clipping. For the sake of convenience we will occasionally talk about a global coordinate system for graphics on the ZX Next. This coordinate system has (0, 0) at the upper left corner of the usable display area and (319, 255) at the lower right corner. Individual pixels generally correspond to integer locations in this grid, but some modes may either double or halve this grid. This will be discussed in the sections for each of the video layers.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.1.1  Video Layering and Transparency\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Video for the ZX Next is composed of a number of features and layers each of which may have its own set of video modes. Not all of these features are mandatory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 By composing together the border colour and transparency fallback color, layer 1 (ULA, Timex modes, or LoRes), layer 2 ({256{\u215*}192{\u215*}256}, {320{\u215*}256{\u215*}256}, or {640{\u215*}256{\u215*}16}), layer 3 (16 or 2 colour tiles), and sprites; we generate the full video display.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The border/transparency fallback is the bottom with the ordering of the layers controlled by a combination of the video layering register (Next register $15 (21) bits 4-2), the interaction of layers 1 and 3 (Next register $6B (107) bit 0), and whether or not a pixel in layer 2 is set as a priority colour.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $15 ({15}) {{\f5\u8658*}} Sprite and Layer System Setup {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = LoRes mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Sprite priority (1 = sprite 0 on top, 0 = sprite 127 on top) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable sprite clipping in over border mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-2 = set layers priorities (000 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 - S L U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 - L S U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 - S U L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 - L U S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 - U S L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 - U L S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 - S(U+L) ULA and Layer 2 combined, colours clamped to 7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 - S(U+L-5) ULA and Layer 2 combined, colours clamped to [0,7] \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Sprites Over border (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Sprites (0 on reset) \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 transparency}} Transparency for Layer 2, Layer 1, and 1-bit Tilemaps are controlled by Next register $14 (20) and defaults to $E3. Sprites and 4-bit Tilemaps have their own registers ($4B and $4C respectively) for setting their transparency index (not colour). This colour ignores the state of the least significant blue bit, so $E3 equates to both $1C6 and $1C7. For Sprites and Tilemaps transparency is determined by colour index. For Sprites this is controlled by register $4B (with only the least significant 4-bits being relevant for 16-colour Sprites). For Tilemaps, the transparency index is set by register $4C. If all layers are transparent, the transparency fallback colour is displayed. This is set by register $4A.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $14 ({14}) {{\f5\u8658*}} Global transparency color {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Transparency color value ($E3 after a reset) \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Note: this value is 8-bit, so the transparency is compared against only by the MSB bits of the final 9-bit colour)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 (Note2: this only affects Layer 2, ULA and LoRes. Sprites use register $4B for transparency and tilemap uses nextreg $4C)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $4A ({4A}) {{\f5\u8658*}} Fallback Colour Value {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8-bit colour if all layers are transparent ($E3 on reset) \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 black on reset = 0)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $4B ({4B}) {{\f5\u8658*}} Sprite Transparency Index {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Index value ($E3 if reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 For 4-bit sprites only the bottom 4-bits are relevant.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $4C ({4C}) {{\f5\u8658*}} Level 3 Transparency Index {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Index value ($0F on reset) \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.1.2  Palette\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 palette}} \par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Next Colour Palettes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Each video mode group has a pair of palettes assigned to it a primary and an alternate palette. Each palette entry is actually a 9-bit value (RRRGGGBBB) and can be set by selecting a palette using nextreg $43 (palette control), the entry using nextreg $40 (palette index), then writing the value into nextreg $44 (palette value, 9-bit) using pairs of consecutive writes for each palette value or nextreg $41 (palette value, 8-bit). Once a palette index has been selected writes automatically increment the palette index number so it is possible to efficiently write the values for a collection of palette entries.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $40 ({40}) {{\f5\u8658*}} Palette Index Select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Palette Index Number \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Selects the palette index to change the associated colour\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For ULA only, INKs are mapped to indices 0 through 7, BRIGHT INKs to indices 8 through 15, PAPERs to indices 16 through 23 and BRIGHT PAPERs to indices 24 through 31. In EnhancedULA mode, INKs come from a subset of indices from 0 through 127 and PAPERs from a subset of indices from 128 through 255.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The number of active indices depends on the number of attribute bits assigned to INK and PAPER out of the attribute byte.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In ULAplus mode, the last 64 entries (indices 192 to 255) hold the ULAplus palette. The ULA always takes border colour from PAPER for standard ULA and Enhanced ULA\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $41 ({41}) {{\f5\u8658*}} 8-bit Palette Data {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Colour Entry in RRRGGGBB format \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The lower blue bit of the 9-bit internal colour will be the logical or of bits 0 and 1 of the 8-bit entry. After each write, the palette index auto-increments if aut-increment has been enabled (NextReg $43 bit 7), Reads do not auto-increment.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $43 ({43}) {{\f5\u8658*}} Palette Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Disable palette write auto-increment. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Select palette for reading or writing: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 = ULA first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 = ULA second palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 = Layer 2 first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 = Layer 2 second palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 = Sprite first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 = Sprite second palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 = Layer 3 first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 = Layer 3 second palette \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Select Sprite palette (0 = first palette, 1 = second palette) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Select Layer 2 palette (0 = first palette, 1 = second palette) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Select ULA palette (0 = first palette, 1 = second palette) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable EnhancedULA mode if 1. (0 after a reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $44 ({44}) {{\f5\u8658*}} 9-bit Palette Data\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Non Level 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
1st write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = MSB (RRRGGGBB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
2nd write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = LSB (B) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Level 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
1st write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = MSB (RRRGGGBB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
2nd write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Priority \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = LSB (B) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 9-bit Palette Data is entered in two consecutive writes; the second write autoincrements the palette index if auto-increment is enabled in NextREG $43 bit 7\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If writing an L2 palette, the second write\rquote s D7 holds the L2 priority bit which if set (1) brings the colour defined at that index on top of all other layers. If you also need the same colour in regular priority (for example: for enviromental masking) you will have to set it up again, this time with no priority.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads return the second byte and do not autoincrement. Writes to nextreg $40, $41, $41, or $43 reset to the first write.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.1.3  Scrolling\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next has four sets of scrolling registers to independently contol the display offsets of various video modes (Layer2, ULA, Tilemap, and LoRes). When the video is offset, the portion that is pushed off the screen (to the left and or top) then becomes visible on the opposite side of the screen so that the video offset values are effectively the coordinates of the origin in a toroidal universe.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.1.4  Clipping\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next has four clipping registers create a window of the layer that is visible. Clipping is managed by a set of four successive writes to the clipping register applicable for the video mode. If a section is masked off by clipping, it is as if the area were the transparency colour and the video lyers behind it become visible.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 2.2  Layer 1\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb420 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 2.1: Layer 1 Mode summary}{\field{\*\fldinst TC "2.1 Layer 1 Mode summary" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {Mode}\cell}
{\pard\intbl\qc {Resolution}\cell}
{\pard\intbl\qc {Colour}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {ULA}\cell}
{\pard\intbl\qc {256{{\u215*}}192}\cell}
{\pard\intbl\qc {ULA 8{{\u215*}}8}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {Timex Alt}\cell}
{\pard\intbl\qc {256{{\u215*}}192}\cell}
{\pard\intbl\qc {ULA 8{{\u215*}}8}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {HiCol}\cell}
{\pard\intbl\qc {256{{\u215*}}192}\cell}
{\pard\intbl\qc {ULA 8{{\u215*}}1}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {HiRes}\cell}
{\pard\intbl\qc {512{{\u215*}}192}\cell}
{\pard\intbl\qc {2 colours}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {128 Alt}\cell}
{\pard\intbl\qc {256{{\u215*}}192}\cell}
{\pard\intbl\qc {ULA 8{{\u215*}}8}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {LoRes}\cell}
{\pard\intbl\qc {128{{\u215*}}96}\cell}
{\pard\intbl\qc {256 colours}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2411\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4533\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6655
{\pard\intbl\ql {Rad}\cell}
{\pard\intbl\qc {128{{\u215*}}96}\cell}
{\pard\intbl\qc {16 colours}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 The Layer 1 consists of ZX Spectrum ULA video, Timex video modes, and the Spectrum Next\u226?\u8364?\u8482?s lores video modes all use 16k memory bank 5 or 7 with the data coming from some combination of addresses $0000-$17FF (bitmap 1), $1800-$1AFF (attribute 1), $2000-$37FF (bitmap 2), and $3800-$3AFF (attribute 2) within the selected bank. Assuming default memory mapping and the use of bank 5 this will be mapped as some combination of memory $4000-$57FF, $5800-$5AFF, $6000-$77FF, $780-$7AFF. All of the modes other than the lores mode can either use the default ZX Spectrum colours, ULANext mode, or an emulation of ULAplus. In the Spectrum and Timex modes all colours are either Paper (foreground), paper (background), or border colours.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 2.2: Layer 1 Memory Map}{\field{\*\fldinst TC "2.2 Layer 1 Memory Map" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {}\cell}
{\pard\intbl\qc {BM 1}\cell}
{\pard\intbl\qc {Attr 1}\cell}
{\pard\intbl\qc {BM 2}\cell}
{\pard\intbl\qc {Attr 2}\cell}
{\pard\intbl\qc {BM a}\cell}
{\pard\intbl\qc {Attr a}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {Bank}\cell}
{\pard\intbl\qc {5}\cell}
{\pard\intbl\qc {5}\cell}
{\pard\intbl\qc {5}\cell}
{\pard\intbl\qc {5}\cell}
{\pard\intbl\qc {7}\cell}
{\pard\intbl\qc {7}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {start}\cell}
{\pard\intbl\qc {$0000}\cell}
{\pard\intbl\qc {$1800}\cell}
{\pard\intbl\qc {$2000}\cell}
{\pard\intbl\qc {$3800}\cell}
{\pard\intbl\qc {$0000}\cell}
{\pard\intbl\qc {$1800}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {end}\cell}
{\pard\intbl\qc {$17FF}\cell}
{\pard\intbl\qc {$1AFF}\cell}
{\pard\intbl\qc {$37FF}\cell}
{\pard\intbl\qc {$3AFF}\cell}
{\pard\intbl\qc {$17FF}\cell}
{\pard\intbl\qc {$1AFF}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql { ULA}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {Timex Alt}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {HiCol}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {HiRes}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {128 Alt}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {*}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {LoRes}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {*}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
\row}
{\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx2384\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3136\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3888\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4640\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx5392\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6144\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx6896
{\pard\intbl\ql {Rad}\cell}
{\pard\intbl\qc {1}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {2}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
{\pard\intbl\qc {}\cell}
\row}
} \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb480 \fi0 2.2.1  Colour Attributes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next has three major modes for colour attributes: the ZX Spectrum attribute mapping, which is augmented by using the ZX Spectrum Next\rquote s palette; ULANext, which allows the user to how many foreground and how many background colous are to be selected by the attribute bytes; and an emulation of ULAplus.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 ULA Colour\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 In ULA colour INKs are mapped to indices 0-7, Bright INKS to indices 8-15, PAPERs to indices 16-23 and Bright PAPERs to indices 24-31. This is the default state for interpreting ULA palettes.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 2.3: ULA Colour}{\field{\*\fldinst TC "2.3 ULA Colour" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {video/flash.csv} \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb480 \fi0 ULANext\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ULANext modes use a varying number of bits from the attribute byte to determine the ink colours as the palette index from the appropriate bits (all others being zero) and the paper colours coming from the indicated value+128 with palette format 255 being a special case where all the bits determine the ink colour while the paper is always palette index 128. The ULA always takes border colour from paper. ULANext is enabled using bit 0 of nextreg $43 (palette control) and controlled with nextreg $42 (ULA Next attribute byte format)\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 2.4: ULANext}{\field{\*\fldinst TC "2.4 ULANext" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {video/palfmt.csv} \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb480 \fi0 ULAplus\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Next emulates ULAPlus using the last 64 (192-255) entries of the ULA palette. ULAplus is controlled using two ports: $BF3B (register port) and $FF3B (data port)\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 I/O ports\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ULAplus is controlled by two ports.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $BF3B is the register port (write only)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The byte output will be interpreted as follows: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bits 7-6: Select the register group. Two groups are currently available: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00=palette group\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 When this group is selected, the sub-group determines the entry in the palette table (0-63). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01=mode group\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 The sub-group is (optionally) used to mirror the video functionality of Timex port $FF as follows: \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bits 5-0: Select the register sub-group \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Mode group \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bits 5-3: Sets the screen colour in hi-res mode. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000=Black on White \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001=Blue on Yellow \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010=Red on Cyan \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011=Magenta on Green \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100=Green on Magenta \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101=Cyan on Red \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110=Yellow on Blue \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111=White on Black \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bits 2-0: Screen mode. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000=screen 0 (bank 5) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001=screen 1 (bank 5) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010=hi-colour (bank 5) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100=screen 0 (bank 7) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101=screen 1 (bank 7) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110=hi-colour (bank 7) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110=hi-res (bank 5) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111=hi-res (bank 7) \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 $FF3B is the data port (read/write)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the palette group is selected, the byte written will describe the color.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the mode group is selected, the byte output will be interpreted as follows: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bit 0: ULAplus palette on (1) / off (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bit 1: (optional) grayscale: on (1) / off (0) (same as turing the color off on the television) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Implementations that support the Timex video modes use the $FF register as the primary means to set the video mode, as per the Timex machines. It is left to the individual implementations to determine if reading the port returns the previous write or the floating bus.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 GRB palette entries\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 G3R3B2 encoding\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For a device using the GRB colour space the palette entry is interpreted as follows {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bits 7-5: Green intensity. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bits 4-2: Red intensity. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Bits 1-0: Blue intensity. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This colour space uses a sub-set of 9-bit GRB. The missing lowest blue bit is set to OR of the other two blue bits (Bb becomes 000 for 00, and Bb1 for anything else). This gives access to a fixed half the potential 512 colour palette. The reduces the jump in intensity in the lower range in the earlier version of the specification. It also means the standard palette can now be represented by the ULAplus palette.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Grayscale palette entries\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This is an optional ULAPlus feature that is not supported on the Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In grayscale mode, each palette entry describes an intensity from zero to 255. This can be achieved by simply removing the colour from the output signal.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Limitations\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Although in theory 64 colours can be displayed at once, in practice this is usually not possible except when displaying colour bars, because the four CLUTs are mutually exclusive; it is not possible to mix colours from two CLUTs in the same cell. However, with software palette cycling it is possible to display all 256 colours on screen at once.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Emulation\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The 64 colour mode lookup table is organized as 4 palettes of 16 colours.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bits 7 and 6 of each Spectrum attribute byte (normally used for FLASH and BRIGHT) will be used as an index value (0-3) to select one of the four colour palettes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Each colour palette has 16 entries (8 for INK, 8 for PAPER). Bits 0 to 2 (INK) and 3 to 5 (PAPER) of the attribute byte will be used as indexes to retrieve colour data from the selected palette.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 With the standard Spectrum display, the BORDER colour is the same as the PAPER colour in the first CLUT. For example BORDER 0 would set the border to the same colour as PAPER 0 (with the BRIGHT and FLASH bits not set).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The complete index can be calculated as\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ink_colour = (FLASH * 2 + BRIGHT) * 16 + INK paper_colour = (FLASH * 2 + BRIGHT) * 16 + PAPER + 8\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Palette file format\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The palette format doubles as the BASIC patch loader. This enables you to edit patches produced by other people. {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ; 64 colour palette file format (internal) - version 1.0
\par ; copyright (c) 2009 Andrew Owen
\par ;
\par ; The palette file is stored as a BASIC program with embedded machine code
\par 
\par header:
\par 
\par db 0x00 ; program file
\par db 0x14, 0x01, "64colour" ; file name
\par dw 0x0097 ; data length
\par dw 0x0000 ; autostart line
\par dw 0x0097 ; program length
\par 
\par basic:
\par 
\par ; 0 RANDOMIZE USR ((PEEK VAL "2
\par ; 3635"+VAL "256"*PEEK VAL "23636"
\par ; )+VAL "48"): LOAD "": REM
\par 
\par db 0x00, 0x00, 0x93, 0x00, 0xf9, 0xc0, 0x28, 0x28
\par db 0xbe, 0xb0, 0x22, 0x32, 0x33, 0x36, 0x33, 0x35
\par db 0x22, 0x2b, 0xb0, 0x22, 0x32, 0x35, 0x36, 0x22
\par db 0x2a, 0xbe, 0xb0, 0x22, 0x32, 0x33, 0x36, 0x33
\par db 0x36, 0x22, 0x29, 0x2b, 0xb0, 0x22, 0x34, 0x38
\par db 0x22, 0x29, 0x3a, 0xef, 0x22, 0x22, 0x3a, 0xea
\par 
\par start:
\par 
\par di ; disable interrupts
\par ld hl, 38 ; HL = length of code
\par add hl, bc ; BC = entry point (start) from BASIC
\par ld bc, 0xbf3b ; register select
\par ld a, 64 ; mode group
\par out (c), a ;
\par ld a, 1 ;
\par ld b, 0xff ; choose register port
\par out (c), a ; turn palette mode on
\par xor a ; first register
\par 
\par setreg:
\par 
\par ld b, 0xbf ; choose register port
\par out (c), a ; select register
\par ex af, af' ; save current register select
\par ld a, (hl) ; get data
\par ld b, 0xff ; choose data port
\par out (c), a ; set it
\par ex af, af' ; restore current register
\par inc hl ; advance pointer
\par inc a ; increase register
\par cp 64 ; are we nearly there yet?
\par jr nz, setreg ; repeat until all 64 have been done
\par ei ; enable interrupts
\par ret ; return
\par 
\par ; this is where the actual data is stored. The following is an example palette.
\par 
\par registers:
\par 
\par db 0x00, 0x02, 0x18, 0x1b, 0xc0, 0xc3, 0xd8, 0xdb ; INK
\par db 0x00, 0x02, 0x18, 0x1b, 0xc0, 0xc3, 0xd8, 0xdb ; PAPER
\par db 0x00, 0x03, 0x1c, 0x1f, 0xe0, 0xe3, 0xfc, 0xff ; +BRIGHT
\par db 0x00, 0x03, 0x1c, 0x1f, 0xe0, 0xe3, 0xfc, 0xff ;
\par db 0xdb, 0xd8, 0xc3, 0xc0, 0x1b, 0x18, 0x02, 0x00 ; +FLASH
\par db 0xdb, 0xd8, 0xc3, 0xc0, 0x1b, 0x18, 0x02, 0x00 ;
\par db 0xff, 0xfc, 0xe3, 0xe0, 0x1f, 0x1c, 0x03, 0x00 ; +BRIGHT/
\par db 0xff, 0xfc, 0xe3, 0xe0, 0x1f, 0x1c, 0x03, 0x00 ; +FLASH
\par 
\par terminating_byte:
\par 
\par db 0x0d 
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.2.2  Layer 1 Scrolling\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 1 has two sets of scrolling registers. One for the the legacy modes (ZX Spectrum, Alternate Page, Timex Hi-Resoulution, and Timex Hi-colour) and a second set for the two ZX Spextrum Next specific LoRes modes. All modes scroll as if they were {256{\u215*}192} screens located at global coordinates (32, 32) to (287, 223), The registers for the legacy modes are $26 and $27 and the registers for the LoRes modes are $32 and $33.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $26 ({26}) {{\f5\u8658*}} ULA Horizontal Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = ULA X Offset (0-255) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $27 ({27}) {{\f5\u8658*}} ULA Vertical Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = ULA Y Offset (0-191) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $32 ({32}) {{\f5\u8658*}} Layer 1,0 (LoRes) Horizontal Scroll Control) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = X Offset (0-255) ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and smoothness as Layer 2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $33 ({33}) {{\f5\u8658*}} Layer 1,0 (LoRes) Vertical Scroll Control) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Y Offset (0-191) ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and smoothness as Layer 2.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.2.3  Layer 1 Clipping\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 All of the modes in the Layer 1 share a single clipping register, $1A. The clip index may alternately be set using register $1C. This is expecially useful for reading the current clipping coordinates as reads on the clipping register do not change the index. Note that clipping coordinates are based on a full display area for the mode of {256{\u215*}192} resolution even though not all modes have that resolution.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $1A ({1A}) {{\f5\u8658*}} Layer 0 (ULA/LoRes) Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Coord. of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write = X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write = X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write = Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write = Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 The values are 0,255,0,191 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $1C ({1C}) {{\f5\u8658*}} Clip Window Control\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Layer 3 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Layer 0/1 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-2 = Sprite clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Layer 2 Clip Index \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 - reset Layer 3 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 - reset Layer 0/1 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 - reset sprite clip index. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 - reset Layer 2 clip index. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.2.4  ZX Spectrum Mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Timex mode 0\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This is the default ULA mode and has its origins in the original ZX Spectrum. It uses {256{\u215*}192} pixels located at global coordinates (32, 32) to (287, 223) with {8{\u215*}8} colour attribute areas mapped into a {32{\u215*}24} grid. If Timex modes are not enabled, this and the LoRes mode are the only ones available, so you would switch back to this mode by writing 000xxxxx to Next register $15 (21, the sprites and layers register). If another Timex mode is enabled, then this is mode 0 so you would write 0 to port $ff to enable it. This is a {256{\u215*}192} video mode. The bitmap 1 area is used for selection between ink and paper colours with one bit per pixel and the attribute 1 area for colour attributes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The easiest way to visualize the mapping of this mode is to think of the {256{\u215*}192} area as being divided into a {32{\u215*}24} grid of {8{\u215*}8} characters. IF we consider X and Y as the position in the grid and R to the the row within the character. For ink/paper selection, 0=paper, 1=ink and the entries are stored left to right as lsb to msb within the bye. The address for a pixel value is: {{\field{\*\fldinst{ EQ 0{\i R}\\s\\do5({\fs18 4}){\i R}\\s\\do5({\fs18 3}){\i Y}\\s\\do5({\fs18 2}){\i Y}\\s\\do5({\fs18 1}){\i Y}\\s\\do5({\fs18 0}){\i R}\\s\\do5({\fs18 2}){\i R}\\s\\do5({\fs18 1}){\i R}\\s\\do5({\fs18 0}){\i C}\\s\\do5({\fs18 4}){\i C}\\s\\do5({\fs18 3}){\i C}\\s\\do5({\fs18 2}){\i C}\\s\\do5({\fs18 1}){\i C}\\s\\do5({\fs18 0})}}{\fldrslt }}
}. Each {8{\u215*}8} cell has its own colour attribute where the address for an attribute cell is {{\field{\*\fldinst{ EQ 0110{\i R}\\s\\do5({\fs18 4}){\i R}\\s\\do5({\fs18 3}){\i R}\\s\\do5({\fs18 2}){\i R}\\s\\do5({\fs18 1}){\i R}\\s\\do5({\fs18 0}){\i C}\\s\\do5({\fs18 4}){\i C}\\s\\do5({\fs18 3}){\i C}\\s\\do5({\fs18 2}){\i C}\\s\\do5({\fs18 1}){\i C}\\s\\do5({\fs18 0})}}{\fldrslt }}
} in other words mapped lineally column-wise starting at the beginning of the attribute 1 area.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code: {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par   ;; from any other Timex mode:
\par   ld a,$00
\par   ld c,$ff
\par   out (c),a
\par 
\par   ;; from LoRes mode:
\par   ld bc,$243B ; next register select port
\par   ld a,$15
\par   out (c),a
\par   ld bc,$253B ; next register r/w port
\par   in a,(c)
\par   and $7f
\par   out (c),a
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.2.5  Alternate Page Mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Timex mode 1\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This mode is the same as ZX Spectrum mode except it is at an alternate addresses. Alternate page mode is selected by enabling Timex modes by writing 00xxxx1xx to Next register $08 (8, Peripheral 3 setting) then writing 1 to the Timex ULA port ($ff). It is identical to ZX Spectrum mode except the pixel are mapped to the bitmap 2 area giving use pixel addresses of {{\field{\*\fldinst{ EQ 1{\i R}\\s\\do5({\fs18 4}){\i R}\\s\\do5({\fs18 3}){\i Y}\\s\\do5({\fs18 2}){\i Y}\\s\\do5({\fs18 1}){\i Y}\\s\\do5({\fs18 0}){\i R}\\s\\do5({\fs18 2}){\i R}\\s\\do5({\fs18 1}){\i R}\\s\\do5({\fs18 0}){\i C}\\s\\do5({\fs18 4}){\i C}\\s\\do5({\fs18 3}){\i C}\\s\\do5({\fs18 2}){\i C}\\s\\do5({\fs18 1}){\i C}\\s\\do5({\fs18 0})}}{\fldrslt }}
} and the attributes to the attribute 2 area with addresses of {{\field{\*\fldinst{ EQ 1110{\i R}\\s\\do5({\fs18 4}){\i R}\\s\\do5({\fs18 3}){\i R}\\s\\do5({\fs18 2}){\i R}\\s\\do5({\fs18 1}){\i R}\\s\\do5({\fs18 0}){\i C}\\s\\do5({\fs18 4}){\i C}\\s\\do5({\fs18 3}){\i C}\\s\\do5({\fs18 2}){\i C}\\s\\do5({\fs18 1}){\i C}\\s\\do5({\fs18 0})}}{\fldrslt }}
}.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; disable LoRes mode:
\par ld bc,$243B ; next register select port
\par ld a,$15
\par out (c),a
\par ld bc,$253B ; next register r/w port
\par in a,(c)
\par and $7f
\par out (c),a
\par ;; set Timex mode
\par ld bc,$243B ; next register select port
\par ld a,$08
\par out (c),a
\par ld bc,$253B ; next register r/w port
\par in a,(c)
\par or $04
\par out (c),a
\par ;; set alternate page mode
\par ld c,$ff
\par ld a,$01
\par out (c),a
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.2.6  Timex Hi-Colour Mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Timex mode 2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This mode is a {256{\u215*}192} video mode located at global coordinates (32, 32) to (287, 223) with {8{\u215*}1} colour attribute mapping on a {32{\u215*}192} grid. It is selected by writing 2 to the Timex ULA port ($ff). Pixel mapping in this mode is the same as in ZX Spectrum mode using the bitmap 1 area based on {{\field{\*\fldinst{ EQ 0{\i R}\\s\\do5({\fs18 4}){\i R}\\s\\do5({\fs18 3}){\i Y}\\s\\do5({\fs18 2}){\i Y}\\s\\do5({\fs18 1}){\i Y}\\s\\do5({\fs18 0}){\i R}\\s\\do5({\fs18 2}){\i R}\\s\\do5({\fs18 1}){\i R}\\s\\do5({\fs18 0}){\i C}\\s\\do5({\fs18 4}){\i C}\\s\\do5({\fs18 3}){\i C}\\s\\do5({\fs18 2}){\i C}\\s\\do5({\fs18 1}){\i C}\\s\\do5({\fs18 0})}}{\fldrslt }}
}. The colour attributes use the bitmap 2 area with {8{\u215*}1} colour attribute areas corresponding to the addresses {{\field{\*\fldinst{ EQ 1{\i R}\\s\\do5({\fs18 4}){\i R}\\s\\do5({\fs18 3}){\i Y}\\s\\do5({\fs18 2}){\i Y}\\s\\do5({\fs18 1}){\i Y}\\s\\do5({\fs18 0}){\i R}\\s\\do5({\fs18 2}){\i R}\\s\\do5({\fs18 1}){\i R}\\s\\do5({\fs18 0}){\i C}\\s\\do5({\fs18 4}){\i C}\\s\\do5({\fs18 3}){\i C}\\s\\do5({\fs18 2}){\i C}\\s\\do5({\fs18 1}){\i C}\\s\\do5({\fs18 0})}}{\fldrslt }}
}.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code: {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; disable LoRes mode:
\par ld bc,$243B ; next register select port
\par ld a,$15
\par out (c),a
\par ld bc,$253B ; next register r/w port
\par in a,(c)
\par and $7f
\par out (c),a
\par ;; set Timex mode
\par ld bc,$243B ; next register select port
\par ld a,$08
\par out (c),a
\par ld bc,$253B ; next register r/w port
\par in a,(c)
\par or $04
\par out (c),a
\par ;; set hi-colour mode
\par ld c,$ff
\par ld a,$02
\par out (c),a
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.2.7  Timex Hi-Resolution Mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Timex mode 6\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This is a monochrome {512{\u215*}192} video mode located at global coordinates (32, 32) to (287, 223) with each pixel being half width. It is selected by writing to the Timex ULA port ($ff with values that also select which two colours (or colour entries in ULANext mode) you use.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 2.5: Hi-Resolution Colours}{\field{\*\fldinst TC "2.5 Hi-Resolution Colours" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {video/hires.csv} \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 Pixels are mapped into both the bitmap 1 and bitmap 2 areas where 8-pixel wide character columns alternate between the two bitmap areas. The pixels within a byte being rendered left to right lsb to msb as in other Spectrum video modes. The addresses for each row within a character are based on a {64{\u215*}32} grid of {8{\u215*}8} characters which using a {64{\u215*}24} R, C, and Y scheme gives us addresses of the form {{\field{\*\fldinst{ EQ {\i C}\\s\\do5({\fs18 0}){\i R}\\s\\do5({\fs18 4}){\i R}\\s\\do5({\fs18 3}){\i Y}\\s\\do5({\fs18 2}){\i Y}\\s\\do5({\fs18 1}){\i Y}\\s\\do5({\fs18 0}){\i R}\\s\\do5({\fs18 2}){\i R}\\s\\do5({\fs18 1}){\i R}\\s\\do5({\fs18 0}){\i C}\\s\\do5({\fs18 5}){\i C}\\s\\do5({\fs18 4}){\i C}\\s\\do5({\fs18 3}){\i C}\\s\\do5({\fs18 2}){\i C}\\s\\do5({\fs18 1})}}{\fldrslt }}
}.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code: {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; disable LoRes mode:
\par ld bc,$243B ; next register select port
\par ld a,$15
\par out (c),a
\par ld bc,$253B ; next register r/w port
\par in a,(c)
\par and $7f
\par out (c),a
\par ;; set Timex mode
\par ld bc,$243B ; next register select port
\par ld a,$08
\par out (c),a
\par ld bc,$253B ; next register r/w port
\par in a,(c)
\par or $04
\par out (c),a
\par ;; set hi-res mode, black on white
\par ld c,$ff
\par ld a,$06
\par out (c),a
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.2.8  Lo-Resolution Mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This is a Spectrum Next specific video mode with a resolution of {128{\u215*}96} located at global coordinates (32, 32) to (287, 223) with each pixel being double height and double width replacing the old Radistan mode. It can either allow for 16 colours, in which case it uses either the bitmap 1 area or the bitmap 2 area, or 256 colours using both bitmap 1 and bitmap 2. The colour of each pixel can be selected independently with data ordered linearly in a row major fashion. In the case of 16 colour mode, the nybbles describing the colours are X major (MSN LSN). Scrolling is by half pixels and uses different registers ($32 and $33) from the rest of the ULA group modes. LoRes mode is enabled by writing {100{\i x}{\i x}{\i x}{\i x}{\i x}} to Next register $15 (the sprites and layers register) with Next register $6A used to decide whether it is 16 or 256 colours.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $15 ({15}) {{\f5\u8658*}} Sprite and Layer System Setup {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = LoRes mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Sprite priority (1 = sprite 0 on top, 0 = sprite 127 on top) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable sprite clipping in over border mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-2 = set layers priorities (000 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 - S L U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 - L S U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 - S U L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 - L U S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 - U S L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 - U L S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 - S(U+L) ULA and Layer 2 combined, colours clamped to 7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 - S(U+L-5) ULA and Layer 2 combined, colours clamped to [0,7] \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Sprites Over border (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Sprites (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $32 ({32}) {{\f5\u8658*}} Layer 1,0 (LoRes) Horizontal Scroll Control) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = X Offset (0-255) ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and smoothness as Layer 2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $33 ({33}) {{\f5\u8658*}} Layer 1,0 (LoRes) Vertical Scroll Control) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Y Offset (0-191) ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and smoothness as Layer 2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $6A ({6A}) {{\f5\u8658*}} Layer 1,0 (LoRes) Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Radistan (16-colour) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Radistan DFILE switch (xor with bit 0 of port $ff) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Radistsan palette offset (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = ULAplus palette offset (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Code: 256 colour {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; enable LoRes mode:
\par nextreg $15,$80
\par ;; 256-colour mode
\par ld bc,$243B ; next register select port
\par ld a,$6A
\par out (c),a
\par ld bc,$253B ; next register r/w port
\par in a,(c)
\par and $EF ; lores radistan control
\par out (c),a
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Code: 16 colour {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; enable LoRes mode:
\par nextreg $15,$80
\par ;; 16-colour mode
\par nextreg $6A,$10
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 2.3  Layer 2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 2 is a for bitmapped graphics. It supports modes with {256{\u215*}192{\u215*}256} resolution at global coordinates (32, 32) to (287, 223) mapped linearly left to right/top to bottom, {320{\u215*}256{\u215*}256} resolution at global coordinates (0, 0) to (318, 255) mapped top to bottom/left to right, and {640{\u215*}256{\u215*}16} resolution at global coordinates (0, 0) to (319, 255) with half width pixels mapped so that the nybbles in a byte are adjacent columns (MSN on the left) and bytes running top to bottom/left to right. It can be mapped starting at any 16k memory blocks. The {256{\u215*}192{\u215*}256} mode requires 3 consecutive blocks (48k) while the others use 5 consecutive blocks (80k).\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.3.1  Configuration\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 2 is enabled using port $123B or register $69. The mode is selected using register $70. How layer 2 memory is overlaid on main memory is controled by port $123B and register $70. The location in memory is controlled by register $12 with a shadow area pointed to by register $13 for double buffering. Finally port $123B is used to select either the main RAM area or the shadow RAM area for rendering the layer.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $123B ({123B}) Layer 2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bit 4 = 0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = Video RAM bank select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = first 16k \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = second 16k \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = third 16k \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = first 48k \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Shadow layer 2 select \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Enable layer 2 read paging \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Layer 2 visible (mirrored in register $69) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Enable layer 2 write paging \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Bit 4 = 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = 1 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-0 = 16k bank relative offset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $12 ({12}) {{\f5\u8658*}} Layer 2 Active RAM bank {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = RAM bank (point to bank 8 after a Reset, NextZXOS modifies to 9) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $13 ({13}) {{\f5\u8658*}} Layer 2 Shadow RAM bank {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = RAM bank (point to bank 11 after a Reset, NextZXOS modifies to 12) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $69 ({69}) {{\f5\u8658*}} Display Control 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Layer 2 Enable (Port $123B bit 1 alias) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = ULA Shadow display enable (Port $7FFD bit 3 alias) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = Timex alias (Port $FF alias) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $70 ({70}) {{\f5\u8658*}} Layer 2 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Resolution (00 on soft reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = {256{\u215*}192{\u215*}256} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = {320{\u215*}256{\u215*}256} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = {640{\u215*}256{\u215*}16} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = Do not use \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Palette offset ($0 on soft reset) \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Layer 2 {256{\u215*}192}, Write only overlaid on ROM\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par p_layer2: defl $123b
\par start:
\par   ld bc,p_layer2
\par   ld a,$03       ; enable, wo, 1st 16k
\par   out (c),a
\par   call wrtpage
\par   ld bc,p_layer2
\par   ld a,$43       ; enable, wo, 2nd 16k
\par   out (c),a
\par   call wrtpage
\par   ld bc,p_layer2
\par   ld a,$83       ; enable, wo, 3rd 16k
\par   out (c),a
\par   call wrtpage
\par   ret
\par wrtpage:  
\par   ld hl,$0000
\par   ld bc,$0040    ; 40*256 writes
\par loop:
\par   ld (hl),b
\par   inc hl
\par   djnz loop
\par   dec c
\par   jr nz,loop
\par \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Layer 2 {256{\u215*}192} resolution\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par r_mmu_7:  defl $57
\par r_disp1:  defl $69
\par r_layer2: defl $70
\par start:
\par   nextreg r_disp1,$80  ; enable layer 2
\par   nextreg r_layer2,$00 ; 256x192x256
\par   ld a,$12             ; page 18=bank 9
\par loop1:
\par   nextreg r_mmu_7,a    ; map page into slot 7
\par   ld bc,$0020          ; 20*256 = 8k
\par   ld hl,$E000          ; address of slot 7
\par loop2:
\par   ld (hl),b
\par   inc hl
\par   djnz loop2
\par   dec c
\par   jp NZ,loop2
\par   inc a
\par   cp $18               ; stop at page 24
\par   jp NZ,loop1
\par \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Layer 2 {320{\u215*}256} resolution\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par r_mmu_7:  defl $57
\par r_disp1:  defl $69
\par r_layer2: defl $70
\par start:
\par   nextreg r_disp1,$80  ; enable layer 2
\par   nextreg r_layer2,$10 ; 320x256x256
\par   ld a,$12             ; page 18=bank 9
\par loop1:
\par   nextreg r_mmu_7,a    ; map page into slot 7
\par   ld bc,$0020          ; 20*256 = 8k
\par   ld hl,$E000          ; start of slot 7
\par loop2:
\par   ld (hl),b
\par   inc hl
\par   djnz loop2
\par   dec c
\par   jp NZ,loop2
\par   inc a
\par   cp $1C               ; stop at page 28
\par   jp NZ,loop1
\par \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Layer 2 {640{\u215*}256} resolution\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par r_mmu_7:  defl $57
\par r_disp1:  defl $69
\par r_layer2:  defl $70
\par start:
\par   nextreg r_disp1, $80   ; enable layer 2
\par   nextreg r_layer2, $20  ; 640x256x16
\par   ld a, $12    ; page 18=bank 9
\par loop1:
\par   nextreg r_mmu_7, a  ; map page into slot 7
\par   ld bc, $0020    ; 20*256 = 8k
\par   ld hl, $E000    ; start address for slot 7
\par loop2:
\par   ld (hl), b
\par   inc hl
\par   djnz loop2
\par   dec c
\par   jp NZ, loop2
\par   inc a
\par   cp $1C      ; stop at page 28
\par   jp NZ, loop1
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.3.2  Scrolling\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Scrolling Layer 2 is controlled by registers $16 and $17. (Is there a third scrolling register for layer 2?)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $16 ({16}) {{\f5\u8658*}} Layer 2 Horizontal Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = X Offset (0-255)(0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $17 ({17}) {{\f5\u8658*}} Layer 2 Vertical Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Y Offset (0-191)(0 on reset) \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.3.3  Clipping\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Clip area for is based on the local coordinate system for the mode in question and is set using register $18 with the option of selection which write in active using register $1C.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $18 ({18}) {{\f5\u8658*}} Layer 2 Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Coords of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write - X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write - X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write - Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write - Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The values are 0,255,0,191 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $1C ({1C}) {{\f5\u8658*}} Clip Window Control\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Layer 3 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Layer 0/1 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-2 = Sprite clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Layer 2 Clip Index \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 - reset Layer 3 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 - reset Layer 0/1 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 - reset sprite clip index. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 - reset Layer 2 clip index. \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 2.4  Layer 3 (Tilemap) Mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Started with documentation by Phoebus Dokos, February 25, 2019. Partially rewritten for clarity and to add core 3.00.00 features.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.4.1  General Description\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The tilemap is a hardware character oriented display. It uses a set of user defined 4-bit, 16-colour, or 1-bit, 2-colour {8{\u215*}8} tiles. The tiles can be dispplayed in two resolutions: {40{\u215*}32} tiles ({320{\u215*}256} pixels) and {80{\u215*}32} tiles ({640{\u215*}256} pixels).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The display area on screen is the same as the sprite layer, meaning it overlaps the standard {256{\u215*}192} area by 32 pixels on all sides. Vertically this is larger than the physical HDMI display, which will cut off the top and bottom character rows making the visible area {40{\u215*}30} or {80{\u215*}30}, but the full area is visible on VGA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The obvious application for the tilemap is for a fast, clearly readable and wide multicoloured character display. Less obvious perhaps is that it can also be used to make fast and wide resolution full colour backgrounds with easily animated components such as have historically been used in many games.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The tilemap is defined by two data structures and configured using four NextRegs. The NextRegs are $6b (107), Tilemap Control; $6c (108), Default Tilemap Attribute, $6c (110); Tilemap Base Address; and $6d (111) Tile Definitions Base Address.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.4.2  Data Structures\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Tilemap\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The first data structure is the tilemap itself which indicates what characters occupy each cell on screen. Each tilemap entry is either one or two bytes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If entries are two bytes each, the first byte for each entry is bits 0-7 of the tile number, while the second byte is an attribute byte which is interpreted acctording to the mode set in the tilemap control register ($6b). For {40{\u215*}32} resolution, a full size tilemap will occupy 2560 bytes, and for {80{\u215*}32} resolution the space taken is twice that at 5120 bytes. The tilemap entries are stored in X-major order and each two-byte tilemap entry consists of a tile number byte (bits 0-7 of the tile number) followed an attribute byte:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Tilemap Attribute Byte 4-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 : most significant 4-bits of palette entry \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 : x mirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 : y mirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 : rotate \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 : ULA over tilemap (in 512 tile mode, bit 8 of the tile number) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Tilemap Attribute Byte 1-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-1 : most significan 7-bits of palette entry \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 : ULA over tilemap (in 512 tile mode, bit 8 of the tile number) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The character displayed is indicated by the \u226?\u8364?\u339?tile number\u226?\u8364?\u32? which can be thought of as an ASCII code. The tile number is normally eight bits allowing up to 256 unique tiles to be displayed but this can be extended to nine bits for 512 unique tiles if 512 tile mode is enabled via the Tilemap Control register ($6b).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The other bits are tile attributes that modify how the tile image is drawn. Their function is the same as the equivalent sprite attributes for sprites. Bits apply rotation then mirroring, and colour can be shifted with a palette offset. If 512 tile mode is not enabled, bit 8 will determine if the tile is above or below the ULA display on a per tile basis.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When using 1-byte tilemap entries, the map consists of the tile numbers for tile in the map with the tilemap attribute byte for every tile coming from the default tilemap attribute register ($6c).\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Tile Definitions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The second data structure is the tile definitions themselves. To find the difinition for a specific tile you would look at (base address) + (tile number) * (definition size).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For 4-bit, 16-colour, tiles, each {8{\u215*}8} tile takes up 32 bytes. Each pixel uses four bits to select one of 16 colours. A tile is defined in X major order with packing in the X direction in the same way that 4-bit sprites are defined. The 4-bit colour of each pixel is augmented by the 4-bit palette offset from the tilemap in the most significant bits to form an 8-bit colour index that is looked up in the tilemap palette to determine the final 9-bit colour sent to the display. Ane of the 16 colours for each tile is the transparency color.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For 1-bit, 2-colour, tiles, each {8{\u215*}8} tile takes up 8 bytes. Each pixel uses one bit to select one of two colours. A tile is defined in X major order with packing in the X direction. The 1-bit colour of each pixel is augmented by the 7-bit palette offset from the tilemap in the most significant bits to form an 8-bit colour index that is looked up in the tilemap palette to determine the final 9-bit colour sent to the display. Transparency for each tile is according to the global transparency colour.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.4.3  Memory Organization & Display Layer\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The tilemap is a logical extension of the ULA and its data structures are contained in 16k banks 5 and 7 (first half only). If both the ULA and tilemap are enabled, this means that the tilemap\rquote s map and tile definitions should be arranged within the 24k to avoid overlap with the display ram used by the ULA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The tilemap exists on the same display layer as the ULA. The graphics generated by the ULA and tilemap are combined before being forwarded to the SLU layer system as layer U.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.4.4  Combining ULA & Tilemap\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The combination of the ULA and tilemap is done in one of two modes: the standard mode or the stencil mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The standard mode uses bit 8 of a tile\rquote s tilemap entry to determine if a tile is above or below the ULA. The source of the final pixel generated is then the topmost non-transparent pixel. If the ULA or tilemap is disabled then they are treated as transparent.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The stencil mode will only be applied if both the ULA and tilemap are enabled. In the stencil mode, the final pixel will be transparent if either the ULA or tilemap are transparent. Otherwise the final pixel is a logical AND of the corresponding colour bits. The stencil mode allows one layer to act as a cut-out for the other.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.4.5  Programming Tilemap mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $6B ({6B}) {{\f5\u8658*}} Layer 3 (Tilemap) Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Layer 3 Enable (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Layer 3 Size control (0 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = 40x32 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = 80x32 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Disable Arrtibute Entry (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = palette select (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Text mode (1-bit tilemap) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Activate 512 tile mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Layer 3 on top of ULA (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Bits 7 & 6 enable the tilemap and select resolution. Bit 4 selects one of two tilemap palettes used for final colour lookup. Bit 5 changes the structure of the tilemap so that it contains only 8-bit tilemap entries instead of 16-bit tilemap entries. If 8-bit, the tilemap only contains tile numbers and the attributes are instead taken from nextreg $6C.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bit 5 determines whether the attribute byte for each tile come from the tilemap (0) or from the default tile attribute register (1).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bit 4 selects either the primary tilemap palette (0) or the secondary tilemap palette (1).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bit 3 selects whether to use 4-bit, 16-colour, or 1-bit 2-colour tiles.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bit 1 activates 512 tile mode. In this mode, the \u226?\u8364?\u339?ULA over tilemap\u226?\u8364?\u32? bit in a tile\u226?\u8364?\u8482?s attribute is re-purposed as the ninth bit of the tile number, allowing up to 512 unique tiles to be displayed. In this mode, the ULA is always on top of the tilemap.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bit 0 forces the tilemap to be on top of the ULA. It can be useful in 512 tile mode to change the relative display order of the ULA and tilemap.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $6C ({6C}) {{\f5\u8658*}} Default Layer 3 Attribute* {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Palette Offset ($00 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = X mirror (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Y mirror (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Rotate (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Bit 8 of the tile number (512 tile mode) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA over tilemap (256 tile mode) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 *Active tile attribute if bit 5 of nextreg $6B is set.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If bit 5 of nextreg $6B is set, the tilemap structure is modified to contain only 8-bit tile numbers instead of the usual 16-bit tilemap entries. In this case, the tile attributes used are taken from this register instead.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $6E ({6E}) {{\f5\u8658*}} Layer 3 Tilemap Base Address {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Bank Select (3.01.08) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Bank 5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Bank 7 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = MSB of address of the tilemap in Bank 5 (16k) or 7 (8k) ($2C on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Soft Reset default $2C - This is because the address is $6C00 so the MSB is $6C. But the stored value is only the lower 6 bits so it\rquote s an offset into the 16k Bank 5. To calculate therefore subtract $40 leaving you with $2C.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The value written is an offset into the 16k Bank 5 or the 8k lower half of Bank 7 allowinf the tilemap to be placed at any multiple of 256 bytes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This register determines the tilemap\u195?\u173?s base address in bank 5. The base address is the MSB of an offset into the 16k bank, allowing the tilemap to begin at any multiple of 256 bytes in the bank. Writing a physical MSB address in $40-$7f or $c0-$ff, corresponding to traditional ULA physical addresses, is permitted. The value read back should be treated as a fully significant 8-bit value.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The tilemap will be {40{\u215*}32} or {80{\u215*}32} in size depending on the resolution selected in nextreg $6B. Each entry in the tilemap is normally two bytes but can be one byte if attributes are eliminated by setting bit 5 of nextreg $6B.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $6F ({6F}) {{\f5\u8658*}} Layer 3 Tile Definitions Base Address {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Select bank (3.01.08) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Bank 5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Bank 7 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = MSB of address of the tile definitions in Bank 5 (16k) or 7 (8k) ($0C on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Soft Reset default $0C - This is because the address is $4C00 so the MSB is $4C. But the stored value is only the lower 6 bits so it\rquote s an offset into the 16k Bank 5. To calculate therefore subtract $40 leaving you with $0C.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The value written is an offset into the 16k Bank 5 or the 8k lower half of Bank 7 allowing the tilemap to be placed at any multiple of 256 bytes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This register determines the base address of tile definitions in bank 5. As with nextreg $6E, the base address is the MSB of the an offset into the 16k bank, allowing tile definitions to begin at any multiple of 256 bytes in the bank. Writing a physical MSB address in $40-$7f or $c0-$ff, corresponding to traditional ULA physical addresses, is permitted. The value read back should be treated as a fully significant 8-bit value.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Each tile definition is 32 bytes in size and is located at address:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Tile Def Base Addr + 32 * (Tile Number)\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 transparency}} Register (R/W) $4C ({4C}) {{\f5\u8658*}} Level 3 Transparency Index {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Index value ($0F on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Defines the transparent colour index for 4-bit tiles. The 4-bit pixels of a tile definition are compared to this value to determine if they are transparent. In the case of 1-bit tiles transparency is determined by comparing the final pixel colour against the global transparency colour.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For palette information see palette section.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 clip window}} Register (R/W) $1B ({1B}) {{\f5\u8658*}} Layer 3 (Tilemap) Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Coord. of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write = X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write = X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write = Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write = Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 The values are 0,159,0,255 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The X coords are internally doubled.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The tilemap display surface extends 32 pixels around the central {256{\u215*}192} display. The origin of the clip window is the top left corner of this area 32 pixels to the left and 32 pixels above the central {256{\u215*}192} display. The X coordinates are internally doubled to cover the full 320 pixel width of the surface. The clip window indicates the portion of the tilemap display that is non-transparent and its indicated extent is inclusive; it will extend from X1*2 to X2*2+1 horizontally and from Y1 to Y2 vertically.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 scroll offset}} Register (R/W) $2F ({2F}) {{\f5\u8658*}} Layer 3 (Tilemap) Horizontal Scroll Control MSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = X Offset MSB ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Meaningful Range is 0-319 in 40 char mode, 0-639 in 80 char mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $30 ({30}) {{\f5\u8658*}} Layer 3 (Tilemap) Horizontal Scroll Control LSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = X Offset LSB ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Meaningful range is 0-319 in 40 char mode, 0-639 in 80 char mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $31 ({31}) {{\f5\u8658*}} Layer 3 (Tilemap) Vertical Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Y Offset (0-255) )$00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $68 ({68}) {{\f5\u8658*}} ULA Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Disable ULA output (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6-5 = Color blending control for layering modes 6 & 7 (3.01.01) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = ULA as blend colour \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = No blending \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = ULA/Tilemap mix result as blend colour \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = Tilemap as blend colour \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Cancel entries in 8x5 matrix for extended keys (3.01.04) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable ULAplus (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable ULA half pixel scroll (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
may change \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Reserved (must be 0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable stencil mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
When ULA and Layer 3 are enabled, if either are transparent, the result is transparent, otherwise the result is the logical AND of both colours. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Bit 0 can be set to choose stencil mode for the combined output of the ULA and tilemap. Bit 6 determines what colour is used in SLU modes 6 & 7 where the ULA is combined with Layer 2 to generate highlighting effects.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Changes Since 2.00.26\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
512 Tile Mode. In 2.00.26, the 512 tile mode was automatically selected when the ULA was disabled. With the ULA disabled, the tilemap attribute bit \u226?\u8364?\u339?ULA on top\u226?\u8364?\u32? was re-purposed to be bit 8 of the tile number. In 2.00.27, selection of the 512 tile mode is moved to bit 1 of Tilemap Control nextreg $6B. This way 512 tile mode can be independently chosen without disabling the ULA. The \u226?\u8364?\u339?ULA on top\u226?\u8364?\u32? bit is still taken as bit 8 of the tile number and in the 512 mode, the tilemap is always displayed underneath the ULA. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Tilemap Always On Top of ULA. In 2.00.27, bit 0 of Tilemap Control nextreg $6B is used to indicate that the tilemap should always be displayed on top of the ULA. This allows the tilemap to display over the ULA when in 512 mode. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
1-bit tilemaps. In 3.00.00, a number of modifications were made to accomidate 1-bit tilemaps. \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Future Direction\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The following compatible changes may be applied at a later date:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Addition of a bit to Tilemap Control to select a reduced tilemap area of size {32{\u215*}24} or {64{\u215*}24} that covers the ULA screen. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Addition of a bit to Tilemap Control to select split addressing where the tilemap\u226?\u8364?\u8482?s tiles and attributes as well as the tile definitions are split between the two 8k halves of the 16k ULA ram in the same way that the two Timex display files are split. The intention is to make it easier for the tilemap to co-exist with all the display modes of the ULA. \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 2.5  Sprites\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 February 25, 2019 Victor Trucco\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Spectrum Next has a hardware sprite system with the following characteristics:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Total of 128 sprites \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Display surface is {320{\u215*}256} overlapping the ULA screen by 32 pixels on each side \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Minimum of 100 sprites per scanline* \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Choice of 512 colours for each pixel \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Site of each sprite is {16{\u215*}16} pixels but sprites can be magnified {2{\u215*}}, {4{\u215*}} or {8{\u215*}} horizontally and vertically \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Sprites can be mirrored and rotated \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Sprites can be grouped together to form larger sprites under the control of a single anchor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
A 16K pattern memory can contain 64 8-bit sprite images or 128 4-bit sprite images and combinations in-between \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
A per sprite palette offset allows sprites to share images but colour them differently \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
A nextreg interface allows the copper to move sprites during the video frame \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 *A minimum of 100 {16{\u215*}16} sprites is guaranteed to be displayed in any scanline. Any additional sprites will not be displayed with the hardware ensuring sprites are not partially plotted.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The actual limit is determined by how many 28MHz clock cycles there are in a scanline. The sprite hardware is able to plot one pixel cycle and uses one cycle to qualify each sprite. Since the number of cycles there are in a scanline varies with video timing (HDMI, VGA), the number of pixels that can be plotted also varies but the minimum will be 1600 pixels per line including overhead cycles needed to qualify 100 sprites. Since sprites magified horizontally involve plotting more pixels, {2{\u215*}}, {4{\u215*}}, and {8{\u215*}} sprites will take more cycles to plot and the presence of these sprites in a line will reduce the total number of sprites that can be plotted.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.5.1  Sprite Patterns\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Sprite patterns are the images that each sprite can take on. The images are stored in a 16K memory internal to the FPGA and are identified by pattern number. A particular sprite chooses a pattern by storing a pattern number in its attributes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 All sprites are {16{\u215*}16} pixels in size but the come in two flavours: 4-bit and 8-bit. The bit width describes how many bits are used to code the colour of each pixel.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 An 8-bit sprite uses a full byte to colour each of its pixels so that each pixel can be one of 256 colours. In this case, a {16{\u215*}16} sprite requires 256 bytes of pattern memory to store its image.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A 4-bit sprite uses a nibble to colour each of its pixels so that each pixel can be one of 16 colours. In this case, a {16{\u215*}16} sprite requires just 128 bytes of pattern memory to store its image.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The 16K pattern memory can contain any combination of these images, whether they are 128 bytes or 256 bytes and their locations in the pattern memory are described by a pattern number. This pattern number is 7 bits with bits named as follows:\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Pattern Number\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par N5 N4 N3 N2 N1 N0 N6
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 N6, despite the name, is the least significant bit.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This 7-bit pattern number can identify 128 patterns in the 16k pattern memory, each of which are 128 bytes in size. The full 7-bits are therefore used for 4-bit sprites.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For 8-bit sprites, N6=0 always. The remaining 6 bits can identify 64 patterns, each of which is 256 bytes in size.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The N5:N0,N6 bits are stored in a particular sprite\u226?\u8364?\u8482?s attributes to identify which image a sprite uses.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 8-Bit Sprite Patterns\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The {16{\u215*}16} pixel image uses 8-bits for each pixel so that each pixel can be one of 256 colours. One colour indicates transparency and this is programmed into the Sprite Transparency Index register (nextreg $4B). By default the transparent value is $E3.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 As an example of an 8-bit sprite, let\u226?\u8364?\u8482?s have a look at figure 1.1.\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 
{\pict\picw127\pich127\picwgoal1905\pichgoal1905\pngblip
89504e470d0a1a0a0000000d494844520000007f0000007f080200000049df8a44000000017352474200aece1ce90000000467414d410000b18f0bfc6105000000097048597300000ec300000ec301c76fa864000009ec49444154785eed9bc18d1c471004cf181aa3a70c9111344546d0009a213368001f8abcfc65720ad8
c1eef536d040601e71c5eeaaece20182a48f8f6f7fe0e7cf9f61cc42fffbe357b3bbcf39cdf7efdfc398853efa36bbfb9cd3f05661cc421f7d9bdd7dce6978ab3066a18fbecdee3ee734bc5518b3d047df66779f731ade2a8c59e8a36fb3bbcf390d6f15c62cf4d1b7d9dd6b305ee67c977c73cb0c3ff8fdfb57f3053e3a31
aaafc581dd7dce697899c8c57c818f4e8ceaab75d8dde79c466f55d1c017f8e8c4a8be5a87dd7dce69f456150d7c818f4e8ceaab75d8dde79c466f55d1c017f8e8c4a8be5a87dd7dce69f456150d7c818f4e8ceaab75d8dde79c466f55d1c017f8e8c4a8be5a87ddbd06e365ce77c937b7ccf083d84a23ffdfafe68eafc301
1f9d18d5d7e2c0ee3ee734bc4ce462e42b4ab8e3eb70c0472746f5d53aecee734ea3b7aa6840bea2843bbe0e077c7462545fadc3ee3ee7347aab8a06e42b4ab8e3eb70c0472746f5d53aecee734ea3b7aa6840bea2843bbe0e077c7462545fadc3ee3ee7347aab8a06e42b4ab8e3eb70c0472746f5d53aecee734ea3b7aa68
40bea2843bbe0e077c7462545fadc3ee5e83f132e7bbe49b5b66f8416ca591af4506f91f7f3793af4360b8373a34aaaf85825d7cce63789998dfc85764205f11c3e4eb1018ee8d0e8dea6b24d8c5e73c466f5511807c4506f215314cbe0e81e1dee8d0a8be46825d7cce63f4561501c85764205f11c3e4eb1018ee8d0e8dea
6b24d8c5e73c466f5511807c4506f215314cbe0e81e1dee8d0a8be46825d7cce63f4561501c85764205f11c3e4eb1018ee8d0e8dea6b24d8c5e73c466f5511807c4506f215314cbe0e81e1dee8d0a8be46825dbc06e065ce77c937b7c9f083d83e235f0b0bf2b5e080fff1d74733f838d9c85733808fce8dea6bd1e0dd7cf6
6d789998d3c85734205fd1033ef235838f938d7c3503f8e8dca8be468577f3d9b7d15bd5a8205fd1807c450ff8c8d70c3e4e36f2d50ce0a373a3fa1a15decd67df466f55a3827c4503f2153de0235f33f838d9c85733808fce8dea6b5478379f7d1bbd558d0af2150dc857f4808f7ccde0e364235fcd003e3a37aaaf51e1dd
7cf66df456352ac85734205fd1033ef235838f938d7c3503f8e8dca8be468577f3d9b7d15bd5a8205fd1807c450ff8c8d70c3e4e36f2d50ce0a373a3fa1a15decdab515ee67c977c736b0c3f882d3393af85057c6cb7c1fff5eda319eae364235fcd003e2632aaaf0584553efb33bc4ccc63265fd1003e7234f8c8dd0cf571
b291af66001f1319d55704b0ca677f466f5523c1e42b1ac0478e061fb99ba13e4e36f2d50ce06322a3fa8a0056f9eccfe8ad6a24987c4503f8c8d1e0237733d4c7c946be9a017c4c64545f11c02a9ffd19bd558d0493af68001f391a7ce46e86fa38d9c85733808f898cea2b0258e5b33fa3b7aa9160f2150de02347838fdc
cd501f271bf96a06f03191517d4500ab7cf667f45635124cbea2017ce468f091bb19eae364235fcd003e2632aaaf0860955743bcccf92ef9e67618fda0240c3eb6cfc8d7c2023eb6dbe0e36f8319eae364235fcd003e3a37aaafc58457fbecc3f03261cce0634e235fd1003e7234f8c8dd0cf571b291af66001f9d1bd55734
f06a9f7d18de2a8c197ccc69e42b1ac0478e061fb99ba13e4e36f2d50ce0a373a3fa8a065eedb30fc35b8531838f398d7c4503f8c8d1e0237733d4c7c946be9a017c746e545fd1c0ab7df66178ab3066f031a791af68001f391a7ce46e86fa38d9c85733808fce8dea2b1a78b5cf3e0c6f15c60c3ee634f2150de02347838f
dccd501f271bf96a06f0d1b9517d4503aff6d987e1adc298c1c79c46bea2017ce468f091bb19eae364235fcd003e3a37aaaf68e0d55e17f332e7bbe4fb11af61f8411833f8d826a3fa5a4090af85057c6cb7c1c7df0633f838d9c85733808fce8dea6b58b8511fc6fc397d5e268c197cf461545fa3827c4503f8c8dde0235f
33f838d9c85733808fce8dea6b58b8511fc69cdd17f8e8dca8be86851bf561ccd97d818fce8dea6b58b8511fc69cdd17f8e8dca8be86851bf561ccd97d818fce8dea6b58b8511fc69cdd17f8e8dca8be86851bf5618cfe002f73be4bbe4fdbfd304617d48280ea6b0141be1616f0b1dde6868f938d7c3503f8e8dce8fc7ffe
6e86fa48c63cedf77e18838f3e8cea6b5490af68001f399a1b3e4e36f2d50ce0a373a3f32b7a18ea231973765fc85733808fce8dceafe861a88f64ccd97d215fcd003e3a373abfa287a13e923167f7857c3503f8e8dce8fc8a1e86fa48c69cdd17f2d50ce0a373a3f32b7a18ea231973765fc85733808fce8dceafe861a88f
648c7ec0cb9cef92efcb773f8cd1c5b520a0fa5a4090af85057c6cb779a2fffddfbf8dea6bf1011f13199d5321c0cb7fef8731f8e8cfa8bea207f98a1ef0919779a28fdc8dea2b7ac0c74446e7540870765f0c3e7237aaafe8011f13199d5321c0d97d31f8c8dda8bea2077c4c64744e850067f7c5e02377a3fa8a1ef03191
d13915029cdd17838fdc8dea2b7ac0c74446e7540870765f0c3e7237aaafe8011f13199d5321807ec0cb9cef92efb2dd0f63f0b13546f5f51702e4eb2f04e0638bcd744efd8ff6309c131d1a9d5343c1955ff67b3f8cc1c73c46f51519c857f4808fbccc744e450fc339d1a1d13935145cf9b3fb42bea287e19ce8d0e89c1a
0aaefcd97d215fd1c3704e7468744e0d0557feecbe90afe86138273a343aa786822b7f765fc857f4309c131d1a9d5343c1953fbb2fe42b7a18ce890e8dcea9a1e0caeb0ff032e7bbe4fb76bb1fc6e063cb8cea6b91011fdb6a545f0b0ef8f8afe7cc746f35098ffab7fbbd1fc6e0637ea3fa8a1ef091bb517d450ff8c8dd4c
f75693f0a83fbb2ff091bb99eead26e1517f765fe0237733dd5b4dc2a3feecbec047ee66bab79a8447fdd97d818fdccd746f35098ffab3fb021fb99be9de6a121ef53a889739df25df6d763f8cc1c7561ad5d7bf90027cfc6d30c339f1b7c14cf7569370e5b7f9bd1fc6e0637ea3fa8a1ef091bb19ce89dccd746f350957fe
ecbe18ce89dccd746f350957feecbe18ce89dccd746f350957feecbe18ce89dccd746f350957feecbe18ce89dccd746f350957feecbe18ce89dccd746f3509575e7f809739df25df6d763fb6cce0e3bf2633838f13cc8d7be39f96cda3e76ff37b3fe631f8c8d70c3e4e3037ee8ddccda3e79fdd1737ee8ddccda3e79fdd17
37ee8ddccda3e79fdd1737ee8ddccda3e79fdd1737ee8ddccda3e79fdd1737ee8ddccda3e7eb07bcccf92ef96eb3fb610c3eb6cc0c3e4e304fbc37fee9da5cd56ff37b3f8cc1e73c9f0c3e4e304fbc37723757f567f7c513ef8ddccd55fdd97df1c47b237773557f765f3cf1dec8dd5cd59fdd174fbc37723757f567f7c513
ef8ddccd55bdfe002f73be4bbedbef7e18b3d0e7767f72e5b7ffbd1fc62cf499ef2757feecbe78a2cf7c3fb9f267f7c5137de6fbc9953fbb2f9ee833df4faefcd97df1449ff97e72e5cfee8b27faccf7933ffb6f1fff03ba5430bfb82aac690000000049454e44ae426082}
 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure 2.1: Pattern Example}{\field{\*\fldinst TC "2.1 Pattern Example" \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb240 \fi0 Using the default palette, which is initialised with RGB332 colours from 0-255, the hexadecimal values for this pattern arranged in a {16{\u215*}16} array are shown below:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par 04040404040404E3E3E3E3E3E3E3E3E3
\par 04FFFFFFFFFF04E3E3E3E3E3E3E3E3E3
\par 04FFFBFBFBFF04E3E3E3E3E3E3E3E3E3
\par 04FFFBF5F5FBFF04E3E3E3E3E3E3E3E3
\par 04FFFBF5A8A8FBFF04E3E3E3E3E3E3E3
\par 04FFFFFBA844A8FBFF04E3E3E3E3E3E3
\par 040404FFFBA844A8FBFF04E3E3E3E3E3
\par E3E3E304FFFBA84444FBFF04E304E3E3
\par E3E3E3E304FFFB444444FBFF044D04E3
\par E3E3E3E3E304FFFB44444444FA4D04E3
\par E3E3E3E3E3E304FFFB44FFF54404E3E3
\par E3E3E3E3E3E3E304FF44F5A804E3E3E3
\par E3E3E3E3E3E3E3E304FA4404A804E3E3
\par E3E3E3E3E3E3E3044D4D04E304F504E3
\par E3E3E3E3E3E3E3E30404E3E3E304FA04
\par E3E3E3E3E3E3E3E3E3E3E3E3E3E30404
\par 
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Here $E3 is used as the transparent index.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 These 256 bytes would be stored in pattern memory in left to right, top to bottom order.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 4-Bit Sprite Patterns\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The {16{\u215*}16} pixel image uses 4-bits for each pixel so that each pixel can be one of 16 colours. One colour indicates transparency and this is programmed into the lower 4-bits of the Sprite Transparency Index register (nextreg $4B). By default the transparency value is $3. Note that the same register is shared with 8-bit patterns to identify the transparent index.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Since each pixel only occupies 4-bits, two pixels are stored in each byte. The leftmost pixel is stored in the upper 4-bits and the rightmost pixel is stored in the lower 4-bits.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 As an example we will use the same sprite image as was given in the 8-bit pattern example. Here only the lower 4 bits of each pixel is retained to confine each pixel\u226?\u8364?\u8482?s color to 4-bits:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par 4444444333333333
\par 4FFFFF4333333333
\par 4FBBBF4333333333
\par 4FB55BF433333333
\par 4FB588BF43333333
\par 4FFB848BF4333333
\par 444FB848BF433333
\par 3334FB844BF43433
\par 33334FB444BF4D43
\par 333334FB4444AD43
\par 3333334FB4F54433
\par 33333334F4584333
\par 333333334A448433
\par 33333334DD434543
\par 33333333443334A4
\par 3333333333333344
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 $3 is used as the transparent index.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 These 128 bytes would be stored in pattern memory in left to right, top to bottom order.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The actual colour that will appear on screen will depend on the palette, described below. The default palette will not likely generate suitable colours for 4-bit sprites.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.5.2  Sprite Palette\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 palette}} Each pixel of a sprite image is 8-bit for 8-bit patterns or 4-bit for 4-bit patterns. The pixel value is known as a pixel colour index. This colour index is combined with the sprite\u226?\u8364?\u8482?s palette offset. The palette offset is a 4-bit value added to the top 4-bits of the pixel colour index. The purpose of the palette offset is to allow a sprite to change the colour of an image.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The final sprite colour index generated by the sprite hardware is then the sum of the pixel index and the 4-bit palette offset. In pictures using binary math:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par 8-bit Sprite
\par PPPP0000
\par + IIIIIIII
\par ----------
\par SSSSSSSS
\par 
\par 4-bit Sprite
\par PPPP0000
\par + 0000IIII
\par ----------
\par SSSSSSSS = PPPPIIII
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Where \u226?\u8364?\u339?PPPP\u226?\u8364?\u32? is the 4-bit palette offset from the sprite\u226?\u8364?\u8482?s attributes and the \u226?\u8364?\u339?I\u226?\u8364?\u32?s represent the pixel value from the sprite pattern. The final sprite index is represented by the 8-bit value \u226?\u8364?\u339?SSSSSSSS\u226?\u8364?\u32?.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For 4-bit sprites the palette offset can be thought of as selecting one of 16 different 16-colour palettes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This final 8-bit sprite index is then passed through the sprite palette which acts like a lookup table that returns the 9-bit RGB333 colour associated with the sprite index.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 At power up, the sprite palette is initialized such that the sprite index passes through unchanged and is therefore interpretted as an RGB332 colour. The missing third blue bit is generated as the logical OR of the two other blue bits. In short, for 8-bit sprites, the sprite index also acts like the colour when using the default palette.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.5.3  Sprite Attributes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A sprite\u226?\u8364?\u8482?s attributes is a list of properties that determine how and where the sprite is drawn.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Each sprite is described by either 4 or 5 attribute bytes listed below:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sprite Attribute 0 {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par X X X X X X X X
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The least significant eight bits of the sprite\u226?\u8364?\u8482?s X coordinate. The ninth bit is found in sprite attribute 2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sprite Attribute 1 {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par Y Y Y Y Y Y Y Y
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The least significant eight bits of the sprite\u226?\u8364?\u8482?s Y coordinate. The ninth bit is optional and is found in attribute 4.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sprite Attribute 2 {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par P P P P XM YM R X8/PR
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 P = 4-bit Palette Offset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 XM = 1 to mirror the sprite image horizontally\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 YM = 1 to mirror the sprite image vertically\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 R = 1 to rotate the sprite image 90 degrees clockwise\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 X8 = Ninth bit of the sprite\u226?\u8364?\u8482?s X coordinate\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PR = 1 to indicate P is relative to the anchor\u226?\u8364?\u8482?s palette offset (relative sprites only)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Rotation is applied before mirroring.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Relative sprites, described below, replace X8 with PR.\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 
{\pict\picw900\pich384\picwgoal4320\pichgoal1843\pngblip
89504e470d0a1a0a0000000d4948445200000384000001800806000000f540ac040000000467414d410000b18f0bfc6105000000206348524d00007a26000080840000fa00000080e8000075300000ea6000003a98000017709cba513c00000006624b474400ff00ff00ffa0bda793000000097048597300002e2300002e23
0178a53f760000000774494d4507e3021b0c2104233468ec000080004944415478daecfd677b5c39962d0c2ee078133e484999e5bafbda5f34333ffbbef33c73dfb76f57755566564a34618f77c07cd800e2044552944449cc14964a49954c300207c0766bafcdfe3fffafffb7648cc1e11caeebc2711c70cec13907630c63
48292101789e87344db15c2e717171811f7ffc117ffcd31f71f9ea15922481ebbaf7fefb4f85941242089465899beb6bfcfcf3cff8f59fffc4f5f535b6db2d8abc40d775609c238e63ac562bfcf0e30ff8e1871ff0ead52bac2f2e309bcde079dea3df671806144581dd76879b9b1bfcf4d34ff8c7dfff812c3b62b95ae2bf
fc97ff823fffe52f58ad5648d314611882730e00e6fd1d0f076c361bfcf2f32ff8e9a79f906519168b05fef5dffe157ffcd39fb0582c9024097cdf37fff673d0b62df22cc376bbc5f5f5357efde7aff8f9979f71737d83b2283088019ee7214953ac964b5c5c5ee2c73ffc017ffce31f71797989388ecdfbb8ef79d7758d9b
9b1bfcf39fbfe2eadd3bdcdede223b1ec118c39b1f7ec07fffefff1d7ffecb9f31994ce038ced9eb48292186016ddbe27038e0ef7fff3bfe9ffffbffc6d5d5155ccfc3e5c5255ebf798357af5ee1d5ab57982fe6f07dffb3d7440881a228b0dfef717b73835f7efe05fff8c73ff0eedd3b1445816118e0380e8220c06432c1
6ab5c21ffef007fce55ffe82373ffc80344d9f7d0f7f2abaaec3cdcd0d7efef967fcfcd34ff8e5e79ff1cf7ffe8add768bbeefe1b91e5ccf3d7b9f527d658c81736eceebebd7aff1e73fff193ffee10f58afd798cd6688e318aee73eeb7b1e8601755d233b1ee92cfcf233fef33fff8eb7bffe8a3ccfd1f70338e7f07d1f49
9260b95ce2c71f7fc45ffee55ff0e68737984ea7f07d1f8ee3dcbbfe52d227ecfb1e4551e0979f7fc15ffffa1f78fbeb5b344d03d7f3309d4ef1c38f3fe25ffff55ff0e6cd1b8461f8de6b1445815ffff94ffcedaf7fc3bb77efd0362d3c9ffeedab57aff0077546c2287c96b37a1fa494c8b20c9bcd16b7373778fbf6ad7a
2f0d5ebf7983fff93fff27fef22f7f4192248fbe8e10025dd7a1aa2aecf77bfcfd3fff13fffeefff07b7373788a2083ffef8237efcc38fb8bcbcc46abdc6743a85ebbeffdcfbbec776b331efe3fafa1adbcd16c330e0d5ab57f86fffedbfe14f7ffe13a6b3197ccf037fe0193df1c34348896118501605debd7b8b7ffcfd1f
f8e73fff89dbdb5b1c0e079465856118c01dbadb2f2f2ef1873ffe013ffef0232e5f5d62b95a9ddd3ddf0a524a0c42a06b5bec763bfcc77ffc07febfffd7ff85bffdf5afc88e19a414608c83818171f6de7e7ad4b6fe51d9d6f4f96d2b407ba7aa2adcdcdce0979f7fc6affffc15575757d86c36c8b20c5ddb82318e280ab1
5aadf0e6cd1bbcf9e107bc7afd1a97af2e319f7ff8de36f6f178c4e6e6067ffffb3ff0b7bffe15fbfd1ef3c51cfff66fff863fffe52f58abbd194511b87aa64208344d833c2fb0db6ef1d34f3fe13ffff637ecf67bcca653fce55ffe823ffee94f582e97984c26f46f9fe1bcf67d8fb22870381eb1b9bdc52fbf901db97af7
0e7996a3ef7b70c741144598cd6658add7f8c31f7ec49ffefc67bc7efdfa8376a46d5becf77b5c5f5fe3eaea0a6f7fa575efda0eaf5ebfc6fff81fff03fff2afff42be8befc319bd8ebe038761409ee7f8e91f3fe1fffcfbbfe3eddbb7e8871e499c60b15ce0871f7ec01ffff4275c5e5e22088267db3377310c036e6f688d
de5dbdc3617f40d3d4705d17af5fbfc6bffeebbfe2871f7f4414455fec3d7c0ecab2c45fffe33ff0bffed7ffc2fff9f77fc776bb45dbb61806010070387fef8ea1332be1ba2ea228c2743ac57abdc68f3ffe883fffe52f78f3e60d2693093dbbcfb927efe0dc1fbec12fbfd099bdbebec666b3419ee768db168c31e30ffff8
e38ff8f1c71fe9cc5e5e62369f7df0ce1c860199f22d6faec907f9e5e79f51e439d6176bfc97fffadff0977ff90b96cb25e23886effbe633f6c38022cfb1db912ffdcf5f7ec12fbffc82b228b15eaff15fffdb7fc55ffef217cce773046108cff3be88af350c039aa6c1f178c4cf3fff8cfffcdbdfb0dd6e11c5317ef8e107
bc79f3068bc5c2f8428fdd1bdaaffce5975ff0b7fff82b7efdf557d4750dd77331994cf0e6cd1bf3dcefbb838410e417e539b69b0dfef1f7bfe3af7ffd1bf6bb1de6f339fef5dffe157ffaf39fb15236edb9eeb187d664bfdfe3af7ffd2bfe9ffffdbff1f3cf3f23cf73b85208301504ba9e87c0f7cd25f6de079212524a38
8e03d77521a544dff768da164dd3a26d5b044170efbffd54e8cddff73dbaae43dbb6e8ba0e7ddf8301f03d1f221214ec31468196c3cd876e9a065dd7611806b8aefbc14dc718339f8f7ed2da4829d1769d79cd300c2184309f731806745d87ba6950d735baae030038ae03d7f3e08c82ede7daf84208e308eaf7d50f3d3823
675b080129255cd72183cd18bdcf969e55dbb6f03c0f9ee73df8bc18683d3cd785e779701d0760cc3c93b66dcd7a0038bb64a472f6cc736b5b0cc300292538e3705c179ee73ebb9363de9b7e167d073072b6c230a4efaf0225cef9e8b374689b06dd33efe1e78054674fe2b447196308c3d09c39fdf780f78342fd399bb645
5555a8eb1a711c4308417ff919ef62732f98b3d003a0f50f82109e4fe7c675e84c4829d1abc441abee91a79c15c618ad85ebc0f37cf8be8fbeef21d599d0fbbceb3a9380d1eb68f6aefaf361180000aedee79e07c7e1600ccf6ea8a494608cd19dd2b4a8eb1a5559a22c4b5a2f7d4ed4f97d0af45ae8673d3e5b6040d77768
eaf7efc3bb18dfb3ad7a1f8c33789cee09c71d3d97cf5c17097556cdf7a37b7d182878f27d1f1274b73275b733ce30f4a7bbbd579fe55b0784eac19efd5a3f3b7a26a77b4eefed311eb5adea5904ddf3dbd6f11dddb52d3af50c003aaf5114c1735d803104be0fee38188440d3367457aaf51fdbc287c055e2d9d1b6d5a3f3
0f4989afbaae697ff63d7c214e01e1a06c5c5d9bf321a5a424b6e79e6cabf3bc49e86118d0f5bdf9be7dd781a97509236dff1de3734829d0a97b45df3b8f3d2f7d5e4fbe06ed0f098961a0d7a9ebda3886fc8ed33cb6c16dd7a2eb7b738f39ae036fe4cb7d0967dbd81a9538aeaa8aeeb0aa42db34143073c7d8ad970e29a5
b97319d3cfe5f48c4c5037fadc12275f823146cfa3233f42ef01bd3f9feb3deae7de771dbaee746f02a733ab7ddd2008e0388ef187e9ccb64fbe33f57da5f7a7bebb8490e8bad69c595fed35c79cd9e1dc2fede90e37f6d539edcb2f95741f944fa1f7655555a8d573f17d1f42f9a21f032a9e914feff93ebaae333eb8f671
b5bfa1fffe388973e697761da0ee7cc7a57b4cfb445feabceabbfebe35e9da166e3f0c701983e3ba489304e964823008c859761c707efa30831010838090025248939d3a1cf6984e2788e2c86c98e7fc507ddfa3ae6b1445812ccb916519aaaa820490a409923435c10fe71c9eeba1ae6becf77b044180244910c7312dbc7a
5ff7bd37ed68fb818f300a1145118230845b14e8fb812a719b2d5cd785effba68a21a544d775288b02bbddce6469849408027a9d300ce1fbbe09423ed7a8ebe7d1b62d5535773b6cb73b946505c771309d4e91a6297d2fe75401acaa0a5996e178389e6520fc20782f26608cb2d99ee7238e632449826318820168da166551
20cb8e381e8f705d1749929c1b1f1544e7458ec3e1802ccb50d7b5c9f8876180388e1146213cdf7b3647a7ef7b546589fd7e8fdd6e87b228c11843922488a2c8ec031d50f77d8fa22c901d8f489298f63d7bde3dfc59cf5a08886120632f251c87c35767543f67d77120716ea4f505a41d93beef713c1ce0a98b3b08028461
484e83f37cc1ef300ca8aa0a87c301bbdd0e799e430a89308ce0fb011cd781e3b810ca91a4bf4fd503ba43385cc779b0a2af83297dcf844180344d904e5274ead917798ee3f180ec7844319ba9cfeb0320a35d55158ec7238e8723b29cee13d775110401d2c904499ac00f82cfab803df43c47cfa5280a6c375b5c5d5d5186
5755e0f5f3121f11146ac7c5f33c844188288a11a8c4555994d8eeb6f0031f499a22491278c6013d3d377d9fec0f071cf607d4550dce39c230449c24085536d77d86e496b937d59d946519f2a240db36e09c63329962aa924f4252c0e17007655562b7dbc10fe85ed267fa2554f4f5b913eacc4a29e17a544148e2049eb201
ce1ddb4ae7809eb590e2645bf77b932d761c078cb367b7ad4dd328db9ae1981d511405a494643793f83d27b9a96b1cf60784418864921adbaa9dd087de1b772848219b18220c23787e81410864598eed766b92464110c0715d404a747d87b22cb1dbefb0d9dc22cb320c6280effb08c3085118210c42f8de2900facca76812
156736bd28ceec08771c38dc217f484a746d4bf78eb6ad8c9f25efee8231669294893a5b8ee3400c027555e3783c60bfdf53525a39d3e37dd6753daab2429ee5c8b30c4551a0691a78be47f7987a7ecfc546babbcf876130fb273b1e7173738d6b758fd575adfc1cf28ff0918ef7d786d46c05e513380e87efc70802f2f382
203c4b9c9b332e4e364c57dab3e311fbc3015192185fe329c588a74207774559aa7b93ceac10024992204992737fd8f3d0340d0e873dc228443a49112b5fed2eab6b0cbd778320401447e40f0701cab244d775381e8fd86eb76701a34e3c1b3bb2db61b7dda22c0b30462c8f384994cff7fc098bf1fddb340d8a3c27a6d866
83ebab2b6c956fce3937c1dc53a113387ee0234962a4494267be2c90e7398ec723f23c475996f05c177e109c9d59cd9c3a1c0ed82bbf482766c3907cb1200ce0f9de33dd63e76b62f64d9e637f38e0e69aceeb76bbc5f1487bc8edba0e8ea26fcde6735c5e5e62329990a3a8b2e452c26cfabea74cdd516dfac3610fc68040
39a88e72e48267a0fe01309b2bcf73ec773b6cb71becb6b498aeeb623e9f234953cace74bd8a7e4b944581baaecd059e28fa86ce643cf4c075f93f4d534c2613a4498222cf31f43d76db1da4a4c4781486c648eb52f0fe70c0d5bb7778f7ee1daaaa02631c499218a73d8aa247bfffc7ae4b6f2862075c5d5de1eadd15fabe
471006984ca7088200beef8101c88b0287fd1e455190133d2ad3eb67867b3246f477034c6753b45d8ba3a28bd60ded81dbdb0da2283697cbf8d21452a2ae2aec777bdcdcdc60bbdda22c4b8841c0733db53633a469fa6c464b28dad631cb707d7d8d77efdea1ae2a70ce315fcce9725381709113ad940c5a864db851f44bba
44fde0f90de9a77d2689be1f30f403a4041cc7451cc7984c2678fdfa3596ab25555324058fc029e82895d1a8aa0a6ddbe2e6e6869e8110669febcacb735ccafafbe6798eebeb6bbc7dfb1665510290e65e8915adbc54417b53d7c8f31c9bcd2d3867e08cc10f02848f5026b4e3e9791ee238c162b1a08a5fdde0783820cb73
38ae8bd96c86244d15dd8aa885641c0fb8bdbdc5eded2df63b3a17d3e914719260b95c603e9b9bf3fd9cd017b34e70ed777bfcfaebaff8e91fffc0d5d5158e8703baae431cc768db16423c3d8ba903c2300c91a474ef6847ff703ca2691b30c690a613a232297600ed31ba67cba2a0b5b9bec1cdcd0d841048d314b3e94cd1
6a2850769ec1c1d1465b3b16dbed1687c301755dc3f33ccc66732469022961aa2e4dd320cf723475a32851099224551551ef9b07857406258641a0574ea2effb58cc1758ad5648d2d450a4c6b65588015dd7a3696a1c0f471cf67b1cf67b0030c91feddc3d17f54f07e4850a3cb79b2db69b2d8ed911aea36d6ba2921303ba
ae455996288b127543eb9fa489691301f06812c7755d844140ced46482c97482a22cd036449d1452006088a2d8249701d01e391c956dbd429e671003dd5f93498ac924459cc426b9f5b910e2e43c1d0e07bc5336bd6d5a38ae83f96281300c2980e39c12b2fb3d5af53e033f20760100d773cf181c6368dafc643241d775d8
ef7686d9539405369b0dddcd005cd743a00246fdecdab6c131d3676787e3e180b22a31f389fe369fcf319dce1efcfe9fb36f745584ee0ba2d4fefcf3cff8c73ffe81dbdb5b736f044140c109f0d1d598af0d31080c2a09e7ba1e269314d319f927ba45c8715c00920a232a995c376327bfa0aab10a061cce8d2d7baeb5d789
c4c37e6feecd2c3bc2715ccce633a4e9049cf3b36a10d9ff068c73a42a21e8388e296adc87937d8dd1751d269309e2383694d4ed666bde53e0fb0882004cb1d07442f8ea8ae8d06dd310b5329d189f3d080215633caf8dd52cb8a2a033f4f6dd3bbc7bfb0e6fdf12adb66b3b388e8ba6692054927dcce87808da57268af81c
755da3ac4aecf73b647503d771309fcf31994c5492fd5480d2cf2dcf32dcdedce0ddbb77d8eff71806f2d79324a1044e1c230c9ee71e1bef199db8213f6b83ab77eff0ebafbfe2e79f7fc6bbb76fb1d96c28293ef43d6410c0f73ccc6633bc7af50a8be5124992a82c9d73ca602a5a5d9e67609ce3783c222b4b0040145106
218c22a449822149c09dd3bffdd8cb401b765d1d3c1e8fd8ed76d8eff7c8f20c6ddb218a622c972bac2fd6705dd7048e37d737381c8ea8eb233cd7c572b9c47cb1309bffb10cabcee4f47d8fc97482d97c86a228e8b36619baae83ebbac679d481729665d86db7b8beb9c1eded2d1863ea429eaa439a220c4253511c67263e
9616662ea2ba465996cab9dd60b3d9200802cce6735c5c5c985e0c2106dcdede52e5a42c916739b6db1d3c8fb2d57114238ee3079f83eeb5eb55501c84e490545585dd6e4707db758c91d49bb91d1dca9b9b1b1c0e07f45d6f2e99c9648274921ac77b1886335adfc7acc9b82256e9feb5db5b6c6e6fc138c762b1c072b9c4
4c5df08c316cb75b53ead7bd5714d4fa94104827cf76283f1912a662a0e9b6ba0ab4582ef0e6871ff0e6cd6b846164820d62b548b42d05f09bdb0db6db2d76db2d0e59864c5574d7176b34cd1a611402ec74e63e76fdc730fd3e5986cded06b737e41c4c266408e6f33966f3195cd72527500cd8769d710a0150726a36839c
cd3ef8fd5dd745144798cfe7e8ba0e5996815f7395b4a27e5ed31ba06887799e63737babb2631b935df59473365f2c30994e4c4f8414c250fa3e067a6f9ef5d4eac0ab2c4da2442791aeafae509654cde68e632a841ff3bd74c0902629e68b39aaaaa2803bcb5016053ccfc36ab9c27c4e3dd50c0053d548dde3b5dbedb0dd
51d6305099cbf9628ef97c76e6a80b414c91a712c2f44e61ca39d595dac37e8fcd6683fd6e8fb22c3108814918617db1c66ab552cc865af55ade9a6aa2e779582e97582c162679f34d1338e4f51aea9950f43d9d6c7df5fa35e6f339e22441100667b6403b31799e8333b2ad655942020815c3240c29bb9f88e4ecdf7eb66d
cd32ec763becf63b1cb3239aba41380bb1582e70717101cff3c899290a5c5f5fe37038a2aa4ab8ae8bc57289d97c6ea8698f5542887d13208a634ca653cce773aafced76a6bae5bae4d45222803e17f522518ffccdcd35866140122774566773a4aa82aa83514d9b043edeb64a210cf3463bb53737941c711d17abf58afc09
e5f88dedc8b66950a9ea352567a8775ff712def73df51d43fec614711cc3f35c745d47afa3982abaf2a32b07c48221fb4b49ad1db1a6a484ef13cb61369f1313c0f3cc3df23177bb7e8ffaabb6cde37e654a0adf2887fb2daedebdc36eb73334c98f65397c2bd0ba0845d597f03c17e96482f5fa02cbe5c2aca5ebba6493f5
99ed3a14450ec77150e405f2bcc0313b22d80426f93c9dcd0c45f373cfeca0ce6c9665d8eff7e40f1f8fa89b06b35988c57289cbcb4b789e87bea31efb9b9b1b64d9115956c15577e64cf5fd3ea417a2a10b24c330603a9d623a9b22cf735311eb7a621fa5698a308a88cadaf76447b6b437b75b62d5add2140b755f8f7534
ced6e323e8c563db3af68d753078d8ef717b7b8bab77140c5e5d5da9a28e3449189dac782a743165369fa16d29610430d45585c3819233e364ababe8f6ba7873381e29117d7343d57cd5333e9d4e91a8a4c3b86540fb634fc5dd35014e15e55c574b9556c1db5f7fc5f5d51576bb1d8ec723ddbf0071fb3d25f0309fcfb15a
2d893a3aca480d4240aaaa549625942150ce94ce08e4598622cf0d27553b3f6ddb7e94e3c01983ab1673180623d672381ca8f206ea9d9a4ca7582c1758afd7f03c0f6ddb210802d4558dcd6683b22cd0343aab5950c9db0f1ecd62ea450c820093940447f467d96eb7a34ae5164118220c42f47d8f2ccfb0ddee906719daa6
459cc448d30996ab25e6f385a2989cb2367a333ef572d0d909fd3cb403571405ca92aaa143dfc34d124c2629d6eb35e6f339a228547d39030efb3daaba861412950a249324c67c3127e7e501a365aa0e4982e94c19729525ceb30c370e87ef7b984ca6489393b35257e46ce860a4a91ba2f0a60996ab25269329c2300463cc
acb1be68e5130e2a03decbc28cd7a528a8272b49c879b8b8b8309791eee32a8b52f58934c6014827299ab65119eb6f0d49ff1bf52bb8aa372c4d532c160bac2f2e10459112f111b4301268bbf64435637469ed763b944d63aa868daabaf47d6f9cd941d3dd9ef0eeb441e18c812987a156fcf4bc28505515052829edc9e56a
85e96c6afadceaba36e230ba5a349d4e51370d0621e03de1fb073e05f06dd761be3fd0bfaf6b884128ca95ab7a2525a228c6e14899cbebab6be4590eee704c220a58a7b3a931560c30fd7c5dd7a157fbf229bd7363411fcd9c186777f7fb3d6e6e6f707d4d17725dd7664f7e4e85cbb01c5490dcd40dcab23095b73ccbb1db
ef30dd4e8d73a929455a10ebb03fa0a91b0040188498cea6582c1648271378ea4eae2beacdedbaee49773ba33777badb1d075dd7a32c4a1c8e47badbeb0a9c712431d9a1e57289f57a0dee38a8ab1a7ee0a3691a6cb75b547d8faaa67d5696a5ea75f39e959af53918f7f0fa23dbbabcc7b68ea9eb5996a1691a6c361b62a6
68db9ae77446ea065ddbddb1ad4f776a186346886a2cf472381c519515a4048230403a5177cb7a0d3f08d0751d82e311755d637bbb41559668bb165545776d1cc70882e0415ba69f89ae4aa469aa6c2bf53fd5954a6eee0fd86db688c210950a88cba230d5e3b22ccd7db25cadb0582e8ca3ae0395aeed3088c124723eb826
38b723daa9acaacaf4f636750d37217aec72b5c26a49cf91a9cf561485e9f9ab6b4a2ec6498cba5aa1effb33c18df19ae8f3174511a6930996cba5b1cd5559e25648f8818fc56281e96c06d7f5e0ba8e497e6f371bdcdedc10f3c775310b432392a183414ded944255ad9f78b733c6c019b59ce81619c6185506cb12c7c311
9b0d098e6811a8b6ede89c8fa8954419fdbae7ef536098ad8cc17529513e9d4d3157c964ede84342ed2f897ee891ab4281f64f8554e221c70c799ea351fda7c089e9a0edd1877d1c6adbd14960ed0f67face54ad53a1f25797eacc064170769f6c37b728958d2dcb02459e230a89b6f99020d4d816f9be8f749262b95c5165
4d08aa8aef0f08fc00f3f94231d27cb46d8bec78c46ebb459193f89216dd59ae9698cd6788c2c8eca5aeeba8175cf9c21fe30febbe45ddf632f403cab222211c559cc98eb406c4b0bae7b53f2208e5aae29b24099ad94c1518121270542d3937d737e64ceb0ab94e9e1c542b469e13532f51f72015e162934419c7084f7a7f
52828d587a632aae694dd992709d1686d4bed7b8fdc6e58c813bdc70d963d547a8fb1674b42aa400035d96411822cf73cc663352db1a7a5399a9aaca3492125fb5405116a387213fa861a1a3f0288e0129553f10f5aa756d4725f82030953f9dede8bb0e8eeb20cf73c4498caa22aa5aab82c2a4aaa8242bc347d7563b5569
9a607d714181862af71e1447fcf67663b2807ddfa12c4aecb65bc39d4f62524fbc585f60b198230a8932a0fb35caaa24c3350c8a16a62f803bcf79bc115559de711c747d47fd03798eba6e20057191e39814cf2810a5cc6dd77568da168bc3014d439ce7b66b55d6688246f5f53d76f01863464dede2f2125dd7995ec9ee86
9a6897cb25a6d32900a2dd645946067ebbc3e17000e70e96cb052e2e2ff1ead52b4ca75393bdd44de9ba2977ec7cdfbb26ea00789e77a648390cd4eb5996159ab6a18c6910603e9fe3f2d52bb32663ceff2004f6bb1d8aa234d9afb6695f5056539a67c19571f07d5f513e891a18c7f1a842482bd6751d558154a0763c1ec0
df71d3ecad1b891b158ce8ec5edb9240c1e3eb0f32540e8943b8a3ea40a9292a4d836118e0f91e66f3192e5e5d1a4532fd79b4718104f68ad2ac83c387f6e45db8daa1ea7b2c564b5c1c2e0c6d35572a89bd12b649d309f6fb3ddebd7d8b9bdb1b30303274ab152926ce66860a360c039ab635016ead2926b84791579f17fa
43d3f313c731d1729561d041d97eb7339773511674672815c95ef51570877f92708ba6b52ce60ba39cbcddeeccddbcdfed5525c283ef07404c2a7bdab93b1e8f86523c9bcd4c152e491230ce49f8a3ed5056a54a44dd7fb78fd7c40800390ec23032a21c4591e37838d0ddde755405d3cefe8232d9aeeba28d89ae57e439a2
28a24ae230a06e1a23921486217cf93cad0a9f0b0672e63877e0b92442a2135393c904e1996d9560a0c030080214798eebd935f23ca3649eaa0a8c6d2b1a494162596250465daff97d3b463f0b873b08a310711c8381a1c80b1c0f645bdbae85ef7bf0bc188bc54255f34ff7a5ebba28f21c699a9ac46cd334288b02d5a877
e9310a98b1ad498af5fa025252d2253b52824a334a38e708c200520275a312bcaa921faaa0e7f2f202cbe5ca3000ba96fad5cba244dbb6e887f3ead44376642ca8e7a8a4a84e2cd64ab8484a728a27d32996cb2596ab15e238325a0aa57a0edbdd0e459e23cf339374d355b2fbd4bc8d6e817aed8b8b0bf4ca11bcb9bec1be
2246cefae202b3f91c0e2787efd4b241b4f7beef902631e6f3052976cfe7a764abf6c7dad60801e98ae163f718e78e796f49423ddaa65aac1424371b6226edf77b12a9f33d4c9c89f9778cdfbd0d5e30d8b9d04fa0340e74fb90f657009c2aaeeacc565585adaad2564a19595335b53054d7f5c80b4aecf45d0fa97a4fcf6c
07cecfb0668b446184288e004915f383ba33dbb685eff9f094aaec62b1c062be401885188601bee7a3c8732449428c0341fda9799e53ffb5f21b1ec358a9fce2e28244db5aea213c6a35f7db5b389c833b0e315254ff60dbb6f05c179334c56ab554eae673f8817fc696a9aa8af6a5f2cbeeae09ced6e6d4cba745f5740b14
259773dcdcdce2dddb77381e0f68bbd63ccfa009000993a4fde82dc2183c65d7fbbec77cbec072b942ad04dbb22c07e7d7f07c1fd3e98c6218e08ce19817b9b1758b059dd7d56a8528a2bf5bd735f29c0a3d8fed13b3265abc4ce92944716c344b38e72679747b7b8babab2b1c0e07346d0bce1d53c5eefb9e0242e82c907a
98bafa302e79eaa8dd5461d4870902faa66861142cfb6130aa717dd763bfdfe3a0fa62f407fbd082ebea872eb3eb3e286ac21488a21053159d4f261393d11f8601424aa4698a384e900519182307b82a2ba314a6fbac1e7b0f8ee3208a632c68c55116e430154581a66db1dfed0cc5517fdebaae0109c4718cd97c86e57281
c57261324b5ab44197db6b75083415f031e820391e65fdcab244919308839480e77b8822aa4c4ea753232ddfb62df501cd6628cb929c6555412bcbc2a809ea67fcd0a5a0fb1dd6ebb5a15a66594ea2317b6a809f4ea7260396e7190e8783e29c77482701e6ea00acd76bd39fa2338e5996a12a4bd435296109211e183b4057
03e70e823030bd999a37affb47877e00631c411062329962a11c1cbd265dd7613e5fa0514a8f5996a12c5b546565beff8bc1c942986c8ee3baa476a57eea4ccf9832d0f7bde977f5fd60d483224caf935e8b5aa9e969e530fafcecde98444a9cf534f9fe29302775d1469d7909dfa37d63e87deaac4a21d0cce7e8348572bf
3795dab669df73a41e3bab2c08100b81b9a24b6ba767b7a3333ba8d7994ca95ab6d95232439f95cbcb4b5c5c5c50154c291653e582044f681f171886de7cdfc7de933e2fb3d90c8eea279042a26b3bd30ba7153f39e388131247a97cbaa73ea7d95eabcbc90965b28fc72366b75354aa77541b07dfa7de1621048e8723b65b
a2165755651284fa994da653a5ac3ca0ae29a9753c5023fa53ee765d49d677fb6498008ca12c4fd52fce38d284eea9f9fc74b77b9e872ee820a430bd3c9e121cd1d43eadb0fca2a0120326fbea6975cdc76d6b100408c2c0f4056bdbaa2b3dfabc9edbd6c733ebfa8f5c9724d24d805716c6b6765d6feef8d96c46e24a8ade
2a94e08d165ccaf21c7c542dd20edd5392688e4341e91c73003041a0de4bd45b43ef4f421a06c1300c088200d3c9148be512cb25b10db4c275dbb528f242554e4ab46d8761e81f7c4fc68e68472a8a485c8d3108e5d0b7ea1ee40e4710f8489526c0643231d9ffaeef315f2cd0348d6957a855e2b71e29b13e56fdd7a26cab
f5da04a3db2ddd5d7996e1a004d2a85f2b30a39c0efb038a22a77599cef0eaf52b5c5e52bb88ef79a408abe862c4262acf926d0fbd9f5305c633ec93b162a5f677b42a2c701a9922a5546274a45140a9a2970fa6fe63d49a1dc7243abd919d05607c132925c261a002860a4e483d52abc00ea6e2330c837966ba3f5c888757
47ef17d7f5943fdc1b7f583f4f5d7da6333bc76432459226aa5588fc97349d9c8d851807617ddf3ff9ccc6510cb1149052202f0adcdcde9aa4c76ebb357eb5de177af4459a52fbc26241450a3d4249fb1c996ac7d215ab0fb3e6ceb53e9234316b350c035aad235296e87b0a8a9d098935f51db1e53eb5df5c9f0bae46dccd
e633acd62bc35cd114f8288eb15eaf10c591f2432879921d33745d0fc77590a4a47db05223c034c3a256ed2eb44f1a2336f6d03ed16be53854c49a8e12e9aeebd2fe5389edaaaa30f4833aab89528a6dd47deb106574dcc7d077bd1167211a06bd11fd90866130c144ad842a8490a6f7ca751c95f5eb54c32535be9e1c4c65
004f47f0741aa58ac07de23f6ba7ea24915a9302a1da0c9aa632a6650541a032068129858f25adfbbe7f128d84730edff3c0e218c33060b1245180a6a94d3f4b5114106ad69ece1c68cef8fae282fa45e298d40a958369b8bc4ac8a26d1bf45d6fe88977eb313a2fe03a2e923441d7f7e498990c14551a19033cd7339f5d67
080018a79d9af563b8c70c429040505dd726201442c051aa83f71d145d79d0fd5aa46eba47d35010b1534df1811f601003aaaac6f1703837e48ba5a924864100dca1a0e479668c96a63fdebb2612e00e379742a8a8919ab2d875ad5126f45463ffbd6b1247a65aa2fbee9ab641d73dbd7febcb63f4f99570cc300c188cf474
679cb16118f45122da93321e7996a16e6a3337c9f37c38ae03c680be3fa7a5157981aaae1e5f7f4065987ca3a21b06a4164bc98293d3e17a44398e55e64a07077e1018d5b1c0f70106f4bd1e2dd39acb5b57291fbbbcf55d91a62956eb95917fd79f69bfdb53b2468908d5553da2dd2eb15aadcc2c22edf474a37e8ded768b
e381aa58600067fcde35198f7f8822a2c544ea9ed29f5bf7d0cee7730030947a4df13181fd27ce023955e202f43d5115d7ebb59a599a2b0ad116ae438e4e35ad7038ecb1b9dda89e082863b5c4faf2023325b0a37b97dab635824cbaf780688be777fb784db8ca74072a19a083c3baa95157743707be4f7b250a114611fcc0
37811353630f7cdf2703efe84ace49e2fd2989b5af0a796e5bbbae47d73fc5b616c6b64a29cec41f242451354ba2b76f369b916dc5fdb615a73bd353a35928c009cee4c719802822664e14c7466ddc733d48870282302075d020f08dbf50d73555d29ee85c727692e91f86c1505389ce46ed1d6559de19dbc110a8eaf1fa62
4d14e634451446705c877c96f644c7d6ad2b7d3faa86dd5d13e564390e51accfec88628fb4ea5e758d426a60aa123a311ba87b4c27a685106654851ebfa09ff16309d7300c319d4e8d82a37eb6c33060bf3fc0f7dfa2c80b15a00fd8ef77a89b5ab177626a9fb9b8c042b130b8e3985158797e52faaeca0afdd0131d913d70
b7abb150814faac49ee751101c0646c93d0c034ca6130a8ac2805839caa9d76310c6631a7e13d0ed1992da26fa6138a3f06968dba619188539b7b571b8e9ecb8603829e51f559f595d93632ee4b882cdcc13a0e7a204d64667d6f77d2366a2db0cc2203ca9e22bdaa6b1b1be4f4aa94100cff321d46894baaed1b4edc79d59
df4382047ddf63b95c60b55aa251fea3ee79a6bbae0770a2caebf33d9b4d0deb705077a2b6afbbdd8ed44b356bee017f58fda6493e08294cf2c1f77d5a2f25343755b469c77521c400d7714d02d17148b9573df28f82b6f181efabcae7da04fc7ad4966ebfe08e83beebb0ddeed4672ce0792ea2708ee572457a051335a181
3b46182f53426b755599f538df272708294cd5b355953fad243fde07499260a66212066602768a8d6a1253d252bb3a682a8a02599e018c1c15ca620283a285b64d83839218deeff728cb0a7e4041409a26a40ce870935dd7d9adaaaa5429f8013ef92820d4ce53188510525236bd6ed0b68d52f072cdc61fcbb38ecbfd9af3
3ef4030631a0691b344d4b54c4a7aaf6390e7c46c33d178b055ebd7e8561186858b3ea27d492fe51149966f3d76fdee0d5eb5798aaa8df71b8b96874b532cb8ec88e999993f7a1e04797c375f6524889baac5057b5fa7d0ed77314e547cd0b1c7f16aec66904013ccf3dab56745d8fbe1f20064187e411a34599c8a9914527
5a4083410cd8ed76663d48848894e97400bf5eafb15a110d2c56bd86bae7a3ae2a23d94d34d8fac12ce62923e2a04d5aa30ae72a910c1df8eb198aaeabe6a78dd684f68a63d444c7d968eab9ec8d6cfc4be849622a41a4b38e122daa8aa8059a6e275572428282463d7c548b221c0f47484902504992909a95e39a40d88827
1d3343c9bb6ffdb5d1d255ebaeed2878eb07f87d601c450ac84f2ab677e75d9a0aa31ec7c2183dcb5ef7d9b66a96153742248f9e57750e17cb258490a697474b2a5755a5669fb9aae7957a84d74a2862323909c908f519740fb2a67cb46d7b6f4038de57603095d2200830570ebb5e074d718b42ba33b4112135569cf6fe27
6ebbb1984d1886462c4c0a896b7e85cd668bc37e6f1ce5e374823ccb8dd2980e92dffcf006971717984c2786da7d9aed4415fdfd6e67a8b40fddeda74cb783200ca9221386d49ba666a8f58adeec28c7fb2ea547dfed8e739ad9c6188718045ae5acbdb48050e224c05157645b8390284b6ddbc1759d076ceb8db2ad257c3f
4010f8a79139dc51ed1995a1e47fd0b6e2746792b3c81045348fb5513d6f5ae0402b81064a25f13ddbeab908020a8ca82aabe79b9d2afa1fdea0cac15454daf97c8ed7af5f430881abab2bdcdede1a3a1c6350a2460b2c572bbc7efd1aaf5fbfc67c31471885703dd7ac75d77746cbe0783caaaaa51a2ece1e0a0869665fd2
262a2817705d87fc8eba3136d7550ee778e48a5e1747253ac68210662e99eadf7f68eee7787f7b1e296f0f7d8fd56a85fd7e6fe6da65d9115dd7220c3708024aaa95255168e398740056ab1556ab15a64a615ccf77d58176aef64b5114e8faeee18050255b7582598f33d00191e77988139a611ba9c1e77a4cc66e4722279a
89741a41f5ad4fe3d321a530c97b5d8d1b279275f246df85d9f1a846066d546b0ca9cb13532d86a3fbae959af6e1b037d5ab0767cdb213353250e38fcc99bd33afd7711d043eb17428c97b4e49e60ed1d635dd57bfefee639268caa6053ef5cf2d964bbc7efd06c330e0f6e61607755ff5c300c7e12af9bbc66231c7eb37af
7179798954a96fea2401bd0fa29c1f8f4714794e3e7adf9b16b57bdf8ad23c19945a7d1804e8d44c655f25302e2e2e102acab9ab449a1c87dac906e5537cee1c5dc771102709d6eb9561abe84aa716f3d1b38e49308d1468d324c56c3ec3ebd7afb098cf4f8258cabf6bda86a6021c0e441bed7bead37fe039e980d05749f5
388e902431c2d16ce57432c1a53aafbaeda5aa2a00f25c305337b3376d8ba220151aee70e3cc70ce55f6faa4c6986519f5be14258414f03d7a08d3e90c6992c2f7e8f008214d26403b1374e0deff60442d90266b380cc2fcdbbe1fd0f59d52a8f4cf86b99ed1c97476de710c2d47abbdd130fb93d3f02147dfd0ee54d5319d
4cb05259cc3ccff1ee8ad4b49aa681a78cc06ab5c2644ae2254ba5d4eaba2e38e326e37152a013464c400c0283181e3c00ba6230a89937c631eb3ab46ac8a8a6dabaee69e8e718baf7cc1b659af5da6aa965ca42388f9e13dd17258430ca9d5aed34cf72147961b2a18eca42c7f1a94aa12903da6069ba9910f2b41ee2a4aa
f998210763efad891e4aae291d34f3eefd1965b4a6ccec2347cde11b7fef61202125f648d5f4ab809285670ea69630deed76545109435339d49fa151a350b40a5dd3d46aae52608272cff721c400809daa196230676f7c16eeec4aea7b1aede37e18c0ba8e2a974aa4662c867497b34fcfc75503cf4f4399853865669f3af4
9af63837d2d76218703c1e90a6293cdfa30c66514002d40ba168558b05d188c7b3dee88e18cf3422b11ebd2f186390ec719a8fd94b4a8c0ba0fe2dc777e0ba8e6ab29f18fa4e9665d8b93b1465619c8ecfde36cac9a4aae95af56c3438a89eb161b7030053e5cbf39c32ce5164142675b5c175dd53865c9e9f5531d07e7948
ba5bf7be0e034c8f8839b3e3b3aefbb9dc8786f332234664faef94fd1a9e4435fa7a389bfda4c726edf700c3136d6ba11c1c0f697252a1f37c0f0c4af9d69c554ae6e9ef7beffb51dd37839a7778665b5bba4f5ce7d433a6e710df7d8ee3e48ebe67dbf6d30272c6299b9f4e94c04c4773fcaedebda3110a6509c6192693a9
a2c34d70717989d57a4de7fa8e389cb1ade3b551e7f6fed6835305fb748f0de80760e80753753ed956d72416c7cac1e381db9aa5a2e9bdc3e80e7b6a5b88ae9a6aeabbeeadceb2ccdc713a71e53a0ea27482e5927a6e753fb96ec518afc960d6e4b45fee5d1715bd0decfcac4ae5a43beafe1a07c5348660734aa6a9ca1323
c385df4244a8ef7c3108b4b245599098a1eb3880a2f28d1520751125cf32d37bddb6ad997bad69d75aa04c8ee6168a419cfae51eb833f5fe32cf40db2353b91c4e547c8f069bf37b9e27557b1d23d26806dbf7fd9387b38f992fba92bdbe58ab80aec4f535cdb3ebface086639ae83e97466c4fcc67bc6f43c0beaa1d67358
85bacfa4b83f48d6452347696f98cad9a848a02b60499a98cf5ed735aab2a4b11959469fc724443e6d6f32ce89e5369b414a89bcc8b1556d655dd761b7dd2941aa067991430c82dadca613bc7af50a171717663c9cebb867f191de2bfaac3e767f8c6dcdddbfab7d00aea8cf9ad22da5449e65c8b3ec4c78d0d50a7a6551d0
48019f68245114c275e9c21d97ccdb96e8395549b3dda6d32956cb15d6ab1596cb058d3a88237a206aa6976e6c1ed35ac60fd8fc5a7f00d7c344cdee731c077c34af490aaa629183c9cd83d52f6132c97ca41a262539a94fbc98ef425fd45a1e360c4395e525410e0401a4aa0044514cd2e08a3e321efcc9d5069a4ca7e8fb
1e611411a564e84f07e0ee9aa8a4afeb3a469440d368abb232c124003384fe3ef9f5b163ce38552c07a53836563b95908f6666f49aeacac3fae2026ddb92cad87e8fa228d1f71d18e388a29024b0158d6fb15c225173ef1c8706fa6a29f2344dd0f71d5c554169dbf61424dfd3594c012719a6243d5175348d42efb5930a26
7f2f7376aa3a3886a24787f17ce8ec53aa535f1e6458b5229f967b0ec2005dd7121d449c9c90d3388d1a5545d95a0a0ea867eed5e5256633dd1726904e48994f2bca368a57ae2b5e7addc7fb933b1c814fbd379eaa3c0c0329f40d4a2889313e7a06e70f92330647f743ea3596f22cc8f898f37a3e4837461c278afa168201
86d6a6990571acb2b8516c2a22e373e4f99e32ec53f47d073ff0d1759d517ebbbb27f57ba0111e44d95ccce744d356ce2465475d6388baae0353ce9be7fb7792399f9f80d0eb319d4e49182bcf0dbb81a8a31b335b5467b667b319e6331a9993a8a40103e0702d3e16613299aa049d8bb6694d96f2bebbfd2428c355b3fdd4
08d438230741275dc652e82631a78c371feda75322a837aa922f2620044cf246f790b8ae8ba220511cd7f30029cd7c3f7d5eb56d65cab62e572b33ea60369d228e228031c409517a8127da56dd43e8b9984e6798a4a9ea6de5276681a4e1f3da4edc4da28defcb9388975a7f25e042f6ea611b72175cedcf244d319d4c695e
9b6a23689a8612a1516faaff93c9c4cc30bb5b412625c409966d6b2a985ddf410869fac3ce9e9152bf24bd80d34cd6be1f8c0087eea33edd5344353b1bc7a092d0cea87278e6f03f413d71acc21a281f617d716192629acadf0f3d3cd733ef773e9b63b55e9964f478ec13513b5d4471acc4de688daa09d11575bfdc7b1b17
27c130dff71127b1f13bb8c34dd2409f43c7714c4f61a066a83d36daebe5429aaa6adff434639b33d435a97293480f271145e30f13659dda87c4194572b55e61369f218e6238aea32ab90b6a6b99d466c4c54377a67986be67f432c88ed0f3d5c190f1edee61d23046b6cae1a7f33c4e7a7fca3825ed234c2713e4d329c228
8414127553a3ef7a732e3da5769da84aa961088dd57555e02c55a5bbebba7335d07bee31aad8bb4854bfb99969a8e63e72cec162667c126d477c9fc6a3b1bb42799f68323473206440daa74645baaa2a6479461a1ac78312cb11a69d4d0bb5cd663343a11db31ba328c26c3ea7f14b8a32fade3e19bf7da5f2ed791e8db99b
91988df673b4de849e376f2adcca171adff56701e166b381941287c3c11cf87ee855836867d4cc74968a38a9335c5e5ee2d56b52caa1cc9d6f368ee77b982f1667b2f68f2c31183b49bbea065d5f6d2479e761400783ecbd57195ddacc38f8c661f8847962635a881f28554b9c1b49cd63f67d1f9e7b4e8fd359c43849b056
c233dd3d4a680f41af7910868094d8edf7c8b29cfa76542f8a71a0eea17d8e69644cf5f768853ba102c1a71e8cbbaa534250b3ee614f52d98d5296f23ccf5c66ebf59a683eaa870ca0cc95ae38024018462ae1a0c400847cd827562a97be4ffc7806524a1452a2284a25c6707224efa7a29f9c4c36a2009aca90fac9bf316d
5415084d6652cbedb76d0b2125b2634672c503f5d168c192a1efcd1a516043cec37abdc68552ad8be3181292b2be618866bea0bed6fe03eb0f0af63c8ffa11c180b66990e539eaba32fd39a784cd3d5464b327357d83a9a002266b6832894f7c06e3f3e8fb9e99df762e0600789e8f2822612cd773cf28a066744318993d9a
2489a172de9ba418ef2a7632165aa54e1b2c63e819d7192cb84d630cf9d387f33c1d346b34423f2509f5c57289a22cb1b9a5607050c6588f0559afd798cea6c6883b4aa5563bab3428db411c4758d56b23dcf1f01d76bad7750010f83e5a4513e5a364c0d93d75cf1d4674c3d399be9b417f09d036460b8ed4758dcded065d
d7a92499b6ad83115fd04e90bee7e324c67c36c3e5e52b25c2a56cab7fb2adbee761be988f6c2beda087c14c2f9e96a5f7b50a314efd878ca904da3d9b9ceeccd19feb0aba72588c1d79e275c91839abbeef19211dd775c13807e3cc246734bb856cebfb0c1812bd88b05c2d1146e188c2fa810ac8c88e04aaa7bdc80b1384
8d33ed0fed4b8ced2e4e95269d5c3cfbfe94257b744d1cc74112c758af56a40a59d7d86eb724365395661e609aa498cea6b8bc7c85d57a85244ece82649d309c4a1298994c2646c8ea2c01fdc073d1d5150a0a29b9a61dc7717f924ece9cf5657d829ff5ada1cf809e8f4a33755b1c0f474431d1fac44094be56f5df894198
2a8c1ead70797989d7af5f9b59d0a1aa8ce9604e27e784906aa4c0e36c13ae12df5a0d72bfdf53224d33dd467ff7ded7c129f9ad3fa829027c824e82b68f819a04a09333fabe20755a2d9ee59f3180f43931caba9309cd319c4c4cffa0ee477fe41dc071b8124553623ecac6f35101c6711c6323687d9e77bfe8c0d2753d04
aa6aaaabfa8318707d75653401a22856a3f24ef398d3518b8afea97b7501603a9a95a8136d0f6d5c0979129e8c13447164fa9c75724627b5ce985f776205d7502a1567da0c69f668a062dbb4282b2a7b6aca50a0463ee8cc94a648ce9464bb96b9679cb21341109c66df3c7649e8c85d6db8b3cb671cd533b50a66351e3850
7705d03ff182ba5bb160800900756f809985a7ffee88ea36cef6f89e0f194ba3fea30dd6070365d5386ba475cb922a0e3ab81bfddd8f831cfdeae9eba3ab73cbe5d2a8147a9e6b5466751659cf8bd4cdb377e731e98b52d30cfa2e7832c5c65079747f9310709df339646717c17dd48cd17ae9c0cbfcd51763d04e0188a67b
b46d0b8024a875965a67d5b53043dff708c200f3d95c0d3626a7fff5eb374694c10ffcb32c631074e8fbf8c38e144e63045cd5b45d708eaaae55156cf4be1f59ff917c2afd15fddf918cfe533398faef9da813d204228eeb12b55b08380e516b0c454851a9c641a7a6e1485050ac699e4febb760e602d64214c6815281e0b8
22c0f9c9893adf77cfb3ff74153e560a898be512799ed37ca6b64155d5c6a159ada81a958e2af9a78fc5e13a2ee0d3f3721c1761d49dceea072a20a652a8ee4bdd877ad7303d4ae557eb6b9cef675da9cfc468af6b4d3813143635dcd2c130f446c5b66d1a94150971745d0f8046e4d058031a6db0be581bc1a333dbaab3de
4fb5ad6addf49de938ce495c813f50cf7b2858b8fb679fe1fceb5605eda0ea5e254f39938eb20f8cb3b3deadbb222d3a01a3e94f7d74a2c37dac1de9fb1eae7bf239f4763cf91f1f332bf4e37d0f0ae442ccd4faecf77b9348a5caa330a36926932956eb158d5352822fe3cfa5f516f4ace9e889d45e735ef5080645231e8f
8fb9bbfeccdce1a7bbfbb7069d281f8be26816028dfbeacd981b1dc0789e47235a66333517788de59a0443b448997e2d4849eaaf4fd89bfa5ed4cf4ecf8b75ef545f9fb4ce67ba74f2ecdf7e6c85f09c462c0d8dd8554957e30f8341487176664d455d052741100080f1a59f524dd76ba2db4d749248db121dfc0a7e12eb02
46f6f591b5f968e8e7e37948d4b8242db2a3e7bc3a8e6314b3b5fa7f3a992052fdf4e3e7add7444aa934503e946c3ddf2fa4891118daff7d4c0f809866fad98f5fdbd5176e18a861b46ad06be007600c6af8786ee6fb68695800a64aa89b678320300db4ba3726cf329455a566f9dcb91ccfcac127c7903bdc64f63565423b
66f73ebc7b1aa34f1f540238d18fd83d7fff43d00dc1c7c3d108e93080aa7520b95709aa90e4398d60f03c9ac16364fe716a18cdf28c6625290a9b7146dfdb9c4c7d06b52601c9c40338cd0ed41973e389e835bee78318e5da530fde38d8f8982ad8b85fabeb3a9aad1546f055dfa69e23992409923441a214261da5ba059c
9c71da2b855129a3de8d5ea9f0bdffb8f4471ccf66649c1b1965fd6f88022aeed963f7ec1345593bfbab0f5416bf3e4ee74567d6e238421c27c659e4ce69bcca4129bbcaaa329514c628a3a6fb917430a89f1f059125eae65c19effd651bed4976125b609c51c55baf3fbfe319e39e2d39caa49fdfd4ececbc7eccbe1c543f
745916280a9a29595595d99363c37ad8efcd7ca9548d37d08e8e1103510de2459e1bc52fdc976dbcb3c7f48cd224494ce587730ef0f3cfa32ba45faa02ad5f570b6dc58a3e369bcdb04d486994a93f4f52a2bd4ca7534461f49e088610c359d2a128490df38cf2fec0ddae3fa74e12056148c38855efe079dee07e275a27be
4cf5c514b03f558ff59931daeb0c30ad0d61106032a1cc7014470854528c6c2b8d7c28cbd34c4740dbd614e96472665bc5996dcd9538c503b655bf279da0615acd323273ca4ee3864e1558b3d6f27e2372d78938b1753e61c99422e7f198916d2d4a4849bd93645fe8eed23dd3fbfd9e1215fc0e4553d991d31c53a2af6901
b6fb29a3f4d5d81135b7af3676e4bc9a2747ff701c0cdde758998760a2c98fb0adbaef8731b45d47d2fa714295cf96e6e306814fb4d109cdc81b8f1538adad44dff5661e5ead0399b33984efefe13175db755dd5d2919a3ea4b3e7aedf33e72377e2459cc64f82997167e6fca68893f8ac8fba2c4ad3d339165f33f31a13f5
bc347d574a350aa132ff46cf9a3cb37df7f8c33a81162b55fd41252cc6552f3dfee2a19081cef2a86756ff78a8e2fd0874805557e467ec763b945509c6c867ef949d33223a598eec783ca3180330a2837a26e278fc991ec6fed09a0027aab9ae9c46516406b39bbfa3926727a1ab2fb72f0dd53b4d512a2d154f7d66cfa37d
319dcd309d10f3663cf354afab4e44d46a88bdee45bc779f9c3d13fa0f8df3218aae1eed715619566b72779cdbf8e55c5729494da653bc7af51a7ff8c38fca70c5e08c06cf1e8e47ec777b6c36b7d86cb6e8bb0eaee78e6690f97035ad530985e8d94237d7d724be52d71f5442d30fddf77ccc141fd7f33cb45d4797baa231
980514f2bd0c87e901933a8301389c142539a7feb98f39045208f45d872ccb71737d8d776fdf91343b634895688cce6a945585cd666332b98eeb28897407520a65d4725c5f5d63b3b94591174a11535dd0f718551dbf69876d369b9e14deba0e5a2d13e84ef44ff97ec99d2890e7591dcad4b0b39e888f81a6c0112d4e057e
8ad694c409a69309cdc08968f486fefb27b10e61e8cab79b0d76bb9d51286b1e1b023e6a208e14254fcfa2d255ecb37d724f065b3b94420af3f38c1ef440efe1b780a173311ac9a2150757ab25fef8c73fe1e2f2e26c60f0cdcd2de238c67ebf8310a7f9513af31e28397f3d4640cfbcda6eb6ea22ca4f09877bd79fbe9e0d
420d02a5f8c7cc9e1c3febfb9c4b0979561d308e2957ebaf9ec37defe13e08418a938512f0d86eb7342e42d1229334357bb0280a5c5d5dd120e5496a862eeb39647ddfa32a4b1c8e476c371bdcdcdce0b0dfabb113ecdee67df546e96c39a422ba5aaff05abc3963117cca40dce780094ed44cd2e974823849d00f3d9238c6
743ac1744673ac3cdf3b772e55bf1bc98493e2eaeded2d0db91d8d9db85f41fa5455f0fd00f3d90c8be5d2a80c0b29cfee64b367ee3903638aa8a69892a3e13cfc4cbe32c6596a3d2ae3d5eb5778fdfa8d915ee79c84db0e079adfbab9bdc5664bb6d55374d020f0e12be5cfb16da5f68ead1272d819c9703c625bf56feb6a
c66ab582e7f968dbcef40e52150e6776e2fc45348d5e9c55e8b8ea05fd94c446af466ddcdcdce0dddb77d8eff71042228a2200cc50119ba6c566b3451084a6a2a7d5a101986cfcedcd0d6e6e6f916799aabc3e625bef0851a413eac1d3aacb94f4e2e67d8c853dce5e6374c78d6d88b6ab673ec753d64753d1947f15c73192
34c174323549b4344d4da068e6f02a3573fdc00741e7f5b03f60b7dfe1b01f2980aaf144efab8ce24cdc490783eb8b0b93ccb9effe7a29bdbb9f03dd1baed576350b4e27c934cd5acfbabcb9b9c1f5f535eaba86a7e6f07abe07d7f3949a35b515750305e5dbed16d757d7d8ed68d6ab4e7a9f46c5dcdd06b4777cdf3f9d59
df37f72d57493609987d29eff573e41d1b7bdea7fd54e85ee3a669703c1e71fdee0a6f7f7d4bcaaa8c613299a06d1a48c0cc0edd6eb788e3c82413b4df310c027553e37038e0fafa1abbed164559a8aaab1ec3f6107381193d84f97c8ec56281d97c0647a9c67f0b7f4d57e7c228429a26e66c2609250666ea7d4ea6130461
68c626dd7d466ddbe2703ce2edafbfe2f6f656cd0deccdf3bdef93097507799e87999ac3bc5cad309b4e4d25f6a96be26a8e789a927cea0f3ffc88f505a978b98e8346953f29d021c9ec3ccfe18d046774156f10024c192d2db1bbdd6c707d7dad0ec0c32aa33a154083c403f4c360322e62242473a28e88f7d488c60b3bf4
a3eca7a28c9df1989fb2f955305896250e873d6e6e6f70737ba3e4c07d788b851102d06bb1dfef8d22591453e682bba452350c03eaa6a6f5bcdde0703c9c0da7bfdf68d157dd30daf7dd995290763401a5e037128939bdc82923a379ef004c83381f95959fba71ee36c1876af8b96e924d54801847272ef37d819d9edd92e7
3976bb1df62a281cef97070342d7459a24a8e773d3a7a5c52bb8c34905539c7ad1debf2c4ff3fc4e19d3938333be345f82c133bd6d7104d771707171813ffef10ff8e1c71f118421baae439665345cdd2749f7b22ccd263aa9a792421797ec94595773e528802285bfa1bf7f08bb5e0a4d1ba6e1b0a90a544338dc31b496b3
1eaf3bfd0a66f669df934aa5cac89bf5d78df24fdc93839acd49f3d9b6d86d77c8331a0da3fb15c2303477d37ebf37b4e7e9744a33a3463cfbb6eb28283c1c707b7383dbdb5b73d61f523d1d53aae224057738a6b3d95946f86e3fe4d7da5b448355462b393dafb66910aa0cb43660f749e40f8204502a95c1dc6c36665485
0ed01e52cc63aa1f290a23886120fa5a14510f8ecaca9bfda2eeb1f3333b726cd49f0330cf4b8b657debe4cdf833eb5eeb244db15eaff1e38f3f60a9faec8d6d55f3aa42459dcaf39c546631b2adba55416590e9beccb0dd6c71757d45e262e231db7a3ab3e4d40e46ec4bb735b8aea3824e71a6ee7b37f8d10a927a86daa9
37ea7c14c36318abe2555585e3e188db5b1a8d5314055cd7a12ab5ea990228317b3c1c88a2eeb98a027faaeaeb7b2ccb326c371becf77b54aacf9aecc8fb557dfdd9b4fa5ed33474772aea1bd9c75345c308c5dc39c3e37b4cf7287365571fa26c3d153a49154511e224366ca2582959ea79cbf706694225102a52cbd409b2
5c49ccdf67ef4d40a892875118a2ae491577a5da431e7cae77befee6a0aad18e4b9f7db158985ec0c5726986bd17ca5709c310121287fd01814fe797ce6c7752fb66cc28d6964581dd6e8bebeb6b1a2a3faefebcf75ec8172471b25051537d24494c7679d4c739a652df97c431738b87539fb2a6ed7f8c3f3ca85615fa1c3b
5cdf5ce3f6e6065555515f724815eca6690090e8e261bf3774e358f5d119255a55bd3e1c0eb8b9bd419665aad041ad540ff64432a694d26b0050426721faa47fefbe3a5f8f2fb73319542fb4e71b0646a4664346718c493aa1b9a911f5e5bf274a87d33d529534bffdfafa1a799e2b3d87875ba8f499f47ddff83a5114210a
43337ae2bee779dfaab863c31586219234c1643ac5545d8cbd1a84eeba2e06a570a8ff4da932005ad5cf28f58de806ba87e694a1387198cf582d2620644674c05399164fbdce38bba007576b4378b67115b5491b033d647edc60f99403a037ff7ebfc76ebbc56e470e26e7dc0cb1ee55f95c376b575589dbdb5bf8be8fe98c
a868bacfead47be89a01ee524870ee18e9ff87e891aee79a41cd9e5a637d1138ae6366e8754a4df56cf3309de157b3ddb494b6733ea6e25367b3681523d739c9c1bbae0bcff5d4c573ae7a3a0eb074d3b41649200a2865691fcc62aaea813b9a47399e73677a1c80b37ecebb3427bd7e7a561420474aada42837ee91f82618
312f8153cfa5effb541d9d4c3053b36cb48226400e94ebba4a38e4602a3b87c301d3d99454cfa29808d5fc64043505570c02bddb3fb0feeabda86480af2a1924a814404871560d26a9f3de04f8e317a22445a78272a98ca0ba3b4646eb316899e6ae6d4902fce606d75757381c0e9052920c789260bd5a218a22aa180e83a2
95d21d9624091c879246491c9f12037a6f2a4129a6d46839bfc791c2a9819f12253e3ccfa7e0f823132e5f642be97b5939d5faec6b4972d7f54c82e93e474167acc76ba2fb1d841ed531badbc76b42f328c7e7d585eb3ae67b1b4568710a48ee1312a2f1261428e9f749afe59aaaf44bc1d8b646616454aa2763db1a047055
ff4c55d7c6769645696c6bacc6f47823f5482dd8162a85eb876cab863eb364777c5305313d386a9cd3300ce8daf68c56787a0d694638b55d0b3108b8beb6cdfe47d9d64e51e84ca0a2d809524a4adc4411a49068bbd60865d54d83cd668320f0315763283c256e71b62e9e87c0a7de4ac6f823b6955822ba12a67d0c4f0db8
d63d7866ccc03d81b2bee3c8b6768af2cbcc19739c8f73bcef627c07e93b5148094f8d19d049eed3a6c3d9aff51c583d862bf003746107c7714f34e1f7f68954337a5dd38f64847e5ed0f97a6e68daba9e911984215140555b4192246080a1e7f6fd80aaae00d09892b22cb1d96c4cb2258e22f841403656d9042d8ca4ef2f
127691a673677c676a8a771004f03ddfdc737a1fb86acc8418466324ee06ec4ccff63dfdb9569f755defccc7790cda1fce5430bcdd6eb1dfd13814c77130570275ba32d828e5633d8fcff77d4ca65324496cce8cb69374070508fc160c40ef380fb70ba9b5b97b8f71e71bef4dc56cd2c949d7d167df1dddb3aa72fcc09a8f
4584343ba0ef7b33d379bc4fc6104a6554b3518c3dfd84f3ea9e78c427a54c6f44071dabe3754a125b08a132ec07348ad31ec5b18986b90aead234c572b984c3391a254d7e269a707e02cca2789ea7284d53f8be875a45bb7a76d3a0944f9bb631a324f4a61d673268b02d33a20abe92757fca22699eb41eec7dabe4d9bbae
5592d06bacd66ba36e991d339581dba0aeb644cd5990d1725c17714c1c679ae13243d7f7a627a01f39c30ff539b84ab6783a99220829c0d6fcf4a2282085c430f42a50ee4c6675fc79481afa346c576fd29343c595d8c6c765524cff8fa1c89c54004d2fde7dff6ed4449ba6a96ae6274a64dbb46a9cc64341b284c31d8451
8824496948b15a0f3d2f0890a77976fd69f6d2e920099338a0f5a2e1d974e93adffe92b9bb090063c48da3e0b9a6dfe654d5914664410a81a2c82973bedd214dafe0071434b215ed47dff7912629ba79a7e853118d9df8409282c64e50364af7fcea2c95ab2ac2e4e00fe8bade3899da81190425762899d2428e2a0eda8179
6fd6e83d6b23a5346a8efbfd0157575778f7ee1dcaaa82a70cd172b9c4e5e525c228c4f67683a66d4c567fb7dda964918b48cd74d449a448a9b3f67d4f83d43f307642f7173adc411006582ce66792db2f623f8d545fd988eaf7a1965993388c22333ac7f33c52bb158fdded5a9a9fe84f7a3e97ebba26a1403dd72a20e93a
74fdfbe2177a3693767ec800538f0639dfdf767def67cbaa60d83d51a6deb3ad9cabbec04a55200a1c0e7bb41d55a3e38498162c8e8942a6e7e2ae56e09cd3d80f21ce85651e38b344199d613a6a3dd0e757aa044d5dd7aa9561e460ca936a6aab548c85103414fb9e41f68f418f073a1c0eb8bddd60737b4b15bdaa429aa6
582c5758af576a9c4187a2c8b1b9bdc5d5d5358e870302dfc772b1c4743a31d976ce550fcf84667b8641783676426dc3f7d7448ec717293ba2fa888db0940a60693cc8c9b1a6aa9c66b9d0d885aeef4eb6d53b093b7cf21806f33c4f7e1a87307d608f41330262a57e09504260524d1e1d3b4149c2f1d889c4cc4b7b19f7d7
170483f1611ce734f3549f591dd47146b317eb8a467fed763b6ab7280b45e94dcc681daec4c59234c572b100038c62f54363277485502be0ce54ff99ef7b68eadad85a21d480f7a63da974deadea0b9ae3ade752ea7bf8be41f60f410881aaaeb1dfed70737383eded065996a1ef3a24498c8b8b0bacd76b08299065198ec7
230efb839971ebfb3ee68b05a64a55d4f5e87b477184d96c0621049224369fe1bdbe5f395a1f2de2a2a61c246982508d3b7909fbd3f4548f7b345583ed7d3efe9930968a15e6f339c4338c9d78ca7d3c86e10599cb869d66f8e948533b9a5a4c40cf24dc6db728cb029eeb123f563d6cba0c493e554a49cda69d2ee73ea0f4
037d613333732f4d5370ce51d735922431df5bf73d956589baaa4ce0d72ba7b0ae299bd8b6ada91e919001f5393db669e800513624cf73ea83bcb9c17ebf47db34701c8738f5eb35debc7903c7754d097d1003cde26b0a64c72376db1da6d3a93194da704e675330ced04c26e8bbfefe52fff9bb3acd578b22935dd6aa687e
968131183a515dd754c657544d5dc62fcb9266d2291550d7731186911956ff54cacffbefee745e4d53f9935a254e01e16492823186288ae8721b8b103d00ce497d4b8f15d05404a214f8e0dc39050b4d83aaaac8f9743db45d8ba6a98d2267d77514e00481c9da7fec61fa22786f094e978ce99de2441732630198ee99a52a
feedcd0d8e87030ad5aba99fb7eeeba47128347e220c43348d963bfe80121d67a6c2e08f2ab4555dd3681655c91efa1e755da1288a510592a8c245490dfa8da2628e47b7b84fa8e80b292951a5688cbbdd161b4519e39c63ae66425d5e5ee2e2f202814f9f392f72b4ca89cbf3dc9c4f3230a911f188a208622ed48cbef441
1af3784f8ff7e6244d112b6adba79eaf67db4a23fae57def79fc2777cfde389baba9539c33931516e2e1bbfd247e40d53cea8922da7b184546921bc04904a3accc48062925faee344ea553cc0f9fd1dd1e84c1598ff24bc358596f5cf179d8b6f6cab69667b655f713799e87499a420aa146337dd8b66a388e432ca0c944f5
e6354892d4ac37d9d60a6551a056025f639108fd53db42bd1f8230fca06d054e49b8222fb0dd6c7173431a03b552278ee218abd50a6fdefc40733fdbd68864ed763b144561da0b26d389b923b45dd492ed49929a568c0fd95612110994e814d99141254d7d250e278440d776a89b1a7555a38e88ae360c039aba41a9e604b6
6d4b0270aa7d42f7397e6a32681ce41bd11ff914e37a4aaec7490209ba5b933831cca947d57c55ebc54963626212f2bf6f30e3c38c67e88e7bf05d8f12cf4ddbd24c60d522b5dbed501f6a78ae67c4dec67b334dc97e78be8fae3d6f21787ffde9bd300633f6c8f8c34d835815606a355eaaaa2a330da06d5a4325d577a6f6
a974701b46a11a88fee1805008610413b79b2d6e6fa877bc5363832693292e2ed678f3e6078041259fb790421a111d12a0d9623a9d9879b7dabecee773b8ae3b2a8e3cae30af6d51188646f02708831734fbf25145c787a722e896a028c662b180e7ba68db4e29be3fd60e70de0b3d999e44a63e764ddcb1828d0e64c70ea7
7e933488728a7ab546d7d12cb4e3f1802aaf70381e717b7b8b38490029315512d9b1aa166a0eb45672bc3f957afaa2e7e7848a3a18c7092693a9a2bd65689b16077180ef0798a4135386efba0ec7e351f54015864febabc66cad9cf7d0a5a629843a18dc6eb7b8babac2d5d515f23c87eb7a2633bb582e315f2cc8c15152d7
555561b7dda1691b747d8fdd6e676475753f817e688ee39ca851423e2df8d17416ce4d50278601fbfd1e4c0984e89ea7ed760b21045144fa0e87fd1ebbdd0e87c3016ddbc2f33da40935a687c1f31c262d2a31bee41e92431fcbfb7b9e873826ca5e1cc5e8fa9364f86318cb853baa67501b3a7d0903124d5d9b4a6fd77546
616fbf233187ed668baa2ce13a0e7c9529fe94ecca97c2780def53f81bbf4fed1433c6300c0316cb2596cba591ca3e1c0e80a4758f94f2ab4e54e8e1cfef0d87bd77f14f17b33bdadbbaea44157d928d6fbbd634e1f77d4f9953c6a8d7eff6169bcd06655180316efad8822738f89aca55142576bb2d55f26f6f916519babe
439a4eb058ccf1ead52b5c5e5e60be5810f55d0c2814377fbbd91af5c2300c48502b8a309d4c8c822a516c3c2469a2c6ceb0c7d7052775b8300c4c5fed634ea1916a3f13a8c0fd77e573ec27b5a7c6022e1ffa563ab31ba8ec2d65339353bf1ff0e0dd7ea2d29e66cc0ec360c4a76aad84a81c2bd755230454bf4bab04588e
07a23f0b31a82a6ca8eef69793213e2db416b452cba003c3076ceb7ab546df5152333b1e908f6d6b4cb67536a3f10291a235074fb1ad779e61100688c208125249a14fd49a0a547585e1d8230c034c67330441a0d44f7b64c70c87c301799eabca628cc027a5f158ddb78fd9562106746da77ab0b6b87af70eefdebdc3313b
82738ea9aae42f974b2c960b4399f23c0f555961b7dda26d5a48358a41ab6a9ae1cbeafe2287f3fe5681fba05fc3f34fef5f273982f0c4bc68da06d9f188ed76436b17279090d81ff6d86c36d86d492cc47528d19a4e5244a15a973b6d139fba97cec46b467beba167ad93e13a49dac59d51a9fcd09a98fbdd73cde7f8707f
e89df76a7ebc7c683b6b9675746f8ded2c0333623b8be5126dd722cb33b2632ac1b9b9dd20495243b3d7427000ccbe9677ee87f30700f3bd1ce77c06b5aed8d6758d41089425a9e2eaa1e74118206ce85ec88ed426529405baae3db5862529a238364c9efb9fe5896d976519765bea7fbcbdb9415955c40e8a235c5cacb15c
ae305fcc49684e090fd5758dfd618fa6a5a074bbd998f631096092a6aac79a12a6fd40fa1662ac0c8ffbd746ef6ddd82f0501fad79aea3cff4fe39023e9849fb987da48ce9a3cff7be8f350a74891de99b79d01f12e39426b1e5230a230461f0e87d7cb636239d0757ffa65171c3fddf57571196ab258414284beabdd155ba
cded06812aa56b652ce23e7b88f5e61fbf8bc77c2aede83b0efa614092b698cf6786065ae4d4fbc3393990448f23a7416727caa2403ff454968ea837520f177dec006859e1c3fe809b9b5bbc7bfb0e37b737e08c633e9f637d714173dce673d3d4eefb34d05637c88f657985184ce5652c91ab03c55340ae3ffc3d4f4c3999
3aa8847284f5888f288ae03aae525a23352bdf0f505735a228c22006dcdede6273ab2a278c63369b62369f6136a3c1a99fad7c383e0423e7f6b183a62f59ed74fbbe7f6ec41f5b13f5fb77d5b2b4d804896304e0dc41ddd4d86c6ee1381c4591234d27600cd86c3678f7ee0ab7b73710c380308a309bcf319d4de9dfbe00e7
725cd379af619a7ef1debf398da6a04cd3ab57afd1753d6eaeaf71381e519715b8c30d2d7b4c890130927e7e60fd47d034636df8f47bd41472dff7d1773db6db2d550fabca644ef7fb3daeaedee1f6e696e62bb90ed27462c45f1edb936355ae6376c4d5bb2bbc7df7965eab6e147d6282f57a8d57af5f61b958224e6200c0
6c3643f7fab57e2154ca886fb73b4caeaf1128fadc6c363367350c42f443fff89a8cee35a2fb7053811dcf487af0412b8ffe74077f39376a7c1fdf752e1fa23e32c66828b8ba9f8320c0a0861b3f78b78fd764ec64ba0ebaae479226982fe644e11503b26386b22a0109d59f489568d36fb6dba1aa6a4809783e09156867eb
3e219caf8bf346fd911ccef939bef3afb46d5dad569052a22c4b5321ac4ab2ad7ab48b1f046743879f6c5b4741a9ab5a04343d77369ba169883171cc8ec89b06dc21968ea3ee65ad90bddd6e91e739dab6439c50b2574bf3fb9eff01dbda9b4afeeded2ddebefd15d7d7d744b15389d657af5f61b15c1891309de02bcb1259
96a9761592fcef871e1252092844489298c42d54dfd6c7da1133224af901433fa8f34f7751d776d8eff708fc006ddb1946d44609e7dddede9a24f47436c36c36373e87c33fddbeca07ffcfe3d07e94de635148bec0a377fbe8f73535fed4d3fd818070747f9dfdde6f211a54ef951cefd3cfc786c6878a51320c3d8ec70c9b
db8d197d453e987fa684aeabc59a9e7d1a15f3c0b3187d2f6d47866140a2cf6cdba2522ab2595dd380f734257113df47df77c814cbad5073891df754454a92e4bd51256368d5eebc28b0dbef71ab545537db2d1cc7c162b1c0c5e5055ebf7e8db96a8dd0b3018d3f7c3c1a46e176b733c2299ad9a50b477ac6ef7b41d4236b
32aedc3e85966d965b7e8d14c5d8163c6e5bf5e7014e2c2f9d9c3f4b683d72661593f6acdff8494ab2f27c255c4def3c735a1e78c34110603a9daa41e407cc6773147961041a76fb3d9234c56ab51af5a8f99fa4a2679c87be57b3b3c868158a9ed9a8f988bbdd4e356272b44d4394922ca34da74ad25a91ec434e83090895
f1391e8f386619aab2c244897768d5a9c9646a8cb2e7799052aa037289beefb1d96ccc4cc2288a915f50565573bf0d4553e2c99b533f1ba10242ee388ac34d8a6359e693c1cc72dcbab7689ada1cb4dd6e872ca7ea2a5561522c160b4ca75384cf400561fc240e2315c5f529cdf4facff5f7ffd4bda2257975a6e3341ff348
d2e6590680b8fbd36909ce39765b52352df2c22431168b0566d319c99bbf800aa13907a3cbcfd594b347d6568f18984ea6b8b8b8a0f971aa425894258e8723b22c435596465952f7483c7510ea7bebcf4e83681355d5cf8e9912672a718b5b435ff63c0f87fd1edbed0e599611952da1e060369d993ebefb70776c499117d8
eeb6d8dc92e1639c218d687faf562bac964b4c54c54fef0dadda55abaabe1e75921d8fd8ef76088300491cc3518ea9febe9ffafcf4af1ffa3be774420762d062141fee15fa94f734a62e7a1e893fe99ed9fb848480d35c27ed204209ca7cea9a70de218963159010d5fd783cd22c4de7405437f5fa555522cf69aea49454b9
d1334ee391a0d93715edc1e9393ba36480eb9cceea63b6954d899a78381c309bcd90e739866130362f4952ac962b00f82cdbaaefdc5ed9d6c9748aa66d91e71938e7e8d43cbffd7e6fee1c9d28cd8e19baae3799ec33dbfa18655452d5adaa2ab28b8703551b8bc2ccc6bc7cf50a9797974661947aa4a88771b158a02cf4cc
3792a93f1e8e884212895a2e9708a300e1487c0e78fa991d8f3c1142c0755c746d8738263b92e7148c96050987e8f614c771481d7b4f021b9aa2b9582c48782e8a3f3bd93a1ee4edb8743f933af8e3b6759c70358c9d4f3caffaeb53bedfd856d1bdf27246c23cfede991101794c5c4bff7dcff7912a268eae6ceb79a2b562
254d26547d9752c2733d12ab51f6e463df9f39b35184a90a08b32355d735ab6db7db99dec74ea9646759665a8c62a50a3e4953e30f3f96c4d1c28ad9f188c3f148e35c9a06d3e9148bc5026fdebc51fef0848499943f0c90b6c6fa7844dbb6d8eff768ea1adb41200843ac562b744ab9753ca3f0a3f52b9e625fd5d793ee82
8e774601d333eecfbbf6d5755cc310e08f7c2f937455efef53d5c79fea7318011ba31de3c19dcde798a42992344110849401bee7108cc712a4090d305ead57a6f78173865e097498310ac067071a63d19153b07644affa2674f007c0287d91600b0d495f2e97982a45d00f716aa95745f1b1cb125ddbc15155c8e96c467369
562bcce6b3331a1857623193c914ebf50ac3d09f142cbb16bd16c1a96b74ea7d7c4e36db193de84805cbebf50a7ddfa355423b87c3817ae67c1a705b9625841ace3d9d4db1582ecc5c14ff330342ad581a8681e9298a151dd1f37df00f18c4e7545fe4aa376ea232ce6ddb222f286991e7b9d9438ee398de413d2663315f60
b95c11e5f905f54be846f6308a10b7ed99c2a3f3c83e72d4880aaac0b4c611d34e7daf7a2bb528c8c78e1eb977fd410e48922658ad96e85405af51c91aea736de1792ecab242a3329b148c2fb15eaf319bcf1f0d08016aa4eefbde0c4aafabdaf4ef4c93a9aae6af4f0dd6ca0833c610f83ea41231ca962bacd63bf44a6576
100295ea4f6ebbce04ba5f32d030fd79be6732a69a7646a223cff3bd356551072b3a09d20f3de2f864983fe4f48dbf7e0e1c87289f93e9d4f4e1147981beebcd1dd6ab39856dd3a0eda8f7294ee86e59ae562678780a3de68b6324f8e4a90a7d3a992895d0f041daf0f8dc2569427b77bd46d336288b921cc18ec45c3ab506
3a28f8dcf5a79153a94aace4381e8f24d8031a81a129d246eca7eb4c5570b95c3d59d44142d9d6ba56b695fafe353d6ab9d4677f76e6a89edee304abf5ca084135aa275c88c1fc5aaff3e7b63f70a524acdfdb7abdc630906e8114d2d89142db1135de428faf582ea96f793e9f238cc2cf7a4ee33588a2c8b49890231d7c50
14e46ba964eba4bce7f908c21061141961b320f095aae9cb0d0af57bd563940255bd7a48995e3bd31e23d5d1d97c86f5c505315654558c461791d88bee8dfb5c1683eefd4f12ea05cd33b2e95acc88126642058fa4e0ddb62d15223c8feeccd9cc28173fb63775c2d5f8c35d672a8cb3d90ccbd5d2f44a86f7f8c3d3e914ab
f51a9d1238dc6d77441b5771c269240cbe38bb43ab515381283e9b8dcd3fc4def9c87da4ef7f5d8cd2a25d7a2f7d2839f235d4c8c7c9225dc10600f7f2d52592989ce1344d9412e7c3b2a8b4217d4ca753bc7af50a00703c1c5137b579a88338c9e0deed71fa94374e8a4231a4142693ccc05056a51150d143eff5875c2ce6
984e67b8b8b8307d411f1a3ba17b925ae524ebbe86c96482e56a858b8b35e60b4515f5cf1d109a3b169bea28240df8d5421a4248344d8bb6690d65e0731efab8ff643e9fa351023787fd017991a3aa2a1445aed4fd1c23d51bcd22acd76b335b274d278fd2069efc8c7cea039ccea68a6a139ecd34fb9ac6c0735da493092e
5fbd02e39c2492f77b53052af202dce190829caad97c86d58ad664a59c4c3da0fc5bc3341a872152d5a3abc592e238a6d9798f648102357f4ff7979665093fa0e09273e76c3ccb73410b2f5d5c5ed279dc04d4ab976728f202754599751a3e0b525f5b2e717179818b8b4bcc1773d3f7f21084547335bb1e83a2cde9f3b058
2e7071716132973a63a9d7843b0e0235e374b95aa22c6970bc16b6e895f47edf9de6497dc961f28e92010f95a19f4d67e8ba0e13ddcbfa9cd94bd593170434d36a369fc1755d4ca7b3531f1efff20609a0ca870e48a4a227e91956755da32a4b542a9125a42055e130443a49cd005eaae69faa83dfb642a8d419559bc2743a
45df75d4e49fc446cce931db1af8243a76f9ea15c080c39e7a2669b410308c24e6cda8a04f7dbf5a74248e21c4b96dadaa126dd3a2517d4a524a92e3f769b0fd643ac1c5c525168b8549b63e9ac0d1331495e805631ce96482288eb1582e717149af3549df4f5012ed2ec262b10446c1e9f17834238ab47846ac18319f6bcf
8c9f339be2f59bd7705daa041e0f4755056a90e5391cce8ddf319d4db15aad48c0eae2825a0f82f0b3f7a4eb7988e248898a5085300a43a2a37e88c6f915a1c74025710ca1e6486b910cef098243df12642b49dc6e3e9fd3e748d29123fffede668019863e994c7079790906208a22645966a8c87a0c5aaf663f7e6e824007
aec330a05ed7a8eb0a9c719415255ab64da38448a4a18fcee773cc66335c5c923facfdb247fbdae569ee69dbb670b883c9648ac99461bd5e99e4ed5dd134e02484b35eadcc5a69468eebba10429a04931e5df425f6c798611504643bda96fa9fe3f814ef3c4732517f2f57d9f2c96462126889490a7e7bb5f1f1fb8cc210b3
d90c6559d29ef8c31ffe8050957075ef8ed9280fbcd878d8aee6baea6c62100474498e1a153fd750bb8e03ae54e8a802d9823160bfdf23cf72d4758d7e189431a68da8ab797ae874f044e1144ddfa4ca6044b3435c5735ba2f4984250cdfab7a6995c2e9740ac63971a5c5802ccb4cd32b55204e3d729f6bb474f03b994e20
c460e85f606a6c46dda31b0638ca80a49389e9835c2c9798aa794f9febecea86f5c9746232d8baaa1b7f8096f025c09570cf72b5327d977a3fd6558d7ee8c105373d48e4dc5c60b95a613e9f218e932729e67d0d8c9db6d96c7652985541ef63c1bc311ecae1d372f2ba3f2f8e6343d3f8589ae863d0ca6acbe5d2ccc311c3
80410ca8caca0459aee7224a48f1707d71a1f6e502a932301f540396748e1c15084e2613445184cb5797b8bcbc34d5c1bb973de71c4cfd9bd96ca644967ce45986ba69e0706eceb7de376712d2cffc7cb9a900d058193d578a7a59c367ad7ce919547abd56ab95d95bc6b0b3af546933aa6a24b6d0751d3aa5367b3c1ccd3c
ab41080a9a3d0fe924c57a7d81d57a85c5628174f28204a0541fad5673d4fb3f567b5c57f41fa3a1b99e8b3449b0be58c371b8999b49ec8e801259cf685b35030700ba96d69f338efd7e8fe3f1a80465a88fcff11d4a1e2f8949b15a916d0dc3f089f2f5d450c6b4f88ba251696ab7aef6de653d683b972a25ea7ee448ba9e
6b94952971f03cf79856504e951aaea77ae820c9b6565545d56b4e762451c9d08b8b0bacd66bd353f5b9b6ef94104f319feb6432e007342a48aba27e6be8bd1b4511d2e9045cd18c1dc75167f4e5306eee83ae6acde7738841a8d167539a25a814cb1f5a67d77591c40956ab95492404218d28227d07c70c8777464c9c4f85
a37c4d292516f33929a4733ab35996a1aa2a7366b9cb112731d6ab35566bf28727ca6ff8508fbee92d6744a58d93588995f8582a51452d0077f71ed2eb399bcf495b404833ae2e8e63dab738b5f87c898070dccaa2474acde7733030042105ffa48efc3cec129ab74bec9b288e315f2ce8ee52ad3b54d5f73ec898fbd23055
4c4d6f5f2e4950acaae0fedbbffd1b39f3930996cb25a2d1ccac87b8aedae19bcde7463ab650b43ceaeb489f6dee96e6f73a3a9b3c99d0c1520e6d9665a8ab1a8318cce24f52ea1fd274d8a756a9746093a42984144852ea61d119201d58de57ded68e165381abaeb84ca753d51f95d2e1f18367ab368c5589e4746a78cb7a
464b5dd710c300ce29633d994e319dcd309fcdc84179a6ea9da6fe68a95c21c449cd4a5539be6a40a81d88343de34a47718cbaaad0abcb32f07dc4498cc96482f97ca1e84ab1a9febe1443ab87baeaa671bdff53f50c3fd49be6fb3e649260b1a0839f4e485487649b930ff6127ceafaebf700d5df1986a169ba672047278a
2393a8982ba1265d21f810154a0f3ad7d9591a681d1a63f558e5423bee711c63b95c1a87b3a96a4800a9eab13049a42f547d1a57fa85527af6d5580edd1ff75c06644c3f8b556546f79fd08cd3c9075914cffdd9355d2754d4d161180cf52ecf733475632ab4414809b7c57289f97c6e84475e8aa3a933d17af6e5abd7af8c
5cbfde8f1fa2b63a8e83308a309fcde0aa5f4f2613125753d49ee79c69794ecb4cd0f7abb3b97c7555a11f7a30463347d334a53edf39cdd88d9e18f49c125b09864120524acf8eeb527fbe0a06ef5301d72d092c20e6cd6249c276699a82711a55917e01368a0996a534c2595c05e9e61e635a7192941f17aa12a319499f4d
c1d7e370a653389cab714ca0c4814e4ebf80fdcf188de8d0cf248e630cfd60460c04e1cb39a7f7c1e1c4f05aaf2f681f399470d52aec8fed2baddc3b994e4ea358e2185dd7999e3d5fb5ce3c87afa57f1a7f585151e338a61e6cb337e9cc4ea6e4dbcfd599fd9060dbf8736935554889ae235aa1a7e2051d58de6b5fef24fb
f498a2b22c8de8d27856de976ec9703d174942452c7d0f4f26d3331fe1b3123760904c2abaa887c924c5c5c585129e7491a613d396f7adc7638ceffca99a271c4711daae03fbeb7ffc873c65a8233383cd79a48caa4bc9632eb01e3aade712e94df7b9b49631b4aa60339a8754d7d457214662077a5e5f1486a6d1f5290f41
bf7e5d5568dad62856724e591f2dbcf1b8b4b630339baaaaa241d68cd19c365529d44da3cfb12974af62dff76a1e5b6d1a9bfbbe335964cf53aa4e6af0f698d3fc1cef81fab82ad3776594c994f8c15324ab9f13c330186a91e6c0d7756d069f42cdf70982c0ac87de2fdffac0de5d5bdd2747ca77bdd9ebbe1a12fe58c0ad
337de33dd9aa2accf8f96881a4e7da93a71e5ad51ba6e69a75237aaae3b8944d55e7752c6cf321454e2d5ea35fbfae2a74aa72fa1e67ffa1f3aa076d8feeb0beef0129e1ab9e4d7d8f7d293aa2be337ad5fbac69345208789eaf540e3fdc87fbc46f66ee273d60bc6e1a12e0ba736f7f4dfae5583196eef40a75ad7aae151d
588ffe08d5c805ed703f6770f41c9f434bb5d74d83aaacd0f59d49dae964e2876cebd0f76855b5b46d5bb4776ceb7808fc73da562d3cf59e6d5536c4755c1a59a1f689af54c49d27d8329ae3d7a2ae1bd3e7ae9fabef9fdbd67b5f4b9298da3010edb4aca86f8f819c3d6d5f0335bff4b9ee31735eba0eb5b223daaed33dc6
4c95522b897ff0b37ce47bd0425c5ddb62500aa1d4afe71991ba6fbdff4fed36ea1e1d482e5fb793e8f1002f3528d40c1ad3dfcab96176697feda1e779e683295bdd362d0641c286a1f6abb5c0ce739f5945f5d676903401a409ca02a5eda0055c9eea0feb116c7a1ea950fb5d574169ef05e00ff4b8ebea9f1660d2e74627
5ab4cf3116b4fc12d0cf47fba85dd7833ba7e7fb2101a18ff93ee7dfab46d777e68ed3dfeb73e6923ed77ae87bada96b546aaeec200458d3343472859d66233dc519b8779e07ce6718eaffff9c1f64ac30a89d7ead4466f8c277142e3fc6b9d1af3d56e51abfc6875e4bffbbbb43473fe6353e655df4f71483506b32408ce6
1b72cee1b89fbe2e1fbb6ef77de6af89f1f3d37b447fd5fb652c5b3c96e8fdd6c6f5becf721fad737c669ffa1ae367f425f7e4ddef390c03cd181aad3fe3ecb3d6ffee7da071f7753e745e1fbac7bed67e18efd5c7eed2e77e2ee39f5ff3f33ef69ef4fe189f57bd166325d67130f452cfeb980af531e7eca5d8563d134c2b
3833a520a969f85fdbb6deb7b6e375f992b6554a49b4f761c0a0ecacee81fed276444a695491c764d88fb9ffbf069ec34e7d4bdca52fdedd4f9f6a47bee4990528b1294641e9f8338cefcc4f39b377fd584d217daa6d3a5b133d4f0f1f67a39f6badcc3952bff725ef0ce393e8b1711fb197be16eedea5524a30f95c8d43df
f0438df11216faa5408e076e32bb361a4271e35f62f0f73d40cf19222ae6b77e37162f157787f1dab3faf5611c5be059a5d97ff3d00e26be8e2aa085c553713718b7b0782a7ef301a1858585858585858585858585c5a7e16512ba2d2c2c2c2c2c2c2c2c2c2c2c2cbe386c40686161616161616161616161f19dc206841616
16161616161616161616df296c40686161616161616161616161f19dc20684161616161616161616161616df296c40686161616161616161616161f19dc20684161616161616161616161616df296c40686161616161616161616161f19dc20684161616161616161616161616df296c40686161616161616161616161f19d
c20684161616161616161616161616df296c40686161616161616161616161f19dc20684161616161616161616161616df296c40686161616161616161616161f19dc20684161616161616161616161616df29dc6ffd069e1df29e9f187dfdaa6fe4f45fa9fe2b47bfc3c000006cf483feffe9bfbf69b0077e5a5800e767f3
9b9fd7e7fd6072f4abf1b91fe3fcccb36f7beed9e82b03a50aed59b5b88bbb6756dcf9fd6ff086eeb3b1e7bffb619c5bdef74fe68bb4c9d6be5a7c0863bb2aeefcfe8bc2e9fc3ee42f3f056c7400d83d9ef5373bc7f7d9d76ff4561ec3ef2720d4fb6500d049a001d001e8010cf2dcd9fc2a6f877e08080c18d061c0801e3d
7a0c182020c1c1e0c085abfeeba95f71b56b5ed85ef97870003e0342f5d555bf67ebd216da400d007a09b4a09ffabc8effde6f060c808450e75e40a0478f0e1d7a0c10eadc0380030ef7ec87030e6764bcbef2dbe6001c75467d0001a3afbff94bc8e2d9a0cf6c0fb2b1facc76f29b9c537a3bfac7801e833a6bdaca0e1010
1f7426f589e360e0e65c7af0ccc974e0a83fa5bfff02c040e7d5c3e9a7b6b12fe20d5abc0808d019ad954f3cf6855f806dd56f616c2ff50f7d92c767f8f1b34c27d901078733f2ab3d6361b93ac75fed888c03417d5e03d05975f0e2fce1df4f40082863258102c05142e6a083d0820e82c017bd2cf54bd3591318246df006
0d2a56a3428d1a351a341820e0c0418800214244881023448000ae0a0aa5710f9f9a1f7921d0978d07b094014b064c0184ea40d84ca60540c16023810a402e814c4296a0448efc364ee6a7e2744ea5724e7bb4e850a342a14e7e8b160306000c3e3c4432428c489dfa003e7c7070807da5c3a1d797037019e04b2062605300
73f57bceb75e598b17851e64534b0099243b5b4a3acbc057bdd70524a559658f162d2a542859850a156a3468d1a24367ea0c77df9adefe940fa11f1e3c843240821811224408112204980747256cbee9b5a4bfb903309f0131808401290352494ea7b5ad161a038052025b097994408d6f5220b90b8631d9806c662b5bd468
e81cabffd6ac41a7824261d2a90f6f713ac32e7cf80811905f2dc9cafaf0e1324af07cd54362824149fef04c9dd57094c0792167f6f711109a92b824673297903712b821271395fa7df2c5bee8dba0afd2e42c5bd9a060058ec87044860c197214e8d0c183871429a69860862980a9626a4940199f17b3533e069a9a1000f2
8281094e07c25106cb3a99161294bca9001c2570abceec4e529028f0cd8dd6c77e1c00a7738f16254a1c91618f3d32e4a850a1450706860811e6986226a79860a2329b0c8c9185f86a7542ba6a286b193360ca205f31b040399b16161afacc9600f6645fe595a05fb7f8aa8e8d49baa2438b06a52c716447ecb0c70147e4c8
51a052c9578a5699f9cfe93520e9b4e98a7d8800134c309773cc31c380091893a344fe37a9e1df79d3005c40260c6cc18005c8b7f1189de3175471b0f88690a07d914bc82b09bc139478d5bef037b4ade7beb2448f0e356ae432c301471c70c08e1d9023438d46316c54a5f06ecec37c0e06070e0204481021458a19a65860
0e29a700136008948ffd950e8961df008819e48a810d1ce00ce092bebe207ff8f711106ae8f2f85102bf0ae0270979ab82c2facb67314f15425525902d1a54c871c486dde2061b6cb0c10e7b34681020c00273acb1468f060e00dfe42105550b7e8bb7bbbe6c6280fd99433a0c2c964443f360692d16b43f3a9cb297bf0ae0
efca68151252efa1df484078fa58140e36285120c316b778872b6cb0c511191a3460609862824b79890e2d00010ffc74f69966077ce18fafd7d7050583330676a92cd84c020b7b482d469020fb9aab04ce4f02f84f01f94e50e561dc1bf315a0f937b52cc9c6e2166fd93b5ce3065bec70c011254a74e801bc1f1042154ab8
72247df84890602d97788dd7e86403303a9b1ea3b3c9953bf9c5cfe6c31f9ae0036cc1205f73b01f38ad7bc280f45bbc298b178b4e020709fc2280bf0ac89df2853b9cf6d257bee6c77e32d1bec966d6b2c0017bdcc85b5cb16bb29b6c8b42155074abd57de758bfb207173162cc30c50a4b5ce20242f62626731853fef557
88c2e87231ad536cc2803f30faff2127dae80bf3877f3f01a1042019d04ac8bd047e9190ff3e00bfaaaa432ea1ecc217335ab42f19a41c94b16a51a3c21107dce01affc4aff895bdc515ae51a142840897b8448d12c080101e22f870c00078aa7761bc717f237d853da85a3b659015c0660c72cdc0260022d073b2f8bea103
c242426ee9bce2ff1920ff2ec880f538550981177361defd089acead1dc41e1d5ad428a18c1baef10b7ec6af788b2d762851c101c7522ed1a20687840f073102440814599cdfe3bd7e016887c0033061c09a411e3958c8207f9060e2735edce277875140286f04f00f01f9ff1b80bf0b20c72913fe85df82fe95408f5e3668
5022c301b7eaacfdc47ec63b5ce1165b643852559e9d44dc74858158e9124c72b8f01022c04ccef006afd1a20193123e3b9d4d8f39aab2f00d993b3a511601f21507cb0029001673602581e1055e94165f17637e740ff2877f1290ff5b98842bb551e19b6ce5bb826b543c6950a1c0013b5ccb77f807fb097fc73ff016ef70
64473468d0a38764826af4ec54e1375f24e0c3c71453acb1c26bbc422b6b78e008e12380071f2e3cc6c155caf53e2af9b37e487d2706aa3ad870c809035b484ae084f245f9c3bfaf8050403999006e9593f993202a5a2681567ed103a00dce584aa6950d4a46cee12d6ef016bfe29ff815390ac488464ea187143122046000
0604f05533eca911969d7db7d3077f61d0cefc8281a50cf2bf70b05242b60c6cf8dc17b7f85d40d159640daae8df08c85f04f0374115439dc1942f617f8fcfda38bf79a287ebaf2d1a142870c4013b6c71836bfc8a5ff1337ec1061b1428e1c245830a3102cc90628e095acc30a087c4601488e5973ee3ba42e8abea60ce88
d2fd83ea35115fcc5c5afc16a128a3b2a4aa83bc5241e1ff117486bf6840787e16c895ecef4dc0fc13ffc42fec9fb8c6350eec808e35c4cce22a9c53c996414a082901c1e1480fa18c30970b0ce89120c24ca658b0295ad4a3b3a9dfcb37b2bf3a491633b01290be4ab8be0658837325498bef1b94a1247ff85a02ff10c02f
0232530161aff6ee3750311b77dc13aba643831a3932ece40ed7ec0abfe017fc849fb1673bb4acc6c07a800b70c6e03025e0a6aafc424808c9e0494aea94c821648f080196986389055aa4181042c2035448a8f5fe4f0bf6ccebaf84da5808e0c82908fc93a2dd7712102fcbbefe7e0242e0d447d883fa904a69c42a70fc1a
17f7a95670ae314a3d45356a942891a3c01147b468112244a27e4c90c087871e3d1224aa9dfd1418ea66d86f4858f9887500700465a39a7b2a3e16165a65b40305204aa8421e47d5fc1701f9deaf4fa7fba48c467d83158e38628b1d6e70831bdc2a9a387537d5a8e1c1c304096ad446155160801c1d90b199fae2682439f2
05a33bb31dd1eb2d2c3474026180522e84117043f7a54bf9e379173af13ab6b2271b5ba1448902257254c8209d0ebe0b70cee0702867128010e807601818fac185903d7c782466a144a07a4555932faaa959dd8f33e5583620e7de068316772125ed8d5a922f96e9e2c8377d5367699d932eb716636b94afaccf708e8ed580
d3c375241c17f038d1fc06213108a01f24da01e887163e1c944851a91ee20e2d06656375f2f6dcbe7ec933ad12651d0362a567a2d5d45fa03ffcfb0a0835eeda269dd0fb068bcfee7ca5b7273140a0458b02250e3860a3f40619186a3498628a0952a4489020567fc2ee50485f2ad462db1949164f013bb126e46f689f904c
768746291c164a4466873d36d8e05a05847b1c50a04483163d06b8d0c231ef2dc3b70303cc99b5b0b80fec43bffe1a9b873df2fba769630e185cc610ba1cdc63483d8ed8e3085c068f932b50f7127937a06e19fa8e83f71c5c9ce696bddca3c0eed8d517e6555abc408cf7cccb2e288ca7077230789cc175395c8f23f22552
df41e8d2e9ec06a0e9258a4ea0682544c7e10e1c5cbe20fbfab22f9333fc3e03c2f1f04767f4f58b571dd89d5f8d47dbf233eaa78444871e254a1c7084a72425040695e5acd0a28550e232a759484cbdce4bdf618a7e76b7e5e2a5bf6d8baf87bbfb4237603ba0ecd90bcca069e8da7f8b0e152aa326bac50e1bb6c50d6ed5
cf1b1c7040294b74680d1d948ffefbcdddcff11dc9a51d4a6ff138eeda5747ffe6b77c4330b6d1e11c2ee3081c07f05c8481c422e298850e05850ef50e15ed806d3de0580375e340340ebcde01171c4cf2d1f97c81c741afbbbe335fe49bb4f8e6189f553d6b56dff12fa0a27cb75630f6951de6c0e30e42d785130c880286
69082c2307894f8591a617283a89432de056020d73e1770e5ce1c0110eb81c7bcbf49d4eb4efaf80bb31c8f8bcbe40fc3e03c2315e944379a2b8e8d1b9da211cd860a4774b54a82535d17235b34c1347d96842a18585c5d7c3a9b74faa2a3f89de97aaca7f835b5c31228a5e2bb2e8ad521526a5b41e0e1c453f7bffd52d2c
7e737881db9601e08c2a0bcc6598041cabd8c145ec621a70442e3985fb8681730052820d1c4d4f3deebf19cb3a56d5b0b0780a7e63db8533c073184297611a70ac6386d7a98b59480161d9491c6b0197f5e807003d832b18f8c8c4ca7b7ef555213ff0ff5f107eff01e10b82e64d0b08f4ac5733927a0ce8d0b04a8582056a
54e8590748129b894103ac3de9a9809030ce5dfe668c9885c56f10ef773d0874e8512b119903dbe3063778cb7ec53b90f4fd065bec71402e0bb4ac0324438060345e770c7b822d2c9e037a0eb4eb30b82a20bc881dfc90ba58c61c89c72100a425c72081ae17183a0ed18eadab8585c5b78449ec380cb1c7310b192e128e1f
a71e56110584792bb0f54888adec80ae65e03dc0395e8e4af66fe84af9fd07842fec61d0740caa2ef4ac85602d246b21580dc96a002d5c0c082547243d4c6488a94c11cb080ee31052bca73e6a6b8616165f0e77954485eaffad50a260397276c481edb06737d8b16becd81576b8c11e3b64b240255b0c52c2912e3ce9bc10
e5540b8bdf17c60d1b9c31b81c701c86c4e398870ed689838bd8c124e0909282c6633be0580185cb507306668da8c5ef19bfb1fdcd18e07120f418529f611971bc4aa8dacf187068067006149d40520a140e83e00cfc1bea86fc96f1fb0f085f1a1829953126c0f800e6e8af033817608c41480f9d88518b18f910e32012f8
838b41f688102bedd1003e7c2550e1a8d18abfb1d36e61f1c271ae15dca31ba919e62cc39eefb0671be4ce1695b343c77710fc08200347012e2af0a187100c6c606a9403aca1b2b0784630d31b74d2cde08cc1e10c81cb10790ca9cf310de8a70050f64a68c691f0380588f6585a58bc00a8806e4cff0e1c20f638263ec72c
248f574a89aa93885d0edfa1f33ed6cfb127fae36003c2af0c63ac38e0ba129e2b11b902b1d763e2724c798b585670fb0ca2dfa3ec22ecba005202b568683885d4832a62846a6e21e9aad980d0c2e239412afb021d3a346850a15662d8393276c0916f71706e917bb718bc3d5c3747e49498b006527660c300d60d683b0ec9
249c1e76a48385c55700399314e8914349c161e83208008103780ee070723ad948edd8c2c2e2dbe294d8a19f2ea773ecab330c008dcbe03b442b755465501825558b8f850d08bf22f416d59b1b0e10f940ea4b4c0389792031730624a245d495407344cd7dec2447237a94b2c244569861a60469a836c8476a853628b4b078
1e489cab8996a89021c71e071cd81e47be43ee6c51781b54c12d101e10fa25a66e0b870df0a584db49b09a46fc0d127004a8e1dd262e2d2c9e0df2ce813a772669fea076283d874148c0e50cae0a189955e9b4b07899506798334ade78ea1c0392ce306770b4a83db382bb9f031b107e656823e570c07589173d8f185631c7
3a6298b912bee8c1ea0ad23da266403574380c158ea2c09cd1380a29253cb88636cae180db4e420b8bcf8634c3af4940a60709409528b1c71ed7b8c516b738b20d0abe45eb6d81e000373e228d2a445e870997482547503b605c8249865a00186cf2d2c2e26b82198792996a03a09c47fd13d689b4b07889181752c63fd9e8
3cdb84cef3c006845f193a73e97206cf486233bc9e3878933898fb1cac17a8fc068573442e5a645d81aecb100d392ad9a0c700070e22848810c1979e0a08e954b0b3f67a0b0b8ba7428eb4804fa325681c4c8e1c3bec70cdae71cddfe1c86f50bb1bc03b200e4b4449833469e10602c261a8848bd023399aa10758cfd13ba4
82661bde2d2cbe2eec71b3b0f8ede2def36b1ddc67850d08bf26981e9e4bf495c065487d601e92fad9ebd4c522e0180689a3db62c0806c685075058aae442d5b3026e1098e580498c844a98f3a90121008e0419e5148616b8616164fc25d35d101022d1aa3269ab1230ed861c76eb073af907937e8fc2ddc204318b7085289
592a110502dce1a80607602ef24ea0a825ba86a1e6b6426861f1b521c75a4e773c4b3b86c780000080004944415479e7ab8585c5cb84c4fbe7d59edbe7830d08bf01986992a546f7d86398f81cf390611131f4032031a01e06643de0760c6ce8307086b6f351f521f23ec6512408840f29243ad62192110204f0d4580a478d
a5b069140b8bc7719f9a68871615ab9021c381ef70e45be47c8b8a6fd17a3b0cc11e2c3cc28d0b84f18024e698c61c4920c13943d0731446c950c0e5b6c7c1c2e2a5c19e450b8bdf18eca1fd22b001e1d706a37c861e9eeb712070483529f619129f4108895e48d483443108e4bd849080744a384d0ed11d50b5310e5d040e
079dec91ca06b1d11ea5c010f06c95d0c2e20918d343b59a68890a05721cf91e07bec5deb941e96d30b807384186302cc0a31a51d2629a484c6317938821f6956a2167885c92cb7639e0307b0e2d2c2c2c2c2c2c5e1e6c40f88d3056407395f259e0900329017452a21112b590688400673d7ab785e3964093a16101f6f030
48895ab4a8648d0988660a001c0c0e38841a4861532a1616f743aa1fa426da1a35d1238e38b00332b643e66c917bb7a8fc2d101e118625c2a88117774813816502cc22893400228f414a895e30789c98005a125b0b58585858bc0c58ca99858585850d08bf09c63d445a25c96180c3999a8bc420c020248304a9a3458e44e5
f5e8dd1ac2c9d082a31312c5d020161566b2422d5b08083870146994d4479d6ffd812d2c5e3804047af4a8d1a040813df6b8c5065b6c91f10d4a678bc6db42847bb8f111415223887b44313049185631c332e698f81404f682298a2833e9181b0c5a585858585858bc44d880f01bc3642755f5c0e13468932969188f33840e
47ea3264ae44e6b428588e5c0c28bb06435b2264254ad6a0653d98e40895fa688000ae12c9b064350b8b87311e2f91a3c00e7b5cb11bdcb22b646c83c6d902de014190234d2a4cd3169354629a704c230fb3089805dc0ccc457fa7e5dd1e3f0b0b0b0b0b0b8b170a1b107e03c80754ce000a0abd5165c1610e1c266980ae04
c4d0a3e91a0cb540e1f468788f8a4948b8f01020c504356a74e830605064380b0b8b8770a28c0a3362a24089238ed8618f9c6dd1f11d1c2783e3d5f0fc0e4934601e01f388631a314c0220f6385c4e03e85b33bec2c2c2c2c2c2c2c2e265c306842f08276a1969833a1c70b884cb952805073897604c006c8060037ad68363
50ea880306239c3fae5058b7d4c2e231e8f06ddc4f3848ad394a5f191b20d900c6053817676793fa04299123a5b4a3252c2c2c2c2c2c2c7e33b001e14b83048404298d0e403748b48344db03dd000c0383140e98f0e00a0fbe0ce0ab1fe371135c8da9b75c350b8bc7319ed8c955d7ad07171e3cf8f011c00793011cd1808b
1e62901806896e1068068966900806c0e30ccca1f32b6d0ec6c2c2c2c2c2c2e237021b10be20d07079601012dd0054bd40de4a1c6b8143cd90d740dd38185a0f4e1f2112317c314520674831418a141122f8f04d5868874e58587c183a1874e1c2878f08115224a8e5144cb668640f0809a76718ba0a752391bb03b8230126
a8aacf002939805340684f9e858585858585c54b870d085f0a24d1d68404da41a2ea248e8dc0ae16d89602fb82a32a19dad2435fc5709b2926fd02ae5820920bcce4120bb9c40c532488e1c387a382420b0b8bc7c1c0e0a86030468429a668d0824122140eaac143dbf990ad8bae623872815676a8844039f4e82403a40b11
d0bcc1615c25b451a1858585858585c50b860d085f0874a7df20247a00592bb0ad04ae8b016fb301fbdc415731385500bf4911d52bc4ed2ba4c30526728109e698628629664891288551575509ad476a61f1101860aa8321020c482101387010cb004719231b22e45d88a276504a81a26fc1ba1a5e279176036aa12af10c34
4b54dace5d0b0b0b0b0b0b8bdf066c40f8ad318ad5a4941824d00b89a213d837036e4a0a08b71983ac1892c6c7ac4d30e9169875975889d798892552394582040962431b75e0d860d0c2e283a02e42170e7c049000381c451d0d118910c1e0c3610e5ad9a31b4a1cfa0c6dcfc17b8164e8014e2aa3a1abfa1039a38090d913
68616161616161f1b26103c217025d211442a21b24ea5ea268250ef5806d25b029059c8a81b52e923e843324888719e66289b95c9afec100217c3594de317d84d625b5b0780c441975e0a95f532fa1074f7a70c0208540db37d88b237a11a21c5c94824142a2e1027100e4ad40dd4b84aea4448f2d115a585858585858fc06
6003c29704a530da0bea23ac7b81a293c81a81ac96701b20ec1c0c830f2e22842245222798608244262a18f48cc6a8ed1fb4b0781a4ea232005701a1070f0e1c080c684483a34ce18808c3e0a3160e0ac6303812832790b72402d50e12bda05114361eb4b0b0b0b0b0b0f82dc00684df12e3c29d1c5509a5442f68dc44d34b
54eaa7d7015dcf2106074cfaf0648090486d08112240a068a2fae56d65d0c2e2a9d055420e0e09c055d763235b0488e02300173e0473d181a3e640ef4ab05ea01ea0824109212584b4435f2c2c2c2c2c2c2c7e1bb001e14b825226d43f07a94466d44c422e188420697b26f5c434479143c99575545550dafa8485c5474387
711c44071d9f2f2e5d3038909243088641300c02e6a7907606a1858585858585c56f0f9653f89b820df32c2cbe243e74bedefb735b02b4b0b0b0b0b0b0f88dc356085f12d8f957a6fec3defb2bd284869a66aa7fcf868c16169f8fd3593aff9539710c60e3f33a3eb31616161616161616bf21d80ae16f1cd601b5b0f89ab0
27cec2c2c2c2c2c2e2f7051b105a58585858585858585858587ca7b001a1858585c5936129d916161616161616bf2fd880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2
e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2
c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2
c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe
53d880d0c2c2c2c2c2c2c2c2c2c2c2e23b850d082d2c2c2c2c2c2c2c2c2c2c2cbe53d880d0c2c2c2c2c2c2e2770ef9feff930ffcda80a99fe3ff473f2c2c2c3e0da713743a5f67674a9ecea1bcef05242cbe006c4068616161616161f1dde1e97ee5d881b5b0b0f87cb07b7e7dcff91a05873610fcb270bff51bb0b0b0b0b0
b0b0b0f8b260a72f92be7076faca192019c08c4f2a21a58084503f241804b8cda35b587c16e4e8079d2c61be824900124c9d457d3619e8ff33c0e665be106c4068616161616161f1bbc7b80e418e2683cb195c0eb89c8171c0e1124c08480c1018e887ecd1a30740ce2c071fd50cad776a61f1144855e293a334cb80013d7a
0c8cce9b640318241c26cdb97439e070c0610c8cd913f7a56003420b0b0b0b0b0b8bdf3fd8a9cae07006cfa19fbe03f82e3038802b24181b20648f5e7468658b86b5f0a40709c0810307000703078784b441a185c507a083415d0fd481600b3a5f1d5a0cac83e43d381be07209df61705dc05767d4e50c8e3ac3d2d2479f1d
3620b4b0b0b0b0b0b0f8dd83810239c601cf61085d86c463487da0f519ba5e22c400676821448d869528458e5c44000302d9c3870f0f1e5c38006029a416164fc429101cd0a2458b0e0dab912347c97334bc84e035b8d32174049240c2f739529f23f680d0a5048ec398a2705bf6e873c2068416161616161616bf6348d383
e470aa0e462ec3c4e7588440d7018e60681810b93ddcb642d71f51f45b6c7b1f424ad4b24182041122440811223c531cb555420b8bfba1fb05070874e850a341850a252a14c8716407ecf90685bb45ef66f0bc0a13bf87170041c2b08ce99c4e028ec8e5f01c866e00183b5726b5f83cd880d0c2c2c2c2c2c2e2f78991a3c8
41d505df61483c8e65e8a049181c0011e7a85c80571dbcba4057ef7080835e0894a2c6549698618e19a61010f45ae067fd84161616ef431a9a688f060d7214c890e180030ed8e3c076289c2d0a6f832ed8c10b722ca2163202a298639e00ab84611172c43e87ef3008298dd88cc5f3c0068416161616161616bf6b8c2b843e
a780701e3ae80583cb80c861285c89d6e930b002adf4d0098972e8910d0d4ab4e83100a03e421f1e7cf870e1a82e42eb9a5a58dcc5584866c080062d0a14d8e3800d36d8e01607b641cd7718bc3d6470801f9708931e412291c41cb388611e33cc428ec4e3f0384367c5659e1d3620b4b0b0b0b0b0b0f87dc38c98a03e24c6
3866a184940c3e97885c86cc0132d6211705ca0168ba1e83d3c2650d1a368081c3931e4284881163c00001090e5871190b8b074015420a085bb42851e18823b66c8b2b768d03bf41efece1b839c2a0401c9748d30e931498c41cd3109804c02ce0885c46b4ef418d88b147eed96003420b0b0b0b0b0b8bdf3df45c332d672f
25078324955107f09884143daab642df08146e878a3760acc3008e001152a498a046874e85833618b4b0f81024040608b4e850a1428e1c7becb1c1067b7603c90f88dd0aaed7c00d1a4ce21eab0498c51ca90f243e90f81ca1cb2071520b5663452d9e013620b4b0b0b0b0b0b0f8dd433b905c49d77b0e43e0028300ba0168
3cc07305b83340382d3aced03006301f356ab468d0a1438f5e0dd2a670d0c2c2e27d303025270393381110e8d1a34387062d1a56a34605f01a1e6f209c16dc19e0b912a152160d3d207001cf21cab790b630f8256003420b0b0b0b0b0b8bdf35742541821c4a48a01d24ea5ea2ea25ea9ea1ee18ba9e410c0ed8e0c3130102
19814b5216f511a89113ee484cc6baa61616f741f70f32f3936677ba70e1c143005fe9f54690b2852724f8008841a2ed05aa0ef05d09974b70c6e03a802bd87b29187b029f073620b4b0b0b0b0b0b0f8fd435230d80b895e00592bb0af05b21a38560c59e9202b5cf47504b74b900c294291c2930bccb1c21c33a448102184
070f0eb871742d2c2c1e060387030e1f1e22849820c51c7334b28623057ae1c11932b85d81aee6c80a09b0019d106884c454005225611c0e08616bf3cf0d1b105a585858585858fc2ea19d46218141028390687b86aa1738d4029b42605f018792a32c399ad287a812f8cd1c4137873bcc11c905667285955c628a296244f0
e1c13121a10d0a2d2c1e0255069952e7f591204683293a74000442e9a01e020c5d00d978e81d8623efd1c80ed5d0a31e043a12f885c3194287a31774a685b481e173c1068416161616161616bf59dc1b8c1947512ac751523038000c12792bb1ab246e0a896d011c0aa02a39781520ac27889b15e26e85645821954b4cb1c0
0c734c314582180102387094ab6b83410b8bfba0fb08990a080304489040408081c1931e6219a21822145d808a3b2831a01635645f21ea816a90e804c0b944e04ac093e884c4a082422961bb799f013620b4b0b0b0b0b0b0f8ddc08858c85315a117402b80a6274732ab25b6a5c44d2e719b71ec738eaef4103731826e86a8
5b63d1bfc6425cfeffd9fbd3e636966c4d177c3de6018191a0b477d6ed6eb3366babffff3beaf32dabaebedde79cccdc1c310331877b7f58ee8e004452a4240e5b5c8f52296d4904010f9fd6f42e8cd514198648902206d5138608b441c8c620c33c45bf763044080070e12154215291209329365d8c65ed412960dfd6d835
7b14b587a0715076125249f88e42e229382083b0ee145aa9d069878f32c6a162d3f0476083906118866198bf2dea3c36a02f8552d1c5b1ea248a5622af2502c7810b814d21b03938d8ec5d6cf72ef6fb00324f103419bc768244ce309673cce525266a8614038408e0eb1f942ecad14186790ec6280ce05be3304288040962
15c3ef3c48a550ca166e9ba36db6c89b1c9594705023101d069ec236107004198179438250958e20764a419e7d57e6f9b041f8c110cff81386613e16566b90450719e65db14db015a03aa06c95158ff11d89ae9370e16057782872076de1014508bf8c20aa11927686544e91a909323546a646c8902151093c7870f50fa17f
005c3fc8304f61d2468d03c508cc78f0e02b0f8e1068558b429638a802a93c20e90ea8540be578805ba2f56ae4418b8ddf412a89161dd6951685aa25ca56a2e9a8278504a78ffe086c107e40f8686198bf3fbc8e19e6ede8af37a324aa3a85432db12a2562af83940e8a4021500255e9a3ce23b84582a44a103403f8ed1893
ee12137581a11a63a00dc10811825e8aa803a7f77d79a533ccf738ad251438b6a110e894448204036418aa021351a25435198a4d0cbfdac3f172d47e818d5ba2682bd450d83412f7458775d9e150530aa9a3d3468fdf97792e6c10be27bad0c116c3aa63ddc3f1cfd8cfc1301f8e6f33d48e6bb7b77e79f532ccdb42eb50a1
5540db29ec1b855521e143a26924721f88940b514568f30c413542d08ce0b623447282b1bcc04c5d6088b14e138dbe4911652390615e4e7fddf4d3ad03f8881061a006a850a3410b098550fa28db04aad900d516ed61830d1454dda080c2b695585512ab4262df48549d42a085669897c306e147401d7fe95f2cd197d3e5f3
87613e2666adaa6fc52c943a35121986795d946e2fd1760a55aba02a095708c84e22af24f6aec2000ee23a44588e10951788eb19e27686819c60a426986082118648912242681bd1f723830cc3fc38c61874e1da7ac214037490104ac0838f54c638b4298a3a412102944a612f6b14658e3d806d2bb16dc828dc570a75abe0
4865cf5ee665b041f84e988ba30415be77e6a7a49f5217c49bcb24dd26d92a64988f42df6963940ca5043a5ddcdee98be98961c86b98615e1da32a5ab6400d0529259a5a22778183e3600c1f932e41d88c91369798345f3096738cb49a688a1489d6130d10b0780cc3bc02c7da42d39f5069e1990009120cd5009b2ec5ba09
b1520e8aaec1ae3960e9eeb081c04e2a1c3a895dab90370aaa037c4919026c0fbe1c3608df1a130dec5d1e8d1476d128042ea92695563949f59493789233cc47c0f63703ade1564b60977aed02402d15ca565a696ca94e0f2abe5e32ccafc744e3a5146821a09403d1b9108e0fe50410224480184399c1eb2648e505a6f212
73f9056335458a14010204f0e1c187c76aa20cf36a983a420f3e6208db9a2245825425085500d10ad4b2c3ba2dd0d65be4ce1e7b54d8ab1607a95048895a02420a480928253825e7076083f01d30e9648d54281ae0504b6c2b815529d149a068153695c4be26a9ecba5390fa4209f03c6798f7e37829944a3b743a72e2ec6a
894dd5410820f2041aa9d7712351b66430760a70781d33cceba2040007427a10ca8123037822868f04811822c414b19a62a026c8d4044335c15051d3f918b1d5123569a26c0c32cceb41a9d864183a3a8534543e5ce142ca0e95a8acfa68dced108a123e143ce5c2430147b910aa86500e8472f4fa675e0a1b846f89a2794a
51058a00e68dc2a654887dc07304f68183aa55b8cf3b2a94ada80ea2eda59e310cf37e98cba171eac84e625f2bacca0e91eba0ea1442970c42524093d837b4de5b499b2e2f6386f9b51cd714a980baca253118e56020520c9161840c638c31c30c535c628cd9899aa86938df178f61111986793d8e69a342ffbf800b071d1c
28a5508b140335c45015188b020714a82001f87011c1c50e0a1ea0724828320eb9ffd30fc106e11b6304275a09481d55f04b0197daa720f11dd49dc2baecb02c24b69544d12a349dae29d42fc2539d61de1e5a774ad70d524a77d32aecaa0e8b9cae9187c681ef0a74928cc455d9615f533f34d58bf4330cf3eba1ab20c519
0215224480911a638a29a6827ebdc00c97b8c4545d608491168f2135510f1ef717649837a4bfde4c518580808442a422a44831c20895aad188160a0e3c84f011c3531100171202356ab8f074acf1f43b30dfe7f7350849b105b643a57caf37617e55d430572a744aa28684ac3b28d1a15340d50aec2b17a127d04a605f4bec
2a894da970a801d94a129b9152bf9279c50f2c6edfef0efa41df22f38ef4a76e5f62b7bf6e3f0ca66ad0ac6389161275d3a1111da4e82000548d42ec0b788e80940abb861c3bbb52a0ad3bb8ad4424a5ae25ecafdf77fcb0ea919f0cf310e7f3e45dced6f33744bff62f93ae15aa4831c1045f70894b35c7052e7081192e30
c314136b10863d35d10f8fd91f79ad324fd13f5ffbe7ea079e33c63874e0c083abeb0953b4e8a00038ca458808b1967d0a104041a1460b00707594f178473e1f08f3eb1b1889e736c807bf0fff9e06a17ae0bf3fc003306fa35340d329548d420d89b253d8d7c0aae8746401a8b44045d100652de076a43e7afc281fe0033d
eb13ff4dde2af3fe9c1b881f8cd3d5a76cda77514b54aa432b15f69542e0028e10900a285b89432351350e442311755247fad593dfe94d3d9a6c0832bf192452e1c2838b2132cc71813ff107fec0577cc517cc30c318430c30b06aa27e2f32f8e1e175ca3c97c71caf1f1caa0276e0c347821802800f1f316264c83040aaeb
7d3db46891a3408b56d721f6d7f13b7fd887c6ff83f2fb198442000e00577f3a5f00810202008dfe37afee0014f657a135941c38ba4c9d8e2947f850ae8706a08861ab504841fd9240aa85ad14543be8d2a2f0940f5779f074c9fb6993dcfe4fe05d675dab7ff505e0097a160e386acf9c423bfe71bdfa0002416b55a8a377
cdfcdb777b9b0fad621f8ef0211c1fd2f151014027502b076e2b200400053452a0960e241cf82ead7b57fa676bf85cb4a2bfa65f711d1b8f65a07f9af5ca6b95798af335eb0ba0d2f3f44d6f14c775d25f9d3e7c840811a3850307238c30c3145f71893ff18735080748112280af7f7870213e7a74b0835eb382c69ecf57e6
290400477c7b1756a07bda872eb5a3f54d3d0a23b8365a98e8883ed5fa4a74c85160832d1ad49050081052fd305c38765d8bb3fbf22b628e6d07b446cdf9eae343afd7dfcb2034174c1f40248054000305947ae41bbcf202e8d71d1c8f280f1e7c04881021468c1403a4220304d089161012c25180360615e83eec29c05102
423a8854821403248a6a1d02847429d593fd7c9abf6bbfb31674d91c0a200510ea43eb436f3ecc9ba2e7827001e503221250a90032d03a6dc5d1207ca739735ccd94bce2c10709d6c748902015031428218542e734708580231cfb7e95021ca5e02b05a15c042a42a232a46a8004661d073a4dcded1986e692fbcaebd8782b
030099000600120021e864e0b5ca9ce30070f50527d667ec501ccf5ef7edde8ab9dc1937ab396313d05929f4aa1d6384c9d98f3146564dd49cd3ce5b5d167f06b32726000642af577dd1fca0974ce69d3053d9031081ee62995eab15c8b960fedd0745e89351e8dff908f4ddd743870e252a1c9063850dc618a346830e1229
1224481022828f8082303dc3f0cd0c4257ff8cf4f91a8be3f9fa01d7ebef63109a67ec800eab8100c60238686f7d2280463fa5577302f623838e3daa028488f52135c21813ecd1a0438c18ad68a99b99a0ab9f10c73e4a00f55271e0225231a698628c31320cf5643f350ad19bece2bd238412c04800136d1406381a850c03
e80883206350af5771e19027a48596d5d5fff68d33288d31267a4e1d8a3aa4c830c4181394a8a1008422428b064208b867913e05128372e0225421061860a2eb9606c810233971eee001a3f0d5a28426faea0b600860aaf7cc545f3079ad32e73802f0155d6c32014c05c4a5364cdec020ec27530b1b1324574d8c18036418
610c0965d3c9a698618c09861821438654a79a8508bf5113053ef8b43711c25800334167ec006414b2138739c7d106885eaba80011433b5df13770d21fc32b421f589e365b52a41820c3503b7ca6d8a28342870e09627dc60e10e93ac3871dafafe472ed47085dfd0ccc7a4d4ca450bc41b6e2cbf87d0c42e0181d4cf5e4ff
43008e030c155000685fd720ec1f28c7832a40a4120c31c24c14a8d0420148902047810e1d244828a67f1c297d1d3557d210212618e31273cc31c7488d9120452042b8f021be310adfd9205420a3fc4f0762e2d001c65e4cc6204097477358cd04c49f024a3ac0541b84ea7d0c42d1fbd5b1d7cd0809528cd4081798a3111d
7c041860881c07b4fa743dd73633d5822e1c0408ed41f545cd31c30c991821410a1f011c7810d628ecbf935736083d7da99c08e0ab43466128c83bc53006136dd0c6a0980ba8ff2600e100b93aaee9577e0bc7df2b9b204a754523cc70811612311254a8e1c1c50c53cc31c718130c9021d24e189f72d3bf79dd0f8d49210a
05702120fed0779d01d0fb38cc67a63f075c9001722180ffe600a1040a1d1cf900e518cffd2864bed1e6e2402280428c04036418a3d4ad281a8488d0a1438408230c31c305320c11217ee08c7dc57b72df20747446c558005fb551186b078e233ed4f8ff3e06a1890e86809808a8ff9b80f05de00f4587950991bfc1e00bed
77f420104161040909c04388018698e3123bec5091d6288ebaa1a7a69cf1599ac2da01128c30d27d942618638a18297c845a6af783d44098432b062d80ffa6a33f9178d39422e6034315e2e4349801a21550be0b71a980427d083534ea8d04f8504820b5739ee4ae4798608b2d0e38a044854e6f2ee29bd7201c085bdb9420
c11843ad7148918b18293c7b60bda1e43d59ab945234d097cb3f0544860fe7bd64de190120004406a82f02900e4408e01ffa7c7dd36883599b2162281d19001c781861821c395ab470e122c340eb8a4e75e3f9141e221d91ff9b719ee67d2180b980b8d097ccbfe147625e115fdf87ff1f0e8407602b801a74177e7775e097
d1df5a7c3888a130d607988b002932ecb08744a78568128c3122c72bc688f45dd9b177e5377ad30ec8d24a05f0453b7186a033f783ad57a1d46fd2eadc6c940d808302760aea00a054f46726d5e21539faf3e94707890e2d2ad42851a244a57f2d51a3d632bae7b2b8a7af78cc847511e80b65a44577a9896e085f87c29d8f
12ff3753caa3745131d6e945118e45f01fe06d32ef8859abb5024ad09add03aad0ebf55dd5468f49a30a0a2d3a346850a346890a050abd9a6b3468d0a2fd8e6ae8b112d1885e44081123d23f421db120a199fe57bd0926f2130088b43138d4a9a36c14320605ba4c563ae366afa0f60ac841d2d90278fd39ab7abfa3f4b016
9d5e9b250a94a850a14103090901a1eb7e137b5e86367dcc79e4953f3acaa6028a58a7eb2667f5fa0c03d059ba53c05a41edd4a931f83799f00fed2812120dda9333b940811ab576e4baf0e1e973363ee931ea9ea48cbec19bef699b8854df85cd5afd605973bf8f4168e8f75b9138ad437a87b702281b0154bd68a0c2f7a4
e7bfc554261effbf5ffff081e8a7f9393d1534a7f7e70c73de7750e2344df483d0eff9795cc3a791fde722ce7e9cd730bdebd230ebd5d482b131c89cf3d09a3567ec3b4cded3b5797ac21afaebec839e983f8659af7db5665eb34c1fb356ad11f8f1ced71ffd58b6b7f723e7f1a93ab8e8fdc93bd13f5f3fe87df8f7330819
86611886611886619867c1fe248661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d42866118866118866198
4f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886
611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d82064
1886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3
496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc330
0cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840c
c3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e
296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886
611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693e2555505010010d0bf791642886f7e9a3f7f4b9452f65729a5fd73c7714eded78fbc5effa7792dc7719efc9ce75fd7ffdaf3b17a8d3138ff6978e83d3cf77d3cf7359ff31a524a4029a0375f5e735cbe3726fdf7f0bd67fb5e7cf319a4840200
8567ad59f1c858bfc7e77ce8399cbfb79f199b875eefa9d73473f2e46bf55ee8380e0def2b8fd343ebb7ff19ccbc7cc96b99cff4d0fe635efb39630aa5f45ca335fba3fbea73dffb6bed616f497fafeb9f49cfe5a39cade79fc560e6c04bdfd3f7ced6ef3d53fbf55242fee0dcfe993178725ed26fe00801f18273e4b1d715
2f586b8fbdaff3d7796dcedfc3439fe52363d6ebf979f01c1edb9bdee33efca377d7e7bede4367c143af797e37b7f30102c279dbfb567f1ffb997de3fc750c2f79eefdb1ecbf9ff3f5fedae3d2fffe667ff7fef95ffff58c2f15477b51bf71dff3e1073e8220401004f07d1f9ee7bdcb02e8ba0e5555a12c4bb46d0bcff310
4511c23084ebbacf5e98e6b5daa645d334a8eb1a755d434a09dff710c531c23084e7790f6e70663369db167555a1ac2ab46d0bd775118621c22080e779705d9716c32f182b33b1baae43dbb6a8aa0a5559a2aa6b746d6b279be7f908c2006110d273f303b89efbddcba6941275dda0ae2bd4758daeeba0a484701c04be8f28
8e1104015cd77df633aaeb1a00e0b92e3cdf47e0fbf0f51cfa55f3e7e459d435cab2445555e8da16522a4000aeeb22f0f51c0e433b8f3fd2c1a59442db34a8ea1a7555d95fdbb6a5456c2e237d68a1d226231c38ae03cff3100621c2883ea7eb79705e686cfc92cfa29f47d3347633728480e7fb08c3f0d9e3df9ff7755da3
2c4ad44d0d287aae9eef21f00304e1e3cf544a89a6695055159aa641d77580021c47c037ef27085efd3263d76fd7a1a96b5455a5f71c1ff133d657fff39cef03fdfd270843f89e6fd7fd6387b8790db30736750da9147cefb8079a3dec57ae573337ea8af69aba69f41e46cfc4f53c044180288c1084677be907c0ccc9b66d
519625f2bca067d0b5fa2205e8ffebf1f0d91a04b427067e003ff820676bd3c0f53c3acb5e3807cca5c3ce2bbd97755d07cff3109f9dade7cfd47c7dfffd344d03d7711004a19d0f8f9dcd3f8a3947bab64355ebf3abbfff42c0f55c7b0feadf87bef71eec78d40dea86f6c4b66d01004110208e634451f4ddcf436734ed1b
e6be2200382ebdaf509f6dafbd4ebaaeb39fa16d5bbb9ffabe87308adee43dfccc7b2f8a02fbfd1e459e9f9c4f4a1b40df9eb3f4678ee3c0f53cf8fa2e61d6477fdf7e2ba3c7cca9b22c5116c5f13eace7d24bd687d9cbcc39d09f5fbeef234912c471fce06bdaf7d275689b066559a2280a746d07dff7102709e22886e73f
bcde7ff5b8987da3280a344d03c771ec5a7deebe615fa72c91e739aaba86528aee1b9e873008ec3c7fec75cc7ed2e831c9f55cf35cd73e23634bbde6bdc39e534581439ea32a2bda8bffe7fff93f6d94419c440945efff41935f008e70e0f91ea228c66090221d0c30180c90a629e2387e53af48ff80d86e37582d5728cb12
511c633a99408c4608c3f0c50ba0280ae4798edd6e87dd6e87b66d10c70926d30946a3917d68fdd7554a41ea0db12c4b6cb75bac371b546589200c311a0e311c0ec980d25ec45f314a76d1d6358aa2a0efbb5e63bfdf9301d475701d9a6c599621cb327a66698ac889beeb91edba0e655960bbdde1a05f932e990e06830126
d3e9931703b331344d83dd6e87d57289c3e1000008a308491cdb39e4baeeb32ebecf1993fea2db6eb758afd6d8ed7628cb125ddb420881200c90a4290683811d1b21c487320a9552a8ea1abbdd0edbed163bfd332f0a745da79f9f89649d7e6dffa08aa318836c80d168842ccbece1f096eb552985aaaab0dfed68236c1b28
a9e07a1e9224c170387cd11c30737fbfdf63b55c617fd84349053fd09f7730c0703484e77a10eec306615996d86c36381c0e68ea06500a9ee72149538c464338ae0be108885fb25a1ffe0cd6a82d4becf59ed3b42dd224c17436b386cff75ec75c068aa2c076b3c16ab5425194088200c3d110c36c8824491046217c3f78d0
1fa59442d33428f21c799e63bfdfe37038a06b3bc4c9710f0cc310007ed9a1659ec56eb7c37eb7c37ebfc77e7f405555504ac275c910c9b20146a3b1dd4bc3e063440afb1edfbaaeb1d96c70777787f56a8daa2af5e512dabb0ea03fa3ccd9ea38d6384af5be94a603a483b73f5bfbf372b7ddd25c2a0b846184f1788c6196
d11c78c1c5e56828e7d86eb7d86e36a8eb1a711c63329d623c1a218a63bbff9e5c30a544d7b628abaa37b70bf87e60f7ee38892120e004bfe67269d754d31ecf91f50adbddce5eb6851008c3909e977e1f59963d2bbaa794425dd7768de5871c45514041613018e0623623a7e513174cf39cf23cc77abdc661bfb7ef2b0802
0c06038cc6637bc17ccdf9d2340d72bd6f90e14c8edf344ddee43dfc0c5dd761b7dbe1eaaf2bdcdfdf213fe468db065d2fa3c9466e80930c27cff51046219224d167ce08a3d10883c1e0d9cebc5f41ffceb35eadb15c2e5016741f9ecd66184fc62f320a8d333a3f1cb0dfefb1d96cb0dd6ed1b42d06698a8bf91cd3e9f451
a3b06d5b945589fc407373b55ca1aa4a24498af9fc02984c1083d6bb7ac5ac934eefc9dbed16cbe512f9e100cff7910d0618649975bc0441f0d40b01fabeb1dbef707f778fed766b8de3288e31cc328cc7630a423d70bfef9f0f455160b95ce2fefe1ef9e180288a30994e31994c90a629003cfd7e7ed198acd66bdcddde61
b359a3aa6a78fffb7fff6f1bae745d178eebc011679b99381e5fe6c24c06064d7e3ab429121545d18ba2723f4adfbb7f381c707fbfc0cdf535f23cc7703884ef9117c2186ee6fd7df7753b6937b6f57a8dc5fd3dcab2443a48a1943c0973f70d0729256a7d91daedf7582e16582c16288a02699ac2751c1b01519ef7cb1eac
996087fd1e5b7d702fee69b2966589ae93705d17711ce3301ca2280a4c9a467b10c94b629ef963dfc35c10379b0df67b32aa8410184f26d66b2f84f8e6b9f70db3a228b0d96c70737b8bcd7a0dd775916519e4780cd7f31047112dba5f342ee619ee763b5a7877f758afd7e4a5ea3a38da204cd314c3e110755d4300f633bc
c51c7ef667a96bec773b2c160b2ceeefb15c2cb0dfef21255d945dcf3da62df5107a4d9b48d36834b691b04c6f84c6d3ff9aefdffc5a5515f6fb3d168b05b6db2d8db91008a308b2eb104511e2387ed16b92c3a2c466bbc17ab542d39047344912d4750d4fcfcfd00d4fbed6ac9bbd5eabebf51a6dd3c2711d4411bd87388e
114bf9ecd4dc1f191be3d0daeff7d8ed7658af5658add7689b06e3c904514c86adeffbcf7ebdbaaeb1dbef717f7f8fdd768720087474bca3e88123b413e7db7d484aa91d6c5b6c361b6cd61becf63b4829c9108ce8f2eb07017e76d6986761c6e0b0df63b55c62b95c62bbdd62bfdbdb68a9ebba88a20887d1084d43d187a1
ec203040e8bcee1c7e09b277f9b8bebec6cdf5358aa200d42369cce2e88835678a75de0c47184fdee76c35d1dac3e180c562899b9b6b1c0e070c060338422032d1bc17386ffad18bed6683dbdb5be4798e24496c544b290524c9c9e5524a89467fdd61bfc772b9c4eded1df2fca0f70b7202f9810f19c8679ff5cf1987a66e
901739f6bbbdbec0ddd973a46d5a08870cc2c16080519ea3d1d92f8ee37cf7799143ab435556d8eff658af57d86c3668db0ee3c9189eeb2208439de1e37de38036635a551576bb1deeefeeb05aafd1b52d8220409224108e83244d5f9c02f912fae7ed6ab5c276b3459e1f5057351cd741d34c104691bde87e4464d7e1b03f
e0f6e606fffce73f7520a08582d25140e3f4ee7f1539728cb32a491264c30c176509e8c891795efddfbf0666df374181dbdb5b5c5f5f213fd07dd8f35c4471441139d77db67888311c0e870356ab156e6f6f51962586c3a19d97009d95fdfbb0793ffbdd1e9bf50677f777b8bfbb435556188fc788a30883c1006118bedadc
fc761f5be0faea0adbdd0e5114a1b9b838b9237d6fdf507a9e94053991efefef51d7355cd7a5fb8676de063a08f550d4b47f17bebfbbc35f5757d8ef76e444d2f77493adf6abf6b1c7c6c4ec19fffce73f71777b8ba228e0fdeb5fffa2b48b30a40b501cc3f3fd93a88fd9a8fb1b105db6e9d2901f0e909db41fda44d05e0b
6364e48703369b2d96ab25aeafae717d7da553036b8cc6634c75cae44b065608ca6f064007fb6e87ed6683439edb8d5d49698d0663204ad9a12c0aac562b2cf5a566bd5ea36d5b388e43d11cc7d111875fe7c16c9a06fbfd1ef7776428ac376becb65b3ab0da0e42005de71e2f5d794e063c14842390a6291974deb787d679
2eb39412795e60b55ca269c9188fc210b14e6b31293f7d6cc462bbc5624146fb66bd264fb0e7438ed4b1eee217a6f9180fcc72b1c072b9c46a75ea3d751c471bba858da602644429a51085b4797e0883b06970c873f28c2f97582c16381c0e10c241922436ad487f854d4a533a3d562989dd6e8f3c2f6c2a49359b613a9dc2
757e6deadf43d8c361bfc7fddd1dfefdef7f63b95c424a89288a301c0e110601daa679d6e1208438a9038022478ef91e4dd322f07d34758d300c11c5914deb00cc45af467e3860bd5ae1e6e606abe51210c27a75215eb70ec478e9aaaac276b3c5fdfd1d168b0596cb15b6db8dfd77171717cfae43ebd72174fae0da6eb710
42a0691a34758dae6b6d8adbf95a258f708bc39e1c6cf7f777d8ed76a8abda3a9594a471777f512da1399cf6faa27f737383fbfb7b14394560fa750e755ddb14a67eeaf95329b06f49dfe8c90f072c174bdcdedca2aa2a9b826c22e08eeb7e7bb6aae3d9badd6db15953e4baeb3a00ea4dce5613753751bcf56a85abeb6b5c
ff7585bcc8319b4e31180cc859f140cdda53d8f909d8736bbd5edb8c11337e8ee358472e708c1eafd76bac572bdcdddd6171bfd0ce0285f1b8b3e9efbf6abd9a71381c0ef63c5fad56fafdea73046428746d679f1b39c7c9c85752da88e7e3630208474041a12c4b1bf9acab0a614069de500a71927c132934ce0763885d5f
5f63b958c2711d9bc9248057ddc3faf365b95ce2eaea0a8bfb054a1de98c23fafc4d3dfda17adab7422a85aa2ab1d151a4fd7e0fc7113a9dd087ebb867469da23a56a9d0b40d9dd10772ead5754de787be4ba469faaafb93b90feff77b1b10b8babac2d55f57769f1c4fc698369491f312c77bff9e6b22d1c699ebebd21373
16f7efc35dd7d1da59901365b95c62bbd9daf9a2d0ab9b7b85b1e967fb6db75bacf4dcfcebafbfb0dfef31cc86087c8aa09b73e63b0301711629ee3a89fc90a3aa697fefda0e711c2349d307d350fbfbd8e2fe1e7777f7582e96a8ca129ee7d9bdcf7dc098fc95f3c4dec7ef17f8d73fff85fffacfffc4edcd0df23c87777b
7b8bc0f731c83278be87d44d11863ab7d6f5b4f1a26c1e7dd398c97f40b5ace0baaeddd05dd7b113e3b56a1e6c9a685961b3d9e0fafa1ad7d737b8faeb2fdcdcde9001261ce47ffef9bc077d86e33a3a179cbc1d755d61b7df6b2faf2906058220b4e17705a0695aec0f07dcdddde1e6e6069bcd06a57ed026cf38f07df8da
d8fed9b1e9471736eb0daeaeae7073738dfc9093b755009e47357a8e706c1462bda614265357663c198fbd2793c664a29b5dd791f77ebf43db3448d3144992d8cda07fc9eca7c4ac964bdcdfdde1eef616dbed16e3f104f3f99c6af8c2e0977ad04c1ae1edcd0daeafafb1dd6c50981c69d7b5dfaf2c4becb63b3d26351ce7
98aee80807aef7fe5107a51479c7757dc34ea7d3154549f3cff7ed0604d001a570acaf2b8a024551a26df6f6eb77bb1daaaaa2bcf5880c5ff7171ae47d4e22717a53fe8fffdf7fe0fefe1eaeeb623299c0755c8c4623749d7cf661650e13c7a114763ff0e1382eaaaac27ab5d6f50b2da52367146133a99f9d3e2836db2dee
efef717d758dd56a651d624110208c425bdff01a8795354af31c8be502fffad7bf707d7585d56a4da9794180248e515715d4730d42bd8e3d8f9ea7597f7555a328a886432a695312fbd913c0d1a8260ff30daeafae5196a58de69b35f1ab6af7acb3e370c066bdc6dddd1daefefa0b8bc51280421c2708c3d01e644dd360b3
dde27038505a6d532308fc475396de9a93b4ddb2c476bbc17abd42d749645946e9badafbeb7967676b7776b696c7b355810c0f0807aef37a676bff4cd96eb7b8b9b9c1cdf535fefaeb2fdc5c5fa3aee94279f9e50b5a5d63f55cccbdc0d7f5e28ee358c3b9c8733b060a544a10e9670ac01a66f777f7b8bdbdc572b9c06ebb
0304900e529be962d2f37ec5d9fa4da4f7e6465ff68f116b63e0575585dd7687ed668baaac286d553b959d279e9789b00481890880d2eb562b3475ad7510c80874f4d8f53977b65e5f5f63b158204d520cd2817542bce67c31ce99cd6683db9b5bfce77ffc276e6e6ed0360da238c2643c41361ca26d9fe7ec7b2fe8b3b428
f21c87c3c1a632c7518c384990e8c88db91f4875acd7ae2b3adfb6db1dd6eb0daaba3a66dce93bd16ba5fff52ff9ebf51a577f5d6963f02fdcdedea2d33584a6c444bdd089e37954ff69b2ed9452b67ed7f33c4a9c510a41cfe1a5f4dad9ed76748e5cdfe07038404a89388aa8365ad7d9be460df8799ae8cd35ed63fffeeb
dff64cab2fc8486eea9a44fa9ee388d6f70dbf57dfbbd9acb1dd6cc8d6900ad968886c38b4d1d2fe67ebba0ef921c7e29ed6eafdfd3d0efbbd368e1dbb5efbda27bf729e587b61b3c1edcd0dfefaeb0afff91fff81fffaafffc2dded2df2a280b7dd6c287f36a44d3a8e63aacfd09e1dd775a01445c0a818bcb639e287fd1e
4dd3402989244990242979e4b5a04bdfc3f752fa8371923aa237a0dd7647a92cda18bcbabac262b100008c4623547ae37ea907d3e4ec07b628d8839212455d63b55a598196c16040350b42d888d4568791efeeee5014852d5c35c5c67e2f9f5cea28a399c02f191373701f6be4a85ee5f6e6165dd7214e625bd3196a2fe166
bdc1561ba9420824498a447b2fcdfb7b08474f5493cee7791e1dd0790ec771b05c2c31180ce0f93e09c4f4220f269d6fbbd9908775b92263a4a46763369b20084f2ea62fd9b4fa63629e45ad532cefefef717b7383a228ed019e2409d2416a9fc376bb457ea0e8af49a1f43d1f5118218aa317cfdbd7a0eb3a54bac6ac2c2b
d47563c72f4d534c26139b6260d69a52340e8ee3e8fab4caaed922cfe13a0ec6a331c6e389ad073b4ff77d2ee76bb59f96695201d7ab15eeefee707d7d8dababbfb0b85fd8cbca48a7014aa39efa82ef6bd62b197314292d8b823637cfc372baa43a423d278d23c0780d970b8ae4ef773bebd5eb17779fa768bd94f3287bff
d26dd2d2efefee707d7585bffefd17b6db2ddab6453a486d01fc73bfafa32f98e6d26dc4839ac3017991a3aa4a78be473560c3117cfd6fd15b3787c301dbcd068b7b4a799752520abeefd39ed87368fdf098e828914d97ddedb05aadb05a2eb15aafb1dbef10ebcbf0703884d49790a22850f4ea1a3dd7c5783cc6683cb6fb
d847300a3b2d0e646ad18da329d6e9bf266af4cdd95a1fcfd6fd618f46aff3388e912409823040149130d46b9cad468c68b7db61b958e0e6e606575757b8bebac2dddd1da4a4da36aa4d972f7efefdcb711004f0b5a1525515d6eb359452f07d9feadc75544529658d9efb7b320877bb1dbab6a535eaf908f5796d0c9f9f3d
5b4d74a1aa2a6c775bdcdddde2e6fada467aa338b2f562aee3526df76e87fc9003c089d11f4594a1f0d0a5d7188461149e447eabba86da516a7d1885f6ec3229a8c071edd834f3e50aebf50687fdc10ac699f3df75dd1f3a5bcfc7e67c8c4c8ae24e9733d07cf90b3737378002657e8421eaa646f703ca9d6f894db76f4848
50294535985986a1d67f30f71f055ab36ddba16968cf6cbbf624da9dc489351a06690a99a62777bf1fe1fc39983ba049415cdc2fb4017685db9b1b2c964b0800e3c94467877427f3e07bfba49d9f267b503bb4cc9d62bd5e0380bd87c4716cb5340ebae690ce917b749d449a24889304699a9ed432fee839d27f9ffd7dac5f
86b15aae707777abd3f76f70777787b66d1186a1155291ba3ef039efc1755d844188341d60303860b90cd0d4149df5fd00ebd50ae3f1d80a28998c10930db4dbd3de6a6a10dbb645144774bfd67653fffefc2367d943997da6bc6ebbdd62b958e2e6e616d75757b8b9bea68c8be5126551c0336a59260f7632996032992049
538481b6f8410f9952bf1a1cf67b0821e8c2b2ddd8437db359234d130cf4866e1619a94da9675ff6fa32b9e6f752d7521df6070ab92e16b8bdbdc5eded2d562b32340a7d09ec3af96cabff9c7e446c3018603c1e535da01624592e9724d230cc1046216a7d38eef73b9b5ab2d96c2084c06834c2783cc1683c46aca368e601
f58dd5677927001b5aef87c30f870376fb3df6fb1df22247e0535ddcece2c28a872829e13a2e8a22d70a608dbd8405da484a7aefeffc59d02539ea091da414216c3bac376b8437a14d19eda72fd67a5edcdfdfe3eef60efbfd0e42384807030c874332aa7bb9e75dd741764652fc6569727dd54953c74907f51e8e10180e33
8c27130c8743a4694a9fcbf75157358c00a0a9618aa208d9304326b317cf9f5f8e4927d3eb482aaa010b8200e96080d96c8a2f5fbe20d435989decec9c6aea1a693a40108408831556ab15f63a6d763018607fd8a3ae2b344d744cc18478f1f8f7d7ab7916c65961d258ee6eef707b738ddb9b1b6c3754df4a5102aa692463
f0c7d66b1804c8060394a311369b0dc22842519628cb02cbe502714c6ba0eb3a846188fd6ea76b2caeb15aafd0b62d02230ca1058ee2382667905e6b2f6e21d053a073ced66da5c55396ab15eeefeeb5336b693311a49408c2e0e8d17de67330e3e1791e9238c17034c2213fa0d6ea6a755d235e4558af5624e0e3b9489304
8eeb52cad16e6f6b18cd7e679c28a3f108d930b3354d7d89f6e7eeedfdf72884b07bd85a8b84ecf77bc8ae43a82f62d3e90c93e9044238560170b95c58e390f6bd3df23cb707f0bb8a56e841b08a98ba66330802a4299dada3f1c83a4ebf395b9bded99a17d8361b7b89d8acd754ef9c0dedd9f1abced6f3482dd5e8dde2f6
e606cbc512dbed0e455ed8b4b17347eb734b32fa0661aad34e8ba2c06abd465950ba641886188d4688e39852ef94c241a7232e16f758ad96909d449c9050c9683c42d28b764ba5a0bae31ef86c674a6f8d1ae78871a06d3764f0398e836c98613a9d5ad110e138f0031f555d51768692361b220843ba0b0d06dfa4679b6741
17ccc03a0bb22cc37eb743d336d86e37705cba5426299dd1e6126dd334f53d68b3d9d0da0943a48301b201ddc1227d81377598ea05fb58ff62692eb700acb1dcd759b8bda50be67ab5469117705dc72a8e4aad4cfed151ea782f330e9ce16888e9748af17882419ac2f37dbd66b55a644b6bd64477cd5971c80fd86c36c8b2
21cae994c4fd5cd72ab01ad5e1efaddcbefa70bf8ccb9cef3b7dbe92f3fb168b7b8a9ee74581a6ae6d4ae74bee9a7d4cfa76a46bfe267acd6e361babc710f88136fe2384213931c9f058d0bfcb0b3b2f67b319269331e23886e3ba905241760da47130e1796b9614d4854dbd374e4ab32e369b0d968b25eeee6ead7ec461bf
47559690fa9e2495b46d349ebf7f3a08c200836c80b22c916519c228a2ac8eaac26ab542aa05128d7396f413288abc596f6c3959d7b5245639996032192349529b51d836cdd189f28c79427345dfc15ce7e42c6c75c991b19beeeeee7077774767eee1a06d18dad7bd53d189112ee6735c1863228c6cda9ced57d175d8eff7
f07c0f6555424ab2628dd77d381ca22a2b9b63df340deaa639f64e7bce24142431de57d73be6dfaef0d75f64d92e964b6cd66be4796e6bc35cd785f783757a6603346d2b46e311fef8e30f082170737d8ddbbb3b6c361bf2626aaf791886942eaa451c36eb0daab2c220a3c5f3c71f5f71319f93b08ceb5a4facd9389e7b68
19c113ba44c08ae9ec777be43ac5484985288e309bcdf0dffef10f8cc663846188ae6de1fb01c9f2e378115b2d5788a208e3d10872347af41b1be5bb76d8623a9de0627ea13d633976db1d9454701c0783c1a96737d71b074dc05bd4756d455cbe7cfd8ac964a22fdeae5573934abee8f27d5ac7a9a3835a15cba47e645986
8b8b0bfce31fff0da3315d36c8f39e4000f083c0ca08afd66b2469828bf9f36bb75e9fe376e0e90276cff330998c7179f9057ffee3cfa377aef79e1b7dc11c8d46b81f0c0090d16b52ee8abc4065da0a4849752ffab03386e5f770443f75d387af37b44aab012e964bdcdddee2faea1ab777b7582c9636a5865232dd9f126c
21474484e170042915f2bcc076b3b51791d572652fbc522aa46982f57a8d7ffffbdfb8b9be4151921369a8f7bee9746633245cd7b1636164d45f12713022217d8787f15cdedddfe3ea2f4af35e2e96d8ef76d6237834227f6c0ff33c0fe98094dc94d20abffb1da5b56d77582c977468e9fd3508027b21bfbbbfc77ab5ea65
1290d2e9e5e5174c26132b024097bd066ddb3d6f6fd7e229668f765dd74624d72b725694554597e8c100171773fcf1e71f98cd66705d8f525db61b388ec0e140752c5555e270a088a15913efd19ec160ba4a1879275383144724e8349fcf319d4d31d08ebafed97672b67a1e0982c90e0202555961bbdb61b8dfa1acca9f3a
5b8d2aa2e77bf612d5af6d315e6373b61e0e07344d03007426bbeea30264dffbbe34268e76a80ef1f5eb57fa73e1e0babab286948948c74902e8736471774f0ad5fb3de224c1783cc61f7f7cc5e5e517645976bc48f5ced6976408b9ae4b69f3c04904ff70c86d6d609665984c26f8c73ffe71a20698e8bdd7f33c3a8bf5c5
308a224c6753fb7e1e725698f597a629c693312ebf5ca26d5b2c974b1cf29c84b15c4aa91f662496e7f97e2f25ef0ed7d737d8ef77765c2f2f699e65c3216508e91a62eb44901d9e3361cc1ee6eaf650e6199a73c5888cd03e7683a58e32387a8e7d5445d1273ef031b539f0910e52d2a298cd309bce9065195df0713c67a5
94b69ebfaaca63ad73d362bfdbe370382ab303746fabaaeac4007af0591c35a7ecd91a043e5c3dae4a4a146589f56a85bffefd6f726eae56d86d7768b468a0e7512985efffd8b3b06b56cfd1d168842f5fbfdab77b734da551bee76be11a6a9750562576ba46ed7038402985582b9d7ef9fa05d3e9144992c011026ddb505b
b3a6d6c180a311f4f09ba25f8c8de0eb3ddfe89e1835fb9beb6b1a93e58ace8ab242a7dba579667efec03ee66811a92ccbb432ed16cbe5d4b6e3d8ac37340e2e395b4d80c404b28e75c82488359e8cf1c71f7f603ebfc44067ae99fda7aeebefcf138dd263e2fb9ecd4e705d171002555d63abcbeb6eaeafb15caeb0d9acad
f3d9b412728480778c8845485352369be8488ab9ac9b896f3c13499222cf73dcdede62bbd9e8da87166551523f30ddbfaf6d2927db7812acd885320d2a8f1f86c421e8cf6d8a84aee7711cc7e604e7465c63bdd251aad67a31cc4ff727ea49cc26180424676d3e775dd7586f3638e83aace56241fdca3c1f4d4be22424315e
d994cce97486f9fcd21a3e66632e0aea4fd5b4ede922c0f9dd58c0cc0221844d03336936fbdd5ed793157a1c28ed713299e0f20b5de0fcc0a7d423a5c840aa6a7d99aab0d96e31180c50ead0f963e3618cae3449311ed3c586d299c833b95c2e11862166b30b64431a3325a5952a5eeb08aedfbb087cf9f205c3d1086140e9
8ad437ad42d336df5cbebf91efedbd37e385315e5053af96ebde2a524a846180c9648aaf7f7cd5631250eb0c9dfeaa1470af8dfddd768bdd30237100f901525c84b02340b5248eed754411ec1166b3199224b1077effe04ee284bc9a4a51cab34ef7a8aacaf6beaaea1aa2212f5dd775f6193c67fcdd93d61611441c43380e
c955170576dbadf5b01b0faaeb7af05c8f847bcc05fe07eff0b42e8e0214b6e8bda9b1dd6cad5340767421cbb28c2e3237b7582e97705d17e3c904171717985fce319e8c9124097cdfb36238fdfe99e622f0d498d8b1715dc4518c2421a12e130532d1aecd7a8df57a833ccfa14032d302a4ec662e543fb287199555e36c3a
1c0e58dcdfe3b03fa0aa2bab906652c59338b6190e8bfb7bec763b2bf8331ad1fc9a6943c6f33cebf9a7bdbe7a746f7f6c4c4ccaa0a90ddb6cb7367de6e898bcc0c57c8ed96c065f5f80a33842a1cf9dfd6ea7db01505a663f65e9bd1027bfa77630c681930e520c47434c265453f5e8d99a9e9eadb536bccb9204a11aedc0
79eed96ade8d7129b98e6b53c04c99c8b992f46ab5a22855d3d0254347f5fafdb1fa93fe252d59cc593d180c28b2e838a8aa1aebf50a87fdc18ab8988c1380ce86e56a895cd71a465184e994ceb8d96c669dadc6d1696a9ccea3994fad594a9f0ee038c2a6ba17798eb22c8e7d41031fa3d10897979798ce66d6b1e8ea3561
8cd0f56a8d46d7d7177961ffee3c95eb1b07f47084f99c0cc2ba69b0dfefb0cd7344518cd56a85d168640d6ad37e63b95860b55a52fd5296d1a5fbf20bc69389cdfae9f75a35f7b2e78c49bfee338e63385a2dbdd5ed3ff6fb8356235e63b7dba2d2591fa6b6fd2388b2bd0423c0637a8186d13135381b66d651019caed930
0c911f0e180e47e420ef4599abaa42533776cf348eeab6699fe5b0a03b8e6bdf8b717c9908a149a7de6cf439a2d3aec32842dbb5d6583291b41fc1d18ecdc160808bf90500a02c285bce6812dc2f1654a32f1cbb27ef777bb41d29de66c32166b3a90d369934e64a67fd99f208baf7c927a504846ed113f4cad322fdb94d9f
c0add68630a25c9e7fec9f0a40abadbefc7c35774eb3f62793292e66339bf553140516f7f7d446623241accfe1cd86dae26d756495eea521ddd52f2f319d4dc9010658a7717e381c4b699e1810d5b39b22ddfe248a6204fa5e64fa40ee763b3d4f684c8cb85c1445546beabaf0e83226743a876b051a829ef1d1a7eb3a5b30
6df275fbf5049d94689adaa628ad7478948c12f9706f5eb31a75ea89a923984ea7c8b2ccaafe29a5e038e4bd49621abc2ee96c81ab7960aee39c1c523f7245301b1b796ea53502cd01bc5aadb49a14d0b5c746ce26f5763a9d6232a67e597172acbd336a5c26e4de340dbab6eba5e83dbc459b1406a30ada761d8abcb0469e
52545316993a392df642e3a1eb57d2940ea9a2a04999e7c88bfc78a97b22f5c75cbcd37480e96c86ba3e4e32a38ab75aad90a4893eb83beb15298ad22a778e27135ccce7d64886802d4a27b96addc3a83936d87d684c14a05b79448893186110c271c928cc0f39350fd646aee7fb88134ac9497404d35c9a07830115846f36
b648dc346196cf4c9b7c55d4a92a583fe5cb18c3669d9e173103249224d04bf1eb3a48d99da49d19274e511428ca02455ed09cf8cef8d3c17994dc1e4f2610e622d74b990ca310c3e11000193db9dea4c3a8a7e47af6399f8bfddcbe63154b2f2e28822d3b89854e5ba14b33d54099fa86baae311c0ead01329d4e91a6037b
e01aa78be93f66d26d01f1c43aa1f1a20b6d80d1788c8bd90506194568a599932ea5616783013c934aa4d39d8ba2e81de03fe6d4328d83dbb6c1783ca6f43c3daff7fb3dee6eefac71d6641936ba9691daec14b6b7daece2828c649d96672eddfbdd1e9bcd5aabba36c7fa4ff5d0fbe95db4b48099912dcf0f071cf607e479
6e2f9fa9dea792b346bd755dd341e707bafe4ea1a91b542579535f12c17d0d1efcce5a6dd0eb09aa3c79b68a63b603a5d0773a85fbd8c2c7a4832dedd95ad3bf79ec4de8b3959a84fb36ed31d3355ec29ead8e6d29a50024498aa6a9e1f9beb5f0ad3aea4f5cf4fbc65ed775d84eb7182fc6280bead768d6a6ebba80023ad9
5947eb4047e92613ea8769ce43237661c6a4d0d1b5f689b3f56824d3de9168254f931a6bce5613dd0bfcc0d6739acbb994a49f30c8320c0e07bbd75455a5eb76ab9308e163e3e6ba2ee284220646ae7fb55cd8b39a6a8defd1348dce4a6ab0d6f5b655595947cae5e525661717b6af6fdb5079c876bbc3feb0b782455dd79d
b4133b9fc542f45a1625baafb3ce183042228e80ee7598a16d3b8441688d6700f0bc5e0df66b2cb857a1e77ceda56af67fea7f609d77e61c6db5da28dd918f4e13331f9abac6fd3d19f0a64734a5192bfb9a478bdc940909047e804c97bc983220d771f5189333c1a4259b28b9ef7b3a0556511bb99f1c15b36687d9105ddb
61b3d960743f4691ebfbf07269dbcf354d8daea573ce38ae67b32946a3b15d6366bd1ef67b2c16c7fb706b8dc2de983cf0843cdf4392a4180e3364434aa337117b3ad7a87d8f231c40006dd3c2f77dbb87fe6884b07fcf0ac310d930c3ec62669bd49be0c77ab5c472b9821f50e9c77241eaf0bbfd0e4290baff683c3ad9c7
7ccf43abf79d7b9dd25916e5b7624067636284047dcfa3bd7d32c57034b4636dc624d4ad681ce16090522db8eb1cd39821043c3a4448f2ba33069e36705aad506426bc51c63b1cc89357e8540af30dad7a98fe50dbcd16fffed7bf70737b83222f6c9d90fd5ce60399b5a00d92388a70319fdb688799ec8ee3d0e6a4e5f29b
961a49575a91cba4be7c2363fb8317cd7eaad7743ac5c57cae9b84934766b95a6a638ed245e224c66838c254d7758d75aeb4efd343e9744ad0dded2daeaf6f74af40ed41ece4831bb499049eef61980d31994ea87641386478e705dab6b1ea47460cc73ff3ce79ae8b300a6dcd9e496d301eac4ea7d899be528f298e463179
3ecc81b9d08de68ba2c07ab582af1d0a5dabfbc3add7ba768b2eebb3e914b3d90cc3d1106110a2ed5a1dc1a05a88f59a2e996551a0ed3aebb53b1f13055251a51454aae788a210aeebd988b54d9bd082377defb649c10dc300b1eecf03ed296f6a4a85fb1029a30f9cd7743954e83a89561bb1c6736922bdc6a031bd188df7
4a2a05d7f5e0fb1e1d2a7a633691deed768bed76a3d3b01f1f7f802e87511822492985abeb3a2a8cd6290ba62ecf715caaa5d0179ba59e33e499f7cdc7fab94b834e6d4e07a94df7adeb1a9bed16e57a6d5375e238a2de5f15a9380e323aace6d64911d98c8022d7bd33b5b8c672b1a068aac03787c9439ef53449f0f58faf
f05c93bae3db7d65900d70292f11c789f6de93f08f499f34aff52327793f12972494f634bf9ca36d5bac572b146589bbe64e6742843642630e21cff731994e30bfbcc4972f5f4e1ad1d7558ddd96fa175deb74d7a22c28b5e56c6fef8f09a5f8b888a218171794821ac7916e8552a0ae6a445168ebb7c33084db4bff341733
cf73b58178dc9bebba268763f7bc34e7d7e2a147d577949ab56a7eba1eed39c7b3b5b1676b7ec85196fa6c755c9b05414a751499f9d73fff859b9b1beb717ee86cedbf0f802e68f3ded90ac0cecb288ead53a76d5a40d0f38ee25b3a5bb550dacfaa111b2fbb1002d96080a9f692374d43bd6e77948e48f59146e930b4354c
5f74f68b11a7304a9fb9be485d5d5dd90b666de6c52367ab394706e900a3319d23617014ce689ac6ae593a57038ab8f41c6fa6476612c7f0f565b7ae6b725434b5cd78794a3950084a451b0e8768db16db1d2987522fe18e52d15c8fd2a3a3084a497b613486da6c36c5e5178a36188779595658afa96c63b95ce85add03da
b6b129dc2763a253d31c97a264511461381aa26da8dec9b498f2b4e3603a99d8d4d8fd6eaf4b11a8fc424a094738efeaa479313de74bd776687554b536a99efa4e60d66cdbb614a1d3513aa3ad601c06742e2b1b41bab92155fc3c7f204ad8cb92ebef7b51446540663c1de1e81a640f693ac0c57c6eb39e0448942808429d
51575827e5cfd08f8cb56d8be9748acbcb39ea9ada26ad371b2c160b7bff30e9cb9329adedcbcb2f180e33eb7031f7acdd6e8ffb7b124434edbf4cadeb714c68660a216c4be020a414d68b8b393ae3b00902047e80288e311a8fb58f59c2d38eccf82ab6f58dfdb5f8a3b3d388e95c5c5ca0ebc836daed7628763b6c365b2c
16f71082dad72d160b6cd61b340db5c24ad204f3f91ce331395b8d83b0d54251b7b7b7b8babac2617f38292fb363d29fb2faef8230c44cd7ab0ae7587a62c4422793893d4300a02a4b04816f33a064d7c13b46f58ea94c26f5a62a4b5b946a0eb15acb96aed76b2b651b048155de8a7a39eb79916b35bf15f23cef89249874
85e303a10b043df444a78a4e27136d2c7580ce1536a950c60004287cddb52dd69b35daae85f3132968fd056052479324a1d4a98b99ed11b4dd6cad27d3711cbb010cb2012e2f2f7131a7d038b538706c84860c6a4a7b5debfa47933fdddf088efb138d57e007e83a69232a8ef6fe9555498693e3c0170e026bf8b827afd137
186dca8196396f7ac21e4ff5843187569665901d798986c3210eba49fa76b7d56940c20a1e347563a39b93c90463e311495240807af898e6bffb9d8e146e4eea421f1c13a5e0f91eeaaa367f8aaeeb6cda40a773f64d71af77266f6c72ae3ddf47e0f79451db165dd79e44d1de35ed457b4bcc3b3087904065c58ed6eb35ea
aaa26269bdc6a494a8ca12ebf5068bc5bd6ead519190489a224d07a456e89a3e5a250e87638aeffeb0a7c6cb8f8d3f1445b9a2c846c6c7e3311ae369d29ecb419651545638368dca78d8dab681ebb927e9e23f83e3d2c6371e8f75547f8b28bab16993f9e1609d0391f65c0e87238c27138cc763db83b0df0680c685c43616
cb05c9ca3f1089351729e1086acfe0baa8eb0ae920455995766ef66ba8c8c338445dd55680474a692340fde7fe52fa0a7114359da36d680fcf7584cf75c84954e9fa6fd32a671445188dc6146d9853b4c1f77debfdaeeb5af7c5a4ac80c7f6f6f33131fb7710500688e308344dad1d302d940aad217b7ee9369fc9d146a1e7
b93abd8f2e6d6ddb7c3825439b3ad63b5b4d0da671489c9eadb55e7feba36043ef6c0da308c2d135e0b9eeafb55a223fe4f6b32b7d9a9ecf1b7356929272803c9fdae7e9f7ce56939269f6bdb2249d80cde6d853f7672f527d2f7ba455cd671717b66ec6a4571967731cc7b8b8b8409aa498cfe7b898cf31d47df6fa4268a6
393af54f5ce3901f5055b575143c768e509fbcc6fe7d1bb5f05ccf1a72fdd2847eeda5790d13590dc2d0d650373a63a8eda5ae4aa51e6d086e8cce344dc9013d99603a9dda547593fab6dd6eadca6c3f8576381a62329d623a9d6298657409d6eba22a4b72226c685cb6db2dd5853ee4d832ce3ebd4fc5710c00188fc7a89b
9ace4deb6ca23bcf5847ea379b0dee17f758afc8a95bd7f571cc3fceb27c14e394b4ad1c4a5ab35114511647d79d0448bab643551f55794d3b27d73551bbf44423c128f4ef75eba873b13263f000ca1aebc6788aa2086559d96c0c08c0f77c0c062984805dbb0050e4399aaa26076645ba113f4bbf74c8dc872f2e2ea8fc49
ab049bbedbbeef6338cc6cddeb7c3ec76c3645d2535a555ad8a5d6d98446d7c0a47bf7c7e4a1f772348853d4d5b19760ff0e608ccf300c4965b5edb0d051f75fd1b3d4185ae3c9049d94381c4819f8b0df534fd1e5d20a30ad757fd1300c319e4c309b5de0e2e242eb1544f6de7a6c47555807cbb918d4f97b36f75472a492
1e80d9db01d8ac45b35798d7a06757e3eeee1e81efa3765d52193575578bfb7bc4518cfc704092a43607952ea13a2d52d7f12d970bd455055f2bc28dc7134ca6131baaa49a335202ab9b066551d86266a5be0d119ab4152104a288726bd3c1800c985e74c7d59ee2280a6dcd13a5a569195b1d22ee2ff29fc5f77d245a25ae
c873ecb65bdcdededac5603c989e4e759d4c48852cd29b8110d4ecde755d2b9a30994eac78002d800e364fa087d2de11dfa3549ff178822489ed85d51e5aa006cd4628a27f9912266dc9a3c890a3d5edcca6d675141d964ac155ea490fb0f186b6830126e331e6f30bd475855c17df1779616b228d446f9252ede1ec6c0148
258f05dc498ae16804a5c8bb549605bab6d325740f44a8b4e73849138c8623246902d7f58e69cc52522ab4eb1e9baf9f5f30752a9767a265c2f417eaa56b49493ddd1ed99cde12ab2e9b17c8556ed55f4d0376a914291bea1e49755debf448ea1bd9751db20179e9e6f339a5334711daaeb39156a58e91574a2378e073ebfa
66576fb6894e7fe8abfd19cfa6997f9eeb5949ef584781a592bf744cfba9924dd360381a61a8fbbf99160000b40adf00c3d1885a3064437bb931ebc6a44b45514ce9ebb3a98d9898f57c3e26e63d98c3d31c9c7114c3d705f726edc8e4ee9bf7e6ed3d7b98baae83f6178d8bb9e84f2693935a82222fb0dbef749fce2deaba
4269f7f301269331a59ef40450a4248794519c1b4f2636f5e71b81ac5e88902e36c25e94c63a75c80f02081d4130062519d37a0f1347e383a2b2ba66d5f5480116c7be7f26a2ff510cc27e8ae7410b8ef9be8ffd6e77929ad83f5b292a4d25055555e93af601c663320e46c3219238b197b2f198d20b8bb4e8b59b79384468
eaa1edd99a0e6c04c3ebad59b36ea9e936d5b286babd0345071f98f43f01add71493f118a5ae87a2083d653798562a269a4f8a8f6324bd3e85668ef93df552c77190140965bf68719e6fcfd6e339920e52eba8a42ca7166dd7dad44ad73d3d5b4fce57a75fcb6e9463cdd79faaf13e463fa53ad6118ef9e51c4ddb90717ba0
b46ae3a436f3270803a4498ad9ec02a3d1c8ee6342cf2d13c91b64993502a3287a726f078c9009d5791b4570abe4ab2fe4e8198f4dd34001ba35ccb18ef3f89a1f635d3e8956d76e3b32e657cb151cc7d1aa9a5b248931ee143d5bdd76a2280a1bad755dcfdeef66b319cdd52481ef079441361a5b71bd6f233fbdf9a0e7ab
23a8e4623299ea963511659bf4ce13c7a51a43e38417a04c001280fa71a7e243f41d1793c9c42a7ad23950d8cc2c01a1d389e99ca5c8fbb1ed9a297989759947adef30555d5975e687c6c4048d288d7668d32d231de83067ab9dafae0b5fdfb3a3f8b88f9d4cfb1f3c33cc7a35f78df19852d9cba240ad53ba8d63c488b4a5
2929eccf6d894aaf1f304c0a708cd16888aabc409cc4763c9edadb4dd068323dd6a8073da13593d91186214c56a8c9f8f36dbf659041589525b69b2daeafaed1d40d6e07035dbc6a648629e2d2b62d4550a491c0575467329b617e39c7e5fc12c3d1d00aa8d0e5c7c34447fa4c18f8290955018ada98960f2667badfb32408
02346da4236414eea43ce987f38d7f169b3f3d1ca2c8a9b1a4f1042a2975e13d896a0c06541f9326c7076d3f97e7211b64f8f2f50b92243e297e57523df9661d876a0cd2841af1ee773b92bad6358e006d1ec6f039dfe8ad7aa14b9ef563eaa116b5b11ee6c7df86f5a8e889351a8ff1f5eb1f504ae1e6e6c6f656a188918e
9ace4846fcebd7af98cfe7ba67a147510375141830de8bd96c46e2324d7d147579286d12ca4638e23886ab6b8c4cda81d2f56f4f8d475fd191ea628dd7f778883fa60ef796980dd6a42299145d9a3f948ee07bdef1a0eaa5a691979a0eff288ca8b67532c1d73ffeb0ed65006de8c731a6b3297998eafad18b94bde85b41aa
00719c9033288eadf7addf52c4711cb825a5e87adfa44e89d317fed171d2dfc7185b8301a5818d46231c748b82b66990a429626d2451ca4672ba564d7a4c12d33cd3c6ddd72f5fd176adfd370f3f2b7d90f72281e3c9586fbc3a3db627016e52d24ca6c12f9f3b66ad8e46b65fea66b3417ea006cc37d737f670368ac3b3d9
0c93e9b10ec1f33dbb7f45510c355256c06a3e9fdb5eb48fc963f7bddda6f6231da456a8e3a4679c59930f65799835eb92b4b66951d3c9d3bad8f7c618c6524a5475655bac9445612fecaecd48384d23eda444a7bddd696a145ee7b8bcbcc450b763b0de7a2d88d4e8fa15e089b3553b717cdfb3c67c966588e2089ebe2499
6899a9676d7449c1b786e0af4308a165dc338c8b028341864097584029403b52a38832534626921f9ed660ba2e39b12e2f2f1186215dcaea065dd73e7eb69e9d234684c5f4eb32358d0242b77f381acd7d61182bf7ee38d65144063519184605f6390222e6426bc4d7ccfb3ce83461535b996867fb7c3ec7e5974b5c7eb924
e5737d093663124511c693313c9fea8be6f9dcd6af3db8b7ebef671cd89ee7238e2963204d526b109b3b9959d7755551efd7bf9990ccd9c78692ca3acebaae435ed07dcff4011510c7f355672275b2b36a90a4ca3cc5e5e5175d3644ed2ae82e4c7364341a5a81b2be134dd83cb9e3394267110524b22c23a33024a3d01857
9e56966cb5785061ced757aadf741c0791ce6e19e739b241a66b16e9ef4de0238e63db2e258ca2931200231c391a8d0121906599aeb7a5bdfc7c4ca0ffcb9497f5a3b06992d8b44be3703577761bf56f5beb60fc95b3d37c56d2501863ae53df178b7bbb8790808b872c1b68e7ec54d7e64f4e82468e76f68cc674566759f6
c43ce9cddb5ec6569226d6811369a3d0cc13d7f3d0e90ca8b66d5194258471baeacc5c4ff684348c772e2ff25ecd0285304d7a61a7d34662dd9b6a34a40bc4c5c505a633b2784d58ddd50d790783016dccdf3bacb535620759375635a202fd9e73be2ed47db079e32f5e01f459281d939ace1e9b33f77bf4d8a6d0e76a6ca0
594c97ee0823453539fd7412a5d4c35e4cb30875ff937e4a9be71e7bcc980896d086f1a306507fa3305fabbffe250db07ddf473618e0f2720ea5a876f3eeeecef66309021250f07d6a3c3e9f5f582199fec5db6c0c463c68500fd036edc97c79ac864d08ea0115f83e1440c66059eab473ba043838fdcc2763825323b79fdd
622e74667cdef7901336e2d2759d4d3d31cab2555551ea67d7a16d5ad475d593ba2629626aa44a2a747ffcf107e697737bc1048e060c49663727620cdf8eff714e91e7fc18f13275c4e667bfb93bf53bf58e915a3bdd7edd823d51c7f37c8461746c328f63ea9ce9ad449ed4d302f3febc34a24ca6e7e853a92c7d6f8a1024
8b1d4591f5027a67357100ac0a204944eb17e98dcbcf8e4cdfa32bb5f2ef6432c16eb7a354d8cd066ddb22cb3264190917cca6b3d368434f7424087c0054ac1f042186c3ec6931173d26fdbdd2d74dc9cbaad22d82844dd7b235abfaa2dd7f1d237064f639086378a98f610cf63480146023f6b5ae3b578a24eafb676bdd3b
5b4d4a66929040c87034c285395ba7d313e108d72183f0b9672bfd3d1936511822d6e51dfdb3ca3c67935da08c100ace8fa59ef2c52fc0a65c062102df87ebb9d6b8728463a3c2be1f20b06d5cbe4d27364e5b9bdedc8bc05019d523b5d0e61cd1f57fa6de9ae6a4b2f587e6fc3c4f3513bd3f13c717b73dd58c47feb998da
24e3a4cd0f396e6e6eac33d03ca7d1887a835e5e5e5aa5e97ed4d411c7088629db300ab58fee63ea58ba631cc8266a695469cdf33abfe3d828f2df189375402255d2aa29e73965e44825ad6aa859b3c6f9699ec76c4a6b76a6c5c48c7a74df51faac5e844698ad975162a2fac6f031fb7bdbb6a8b57ec7f199aa934ff62bb1
82727ea0df8f4799547ace987b81a3dbb99ccf331b214c621bb5eeafd727f733738e689d825047cc4d84b0af8edb575e3f8d0af65fefc7c6c0ac795f084adbce325c5ccc28bba1c871a7fb1f4208dba771909132bc2951e9efbd26932a8e63a889d27a07cfec5969ea7ef53c89c210fed998789e07a9e78a299932259ab6ad
995de05aa1324e629bd2429e6b4a67340797f150a58394fabbe99cfef1788c344d6d8d44dbb468dac6d6c7746d6b6b4a1efe6074e315a08b14f444f77ba916e78644bf51e7a3fac9bf88b6eb50ea06cf5555e9f4d763337433365559da5a887e1f45127ad36a54a650b9ae4f16c1531843d8bece99e8c98931f9c804a77f73
3cb4f491759ac6fb4c4c4469a41bdeae562b446174ec49e7f95af19494a086c311d2417ad222a0ef49372953b596c7ee4b633f88f6621a6f9200d5ff19453e7389517a3c1e124779e02569aa7d6f437a738e4682e33827069869a66e9a8b975ac8c00806b9ae67ffed48d7eacc2f4940c55c144cda7153d37a2575bee6bb51
eba3121d5d42cc65f5f8f7a717279bbafbcd73f875c6f6e97caa5096a4d257eb9426d3c3c9f4f1b435bc529e1874476101b38f55d66bfca8671d679e5d7d7077eda973e344eca97f203c70f5fe59cc5e29f4a1956519c6e331b6db2d765baa016c7594324d534c67338cb560c7b912a61d13dd9a84c6b73a1a24df89109aa8
831966e3553fb62f78624ef452477b4ffbecd777a677b29a27d957e28d1312e578ec6cadeaca46bab22cb3f572635d3e61cf563327752ad2f7c6bfcff112194006f21ba79bbd38f45531cdf9fa4a3e31d9517d5569ced6b63b3d1bba4e8b2e9528f4f94a7bce69b377d3cb96ce1163f874cf3a473ad9599bed6830f5bece3a
159f3108678ed6be31f81ce7625f85b56d5b1ba90fc3d0d6559a7281a15ecf2693eab44efe783f31e76b5556a4a0adebd01ee3e8e8f6b4689e7f7adf38dfdb5d57cbf8ff58ab9c8f02297bd2fdc5a867c7718c388ee1f91ebab64351140060ef7046d4274d53cca633abcc9c0e52aafb05dd4d6a7d3e17456e7b2e3f2f6aec
91e0df99e2e9f9f8bb2645d41a3faff31c6c9b9aa2c0e1b0b775c6e6fd18875259521bbab2aa90e84e00fddea7c64ea8ab0a65afed8494df979873b46a262511e868b63cbd7b981aede39a7b9df13866145189485114582e97f65ed42f1f19e9f4d958eba418e78e990752d11e56959432ff9c797222f2d776763cdc07ee63
664cfa2554fd91f1fa8d51a7b319be7efd4a0a905a1ca6280a6cd66b6c361b785b1787fd01c271749fbd2909a8cc6636c2e308074dd758c9f6d58a1a431a69ecef7aca04e06b995da5ebb75c9beaf8ed66f3165701a35eba59afb1582cb0ddeed034ad7d4f54305c598ffb6ab53a7a2c3cd73e84638f94edb1ed447d8c123e
a884d66b3b419bce009ee7a2280b7b393d2ddc7e7c8c954d63b1437d72817d09a696410881a66d49e9331bd868885900267c1d27f1498d96793fa6e7d37ebfc76ebbc5e190db7e5b8f79318f0be028176e8be875ddc27103907d7bea9bb9630ecd63db039db071eef17d47ecbb12c746d79e4791d73ffff127a6b319899854
ba1678716fe5ea7dcf473a1860341e5bd181f178a253777dba8cd535f6fb831eff8356e7ab1e173ac2d141e3fbc783534a697b243efc395ef7026fa31b554f7067457b575596b497e89618fbfd1ef7777748d30493c918a3e1c8a69c2879f412e73ac572bdd26d271e11da397eaea3f163d2aa4d54ac9f55f0f4f8fc7afaf5
0ee3c9d82a55ae96a4e6680af167b31946e3d137974b805a6634355ddc775655cfb49d7878df514620c139d648510d67a68d9ba343c75cb8957aecb5cc3255364595be4c3c39ae6f8d31a2fa8ed6d96c4629f3fae22e84a0deb59b3536eb0dcd8d038d539226984ca798eb1602f66c751c34bd9affd5724967515d538b9ca7
ec1e3d9ed4766208259575deb96767eb831efa579a9a4a2994d5a9ca715dd77a1ca9aec608216d36a4501ce808b351ef0660cf1123b295ebb613c6e1fa9482379d2331527d8ed4754de258e8ed7dfdf3a11fce3ebed8e99c153df7ce5934f139f3c7641318e7c07038a4562dfa5b0f060364d91099395f754de5b903c75cdc
77dbaded815796d5e3423b4665b4171d4c9204dda443a81d8b8f46013f885fe64721a7f151fccab405180e879416a97b3a9b7e6eebd50a6b4129a489d93f2f28136aa01d38ae5675acea1afbddceb61ca3ecb6a7eaaee90fa85e8e5af58c278d356eccbafd5935fd1fa1ebb54fbbbdbbc376bb41d792e04ea79db1a46e4ead
8936eb35958ae87a362104455a9b0687fc80d56a45826605f5e63e6d3b713a2646e2c2f3685e0e8719b26c08a5288df4bd52964d86553a18d87b6f9290a850a8ebb66717fd9a52ff9bf7292519c8797ec072b9c07ab5d682740fcc931ea6b4cad369a9135ddb6fcb347a590327fbfa03f3c533a1553a8426f8f2f50ba65352
04124220cf730c74d3df7eaa4b14458823ea13658a17a930926ada8ce29731902a2d3cf0cd9b32e8076f6a0aa4ec2862698a23cf5a00d8017ae545d06f76be58522f91c3e140a2393a37dc78538d02eb62b1b085df26d7bbdfacd4188ea6decd78011e333fa8d854a707b59d4d5f3396bed9a0a5a97dd3dfeb7cd2989a3853
cb696ae79c1fb850997f6ffa9551dfc3d44e768a5c655a694bd7cdf414a6fa1e60d31479bb3d363037e9c04f1de4c648ae75db11f3bcacf743c0d6719c47fdccdc31e9661459a48968536f1fa93f7c1f285a673cc31122cc2e66f8e3cf3ff1e5cb17f8be6fd3be7d9fda7e385a98c3a8ff1a152a3f38a6fb983ac3a220036a
bbdd5a95acee914b03bd1b65eb5d4c0a4c100468b3ecc9f441f59875fe0be8afd5cd6683cd7a63d3bf20a87d8daf0fa4aaaab05aad28cb617681d1686c9bd702b0517fa3feb95eadb1de6cd0688ff0534abc10140d8de2c8ee13fd5e64fd28c177d3637e218ee320d47dc386a311b22c431cc724f41393788eed89747660f5
23af55cff9652e37c679f0d06739a6f15233e1ae93f0747db9d2e24f669d19078deced11fd71ead7f7f60fbd5fa11af72bb1d141dfa7563dd329be7cfd6a6b561d412a91e92225d121df87e3d2e5318a2822119b94e65e6a9ed4def722cfb1d96ea9ff57593d7db6f6fedcf4ce33cde9c33084f41f395bdf00731eae56c7b3
1500a2280620ac9051dbb4d86eb6b8bfbba38c8730a4baa4de99622e989b0dadfbaa2cd1b4d4d2e9c13decec1c699ada2aacf60d667a1f5a29541ee765dfbbffcdd96ae7b4f3c30e0b578b85c44982749062900d609a760f06e47c4d7504cb380ccecf38530e64d6eb764bbd7e4d9fb8c71c5bc6300a426a5f40ca91c327e7
973a26d9fe3dd18e3c4f67d58cc7637cf9f2c50a19857a2cb69b2d96ab25a52482fa28475184b097d2e9b9bd35dbeb1fbad96ca9554f51a0ed5a3b9fbe7d2bbab440dfb1da8e7a0b86baad98496f3e3947f07a3913e63d763a536ebbdbe1fefe1ef7ba4cc8f55c0cb20c7e75ec695d968575f4d0fb0e6daab1d4e9b8a61dc7
6ab9a2be9f4f648709631c6a2339cb3240511bad200c1077f1c907ff761f7bbd99d96fcb61eec3719220d27d4b87a3a18d0ef6efc2a7ef95b26fcab2c276bbc362b1a04e0ebdccb7c79e8dd556691a1ddd26bbcc64959c9fe5367be16c543c4a41f3100474b11f8d46984ca7b6b169555588a3c82acd999c7605858336f822
fdf72662640c13d3acb3ae6b6adcd893c636f520271f4ce7ae533b82562f985eb8f43b0a98bf927e2d8599b08bfb7b2c972b346d4305be5946f59575030505c77575af991b5b2f6824a2cde1615a03983e2c54b3d57e371a263b0f7550a3691b78dd31146df2c901589529f9404d8feca967755242080a3193729af74db1fc
4bf03ccfd6f219e10c6b10fb8195ea3698b1309fcfa40519e384e64bf5dd561c9e4b1ea7a6978ee068e550d771b4c1775450ed639f871d3363241befdb5124a0ff7edf05bdd31bf102f3cc8df0d26c36b387559224f6b3875188b22801a56cc46c7f38605496f4ac74d352234c448d756b9b0ad376ed777b55997968d24ee5
3b8e93ed8db958e2f6e616abf50a7553c30f7cebb8306957e429a7c8c462b9403a18403894eb6f442dccfc6875ba4f5d53cf4e00df78c96dbb059dfae9ba94dadb3e3325fc2db07bbdad85a6f60eaef6dcfa76cdfadf7a9f715a5bdb4f9337cdbbcff7f6fe98388284602004b588e8241cf72822e33aa7356c527636ba48af
41ef81fa6f76363be24495f4c3386f7a35935a69d99cad540b98c2753d546565cf4ed7752195429e1fa020ad33b57fb69a0bff79e941555736e5f9d1b3f558f88bfaa41582b425036f3576e70aacebd50af777f75a26bfb20e2cdb3019249cb13fec717b7b6ba303b1ae9933a9eafdf20db38f3d25617f728ef81e9abab102
3bae4b6983746e51cf5752e4ee6ccf473337fbe7179dad3a85ad3f2f7fb0b6ced52a89a60f62a0d3e4fae7edb920d6c9e7ebed616dd3dab280a75a3a01b0994f428853e1bbdf9cfe199bc4090659662385711ca3d30dd0a33882231c745d8bcd6603e138c8f30356cb2589ac251419eacf4d72ca77a460ab4569fa6743bff2
af6f10ba9e7ba235f15691c0738c8374ab1d518bfb7bdd6aa2a3f64de3894d1535fbc96ebbb36b368a639b1d61e7a6be7b983ddd0857cab33181fd2f7add560812f5e939076d09d43b60a371bad6d9f77ddbcec7f77d844168cf5cd77b3c8a490e5169efa546ccb36f109e7fa5c9bc6c75349ad2e47f6cae78249ae0c0d712
c3a626c914674bbd004c0f11b341b76d4ba9695ae12d087c7b99b06fdca1488bb9644be86bc299829051553a2966b6c2017dddd9b73beca554d484794fc6207943eeb1dd6ce0073e66b319b2e19094fbf29ce496b527ae69a851bc49a1ec17b89e14a0f79a479a27fd58caa8e3f6bde0c6880fd0048ddd74dab643d368f5ab
b326cda6f1b149a38170ec41e3f9de492dd34b31c5f6a4c4e66af110b75757f07def687f5cec98f452c24ec6442ffebec1267af9f546bc4401762c6cbd52ef354cc4a3dfb3c5715c9de6ab5b04e87e8eef7dd1543affe8b48630b6174d13a533de6293067e7b7bab1d194b9a935aa219202f733fb2622fee461446398f1b84
3816c99fbcc67b8c0d00a5a383dbed163737d7b8faeb0aabd50a4a299bf233bb98218e63acd76bfcf5d71576db2d76fb3deeefeeb554bb96b8cf7aa99d666edbb56afeec0983f081a8d57bcf1f83d93f1cc7b5a25fc79fcf770ad935dfdbbfd4d9defed898d8cc849e1817b50c12764d5aa96d18c711742f26adecd7b6767f
f17d8f0cdb0f6410d218506b164f0b1899b3351b6654c32725d2016556b89e8bb66bb15890f2289dadd2a661f7a30234a68e7e8ea72d109e56a2a30ba6557035e7cd1b0f99514bcef31cebf51a8bfb05ee6e6fb15cade0baae4db9831056e9f470d8e370c8715bddc2715c64c3cc8a3298bec9e27cadba0e1cf9c4d9da3b47
1ca1456c1c01cf736def60db774ed76db69d5695eca94f1be39684484cdf42ffe46cfd99b9d94f1134357dfd564adf7dddde7d43385aa5f77b7bbb385dabaf5882f561306577264a68043a923841aa23b2f60cd56abfa6b5465194582ea85d4cdb7508c290b2e8e2d81ad6ae477b5d1004e8da0e6e77de4e409ca58c523de3
d149a7e7d13b08f798b228d373f1fefe1e8bc512bbdd1e711c613e9f63341aa26d3b9b9a5c5515f6873da96cba2eb22cb37d88fb6aa39eaf030a0d39625bd73d6d4cdf7b3e2653dbf77ddb73bbdfa2e83df77f13ccea679899b2b293fbfb635f6fd5b87b63d2926ab092df694c0f580791e7793a3b4cbcd866f24e54f9b427
dd14d19a9a2f53d0dc751df23c47d334b68178a525b533dd809a1ac7930113f83ea29e9cf3795a0b790a0063f59b4ddd2ca6407baadfc3f3db752df222c77ab5c6bdbe50ef763b344d83c160808b8b0b5c7ef90221844dc7b8bbbbc39df6ec066188e994a4bd4d4a8a19679366670e9ca754bfcc5899832f8c22046100e8ba
1bd9499b6663c56ab4a88d5988fdf4b7b228d068353bd7782d7ec538db8b666ff23bdf3712fa8a5066ee01d453f1c93151c746e47df52d231e43bf173a7db93df6c0d32aa7528be1946549b59c4d0d2160d5e6cea39aef4baf30d839e68507816f0f1d336ee6f0a00d33d07dac56b689f5ed2d35a417fab03732f6265d328a
23482549d6ff7b359cba362eee8dbff34064e95547a61715381c0e58afd7b8bbbdc3dddd9d169fa0f4e58bf91c5fbf7c41a4c72acf0bd45585b6a9b15aaf6803f67da43a3a61d682499b8ae398220f3aaafa4d84507d6bfc9834a27325b177c7e8849c1969563ce4b12f13fdb917503a8c5648eda7819b7f7b3e26fdfe8b26
3a19043ec2f0d857add329a9951697327d668de3c6285eb76dab9bd47b277bd87b8eee37be586194e35c1b95a5f9977c7bb6caf3b3758baaace0eab3354d53ad5c69d69d6f2fabaee352a40fa7f3f0e4bd49fa5af3dc4cbdac6993f096f392941b0b5b93bf582ca886a82c6d14f5f2cb1778a69590cebad9efa97975188658
2e16180e87c7fec4fafc32eac146b1f57b672bd51e9d9e23fd9a1bdfa373a4ed8ed1b5baaa6dbb18630c9665895c0b6308e1d85aeac0a7363be786fb4be9ef2b4ac9e3f9fac48cff66bd46917ddfcf89109eafd78f731ebe26c736229e47f712937a67caa6a4eea1da752430d3b40d9a9b5bac376becf67b6a2d31a6947c73
8698b134252e9ee7d9a8ebc99e490fc13e17e108fb755174541875def82c3175bcab1505474c8aa79412916e3ff4e5eb1728a56c99d8e27e81e5728975b946188598ce66c886d989fab8df7396997e96fd68b41d137c6b101ac19f40d7277e0c85dbe37e6a9c6ff61efcc833b37f268e7b7b1cc7d6e1f5d03ce963f637cff7
c959a1d5a3dd1f1813ef1835d117fa9ec7d83c34a33a36198f71d07d36dab6c54237928da2080b2d8b4da96a916d0ed9751d7c9ddb7aec4378fa80cf1fb6f96003db0ff11985a236abf43468fca280a9fe5a2bfeb2a106f4d7575758af569052eaa6b1234c67335ccc2fe0b91ef222471885f6302f4a525f5a2c16d6103472
c3611850ee3340750ba688d6d4d27cf3b1c8f831f504a6464f4a09df0fa0a4b2bf56bab6e4a09bc4874180200c7ab5503b6c756d85692a4e11a5f09b66f62fe558407fea757e48eedb7e8d3eb0c220c0405f78c228d27595cdb30c9220a448993db094ae6dd312d96d4779ea077d993017487329d9ea02f142370e35295afd
349c0fc103ea9d26d5ae7f8131357042082829b1dd6d717f778f83be6c2e974bdb07f258efe022d10e0a5318fd2c519fde65c3e4ce3f542cfdf4e7a2ff53f6f72fc37a2ef77b2c974b7b08edf67bf89e67d51a2fbf7cc17c3e47a00dbadd7687a6a971d81f50e439eeefee7523f021a941eafabf4837ce05405158ddf8f731
712b33df4d4fa16c38b44db41f4aeb7a6840d4f98bfe62acdc85e81903bd088a5596ec7f8d102717ee41964101762d99b495c7f6f6fee5341d0c30180cf49e98204d521c921c5ddbeafa892de224c67034449a241451d20acfc7fe9b8d6e6be36b275968d5a93f1cbd088fa77f7eff6c2db1ddee10454b4ca60b0c060328a5
10e94b29d593b7b6c582691173320f7b1c1d8b3ed5a30d0627fd7d1fa5ff5cadf896fd4bfdff0acfc90de8d7d16f77944a767d7d8de56a89a66d6dfba1c9748af9fc024110a2696a6c759deb6abd42515226ce72b9449c24765c0783c1494f5be3c0699f3a5b4fce91d02ac01a8fbcd06d1b006dc456a4fc77c80f88a2d0ee
b1268d6eb326a138e10844716485d4bc4752b09f3f7f609d0bb4b0c4f12fbee3c0312d234cd64ea4cfd747f776fd9c85395b7aebdd386d9e7ec8389b237f37ad99a370473f026f32198c632b8e630c87435ccc2f74b49b04a2f2c301eb1545bd875906c711180c32f8ba9548d791f84add343d95e587c4428ea9f2e6191a41
2a5f47809e7e06e8e926fcf813b062885585ed6683bbdb5bdcdcdc60bbdd0282b28c269329dd872f2e2084401227360abadbed50ea3ac1a5eee7685aa61867c3703482a345f1baae3dcde67a707e9393cddc879334411885da21f8bd35a66c6680f9fd0f5f3e1e7c670f9fef27d1f847dea2390fa228c2a83726dfa40a9f8b
cae8cfe07a2ee224b1da00e60efb9c7dc73873bdb33f3e7e039cd6150401358f9dcfe7907a826cd66b1d1ddb62717f6fd323a7da2b1f0401c228c2683c3ea6303e23a7d5311ed59ec7ee391bea6999e4cb1fb031061bbdc057ab25aeaeae707d7585b22ce107bebe605e623a9dd0a4f6032429d532944589f56a85aa2cd036
0d56cba5de441c44ba1f5a14461013f20cb7badeefa9fc60f3291c4132f6e62261fae328a5102e9750a04bd3213f8a83789e87b88bd1360d0efb0336eb0d36ebb52d12a7e2d7c1375ed11fc18ef8338543ccb324919418c27110e9b4c74ed7627c6f4cfad145d32fab9392e477a3d82a461ef3de5770848374403d9e8c52df
72b9449ee770b46194240982971a366fc489c88619f7b33565bc676ddb62aa7b22198700f59da394e66136b49bc7201b208ca2631e7fd73d6bfccd61697b02f59ac13efc017eed05417692d6ea92ea06efefeeacaa719a5063ef3ffffc1317f33986c3214587bb0ec51f5f2195c4cdcd0d968b2556cb25fcc0c7643cc1201b
d862fe547bdcd2343d2a25034f1f3bfaf2d96fd06b2e53dfdfc3e8ff8f75d3bf70b01efb9e0f1e8adf7e63f379444fb1d4380eacc1f0d498e8f962d21f3bed94c98643e44581fd6e8fa22c2057247a6214d93cad94b8d54a89858dc408eb8ce837cafe30d8e3e8a8ecdceff9faf4d9bab19927f7f7f748b4f1e3f5cf56ddd8
995a203dfccccedf8a19ff28a44c937e0dfa435ff3dde9f7ccf969eb067556c67ab5c2d5d515aefeba2291369d5266fa198fc713845188ae258772511654135cd5e86487f56a0dc7a154b1388a114731023fc068344614c7f60c91cf3c473ccfb5f58350caaa8c063a922b3b894a0b4c6d379b93962c6404ace81c39e4d691
94a603447104dffb4983b07fb957e77ff138e6590f0603fb6b6b8ce4678c892927324e5453fff5bcb7fcf73203ed67570ffdc7b7022526ba3f9dce6c9ae4fdfd1df63b4a975c2e164807293c9f043e4c63fb200890e94089b2fbc243637534088f7d3a03db5bee29c3fc9bb1ffc147d1d7d1c80f3956ab356eae6f70737d83
baa96def4512de21355657dfe75cdf23e1b6f5cab66a5b2ceee1f91e006533268c3aae31969fae933c868d1c47d87a7853b3e779de8307f3634be6054be9c7c6aff71bf59d33fdc461aaeda8c1b3e649df46a0f289c0e80378cfcc72eb8db5e7da7486d370e6f925d3a4974d2613745d87ed7687db9b5bec763bd47585cd76
4b5e3bad56d74f3778a9a8c2437538dffd1aa757ff248eb9ba2fd982fbaa5cfbfd0eebf586e45fd76b92f91f8f309fcf319f5f5835be20081075b4511ef67baca613f262ea489d73bf401445246d3fa686f4a93ed4cdf77cced808e0a8c4a715d53c9704556c4f13c741d3d4d8ef77582d9780522419dd75d86e8e8a8b265a
391c0e9165032b7cf33390c083388ebf231e8c349c3f67736819a9e7f3d4b3e7cc95bed88249114ad2c47a49baaec37eb7c362710fa5489e5c0860bd5e63bd5e63b7dbd9fabb6c484692b908bc3b7a0cfb6bc2fefac8975809e434c5783cc6c59c0cc2b66db15eaf50d724dcb0dd6e8f0a69618424718f623b672ab54f8dbf
78e0fd3dfc8ff501775647dbafd77b09e679e7794e75be7777d86c365664281d0c309bce30bfbcc4643221255afdd9e6da90a9b5e77397e7d86f49b27eb41e59d19d442b8299c6ee2f7b74a72999cfa9a3757a759cc279ddb4a0633de1b116e9b462e3dbcf629c30611822794e13e1b3d7008eb5a7755d234d530c87436be4
559b1287a6b172e54110c0751c9bbebf3f1cd0ea54f8501b8326edf2bd53dafa23264eea4e7b2d1df08cb35547cfe86cd5aa86e66c1d0e7fddd9aaf7e9feb339f977fd7f7f3e4f7a9920cf8d0e9acc9bc3e180b556e35eae9610101869c9fe8bf91ce3d1981c545a115538549671717181aaaab1db6da9d7d782ced6e9748a
d16844919424469226f67b3e776cfac26fe612dc36ad753698ac9c5ccbe49bf4664738bd73648b56473aa94d4486388a7e5e0abfbfb73a0290bd7df73b9fc95c0a8ddae08facd76f52cb1ffbf7e7eff5244dee03396a1e7cef472d82e7d4661a67d4703844abfb300fb32176bb1da494d8ed77582e9648d31413dd7ac8286d
76697a26ffdf1bc00742fc761d1a6d8def649a1ccfd6e77d96c7307d028ba2c06ebfc366bda63672bb2d029f32ddbe7cf982cbcb3946a3916dff659cc287fd1e93f118459edbd662eefd3dc2801c37c3d1c8a623f7efc3fa37b011f047c6c79c97c279ba56dfc6d37b63e208e79876fb03778fefcea75ebae85113c5d46e3f
fedc4c143f08826ff7f6c7d33fac10d1436befd179826fd7b667ea8d4ea2700f7cbdb9642a00a3a6c16432c1643241a16551abb2c47abdd621e409dad1c8a6a4bd26fd4b8da78b765dcf3dd6c4bc00a51485c675c3e6ed667d8cc2698ff57c3ec77436b38d82cd41912409fdfde5259ab6c572b1c4e170b011d4cd668bd168
6f43c22f4ead3b7b9fe6f04aeb14d97088f178ac0d1d81dd6e87abbffe2295ba3082822209fefd0e4a49c4b156bc9bcd09178ef0000040ae49444154301a8d6c43f99f7d0e4654462975545813dfdf58cda4fc59944e178de318d920a3f95996e8da1687c301d757d7d8ed764813ca57df6ca997505555f610a73e6ce3a7fb
2dbd31a7a202eeb190fa09afb349171a0c52cc66336a885b1636c292e739b6db1d76dbed3175f40df2f0cf3fcb7943dde7d037fe8b927a6c2d16942a5a9625458d9218171733db47ea986add21963146e331dab6a528f17a4d6a844a62b723b9e77e4dab19f3d71c137380504359175ee7d91aaf5f69141e0bd74dbab11675
714ff7cc87bee3afae81544a218ea9df97a9f12d8a1cf9815ad05c5d5d232f0a0890b47b91e7d8ef762450301c623c99504a6ecf207cf70861af36d3a8b7ba9ef7a4b8d6c367eb94a4e94d44cd9caddaf8798bb315309f450b6d798fa8b93e63c8cdd96a14bb37eb0df203b53f889304e3f108f3cb3966b3a935068d888e94
12a3d108f3f925d5060a61230fbbed169bf51aa3d108aee7224d52f8c14f647728a0733beb34cdb20cd3e9946af2759de7cdcd0d0e870306e9008eeb60bbd962bda2e8651004180d47b8d0fde862ad9ff0d3cfc0ecfdae07e9487dc771f1bd46f0663f7f1367897682d87dbd7717338e870f8bc049436fcf731fed7d4d1f55
d8f5970d324cb443e3a849d060b7dd60bb19e2a07b629ab296d77c16f692ef92da7aff3edc77ba3e677d745d8742b78e582d97d86cb774c784409cc4984ca857aab90f9b147ea38b311a8d70319fa3ae1bacd72b546585dd768b759262b7dd623c1adb4c87d73c5f695cb418a31d13cf6618fcea33a37f967bae1e7f3b979c
ef7eedafba0f3ff7fbb8ae7714c18a756166184636d7fda141b29e616dcd4f26d4a3a5eb3aecb65b927cdf1fb0ddee70d01e012370f15a1fee3cad2108428451782c987fc1e4078e0de8d7ba77ca7e7fd0979658475ae6985f5e623c1edb1a23e078a067c321be68a119474bc016456125ff4d8f3893e6f8339fdb8ad324f4
de2ebf5c422985fd7e4f750efb3da897900b6144196aaabb198e46985d500de4683c2691919f58146603f23ddfd6ee51f3609f3656f1368695c9c10ec310c3d110f32f97e8a4c466bd469e933124ee04029fe687914816023afd636aa349466ce523e0685559df0f10045423689a333fb5b61c9d863b994ec978d217a84ecb
35e7f9019bedd6ca413fd650fe973e23c77c1672a4b8de71837ec9781b2fbef15eae3714e9554a6134a60bd9d7af5f31d64dd6cd8143820f54a36cda54ec763b40014ddba02c0b2c174b9b6235c8b227d3ea7ec998e83dccf53cf89e8730086ce1bcebfc3aa1145b2ba895068d37d78a46fc84d2f08f40f393ea25fa3d5acb
b2447ec871d5fe85fbfb3b28ad3c2a9582eb3888754d93d98b9324f918a21767c660100627bdc98c03e7bb67eb788c2f5f2ed1b52db6bb2d39b4f67bea11aad5fb5efb6c058e4a93a64ef85436dd7991bf552985aaa468fc6ab9c47ebf43273b9df63a24518a4bdd03593b61ccd8f8bae7d8e5e5258c105d555738ec69ae6c
75337a927af77fce2014c7c85a1885188d47f8f2f52b2080cd668bb22c746afabddd179aa6415555701c6a243fbb98511add6c6645cc7e784af552c948e084f40202ddcec9b4fe796f4c14b9af1ad9c98eee00bef72a17ef5ffdfee94ee5538fcb20a4f7ee7a8fde87ad284a4c65515fbf7e819212ab1595a01405dd3972bd
a7f55bfabcdae7e889cef9e1e99a7d2aabe81c13292f8a829480174b1c0e7b4040dfffa9ce777e7161cf58f3b9ccfd6fa8efc3e6cf48e8adc6e1b0d72db0f60842ca00792d67de313a0812f70afc634aa5de937fa40ff7a3dfcfd824ba8d9319fff712037a6a5c4c9b0cd2e188d0b60dbcf97c4ed2f5e331d2dec1fa9857c4
5eb887e4d1334214fbfdfe986e667a68e8d49ed752d733de4b4f17dd66c30c80423618d8a6b52ff9befd7491baae21f406ef380e2ee617b8985d5849ecf3c3d828894e67336b0c5665652787b9f0d44d6d73a57f6663b005a86144c64f3927c534cfa50337cf51378dae65f2ec01976519a6332a02369fa55f0ff1a3efc5d4
140d334aa18893d8f67d73bdb7f5dc1b71818b8b0b2849d1d4a66990e7075b7b64e606a5035274773a9d623a9d522fba9f1c935f05cd1fd7b6842155bb503b03922723cd42d7c10d8743ad464b9117401c45779ae6a8ecf5cafd8dcc9c8da308e920d54a58948e193d573c0aa7bdf0a8575907291584231047312e2e2ef0c7
1f7fe0e2e282d27fcf9ea5eb7a0823814c294c6733e4790e2104f6fb3dda86fafed4756d059f8c6cf86bed63f6021a8648528af8373a9d3208fc5f2a33de570f340d731dc741361c220a5fbe67feec7b318637190c250efb3dea9ad28bc8303cd8b9e9fb3e065986e1880cfef9c50586c3e1f385c7de00bb5ee308c36c88a6
6e900d33c471725442fdded9aaa361524a046180dd6e47d952bd9e72af79b6f6bdc726a36530c820a542966588a2901c7d2f701ed0d9da924a67530320f18938a6f57a717181d96c8a4cefbd7d27a2c9fa984ea7701cb397e780a2bd5e4969fb0eb65dfbd3fb1839685c2d3295617e398710f43eeeee3a147941f703936ee5
520ba72449309e8c7131bbc06c4673330a9f5f77f71866cf346d828c933a8ee20f33ef01ba7b846168cb544cb4288ee39f4f9b7d654c0ae860303896f6e8fb8be73fee78751c52d31f66192ee79700681d2f970b2b40d66987566b5ae5bc82d3edb8665d2d041463980da1a422a1b433b5ebe760b270eaaad22aec0e062929
5fcee734c7c7e331d274f0cdbee6791e9234c56c4642335d276d8680e390827cdb3468755fecd7ec837aace727c1bc5159516ab9555bf67e49d0c21a833a453bcb06a86bea356bb258bc9edec57b6152674daff46136c464322123f9bffff7ff8e308a309d4e30bbb8b075714f5d0c7c9f94ca66b30bb88e8b244db1dfefa1
a4c4683c429a0e5ea470f3a31fca14db9afa8ba669908fc7c8b2cc5eea5ff21e8c61431e101aa0a669e179d41b69329d586ff4f9ebbaba013128151a4dd3424a85e16884300830994c90a4dae0767efed265269fe77b5a3c63aa2f58e4f5dfed76a8ab8abceaae8b200891a609a5455ecc3039f3acffac4118c73166173338
ae83ae93d6db3d1c0e11063f17817c29a6a87f3c1adbffa60d2a4155d550ba87145dc0689320318319b22cb3ad023ec201668cbad16804a5140903b42d7cdfc3783241fc44a17f5fb52a1bd2c5a66e6a0c758def7034c470783c2c5efbf33a3aba339e8c75d4ba3951f20cc3907ae73c634cfa864d36a4e8411c4788a218f3
39d5228d86432a70ef395efa6246c658befcf2057e10903152d5705c97b200b430d16b1a83d6488e630cdb164a4af8be6f536e4c81f9affa5ee6b032910ca924caa2c07038b417a1b76a1dd27f3f524a8c2713d4bafed3a8d3354d03a97bbb992c0ce3b8194f683ff63fd05a359f673c1ae1cf7ffc894136401c2798cda648
9e7bb6ea67e3ba245cb1dfef6dda643a78fdb31538f63b8da208e3f1187ffcf9879d8f945512598ff773c7c6f37d246982f1684cfb8f96a01f4f26276518e7e3230465752031a9a735dab6419665f03c0fe3f18814c9a3109efb6be682e9496ab283e8d9526a5512c7a4d4a9cc3942edb5b22cc36c36c37436d586f3cfefab
f62c1b8f01006555014a2108028c2763c41fa4b4a1bf3e95528893044dd3c0755c8cc6a39f8e94be36aeeb221d0cf0e5cb171bd1994ca6fa7c7cdaf0763d0f719260329d52bbb580d670d3d4188e46c8de70cd9af37e3219a3aeffb47bc6683c7eb1e3cc2ac00f06689a0691169df3fd00d3e904e3f1d8aa1e3ff8b55a3518
801595dceff74892d86661bd7606a1026525799e6f6b1e8db2fe7436257b270c29a5ff27cd3493291784263afad5deb12793c9c99ef0ab6b165ffa3ecd39351a8df1c79f7f220c43945505f13ffec7ff5066e3cb0603a43a62f4d40436f5004551a0d432e05555932c7614e9be49d4abe567fbef3c064509c8eb683c8687fd
1e4dd320d013d1d40d3d77214a295114050e8703e581d735a454b6dfdd6030a0c2d9071695520a4a2adbafc8a4a25555653d9c7172d633ef174c0ad307a92a4b14ba60ffd053e2a3a27cd31332b691bbc16060159e7ef67d50b17d6eebd34c2d5fe00788a210b1f68ebcd5a5cd78b6aaaa42a9c764bfdfa3c873d475834e92
e7cef698334da3f59cf9484daea524cf5a9ee7288b126ddbd8a6c8919e934f1db65247159aa6a1b4b3dd0e65514008c7f61decf71d7dcdcf6c4525f21c555941ca4e6fd69eadd70b9f21e66322842692675a8a547565e5bd9334451419b52dfff1f7a3c7b628c8eb6ffa7399b4c4a417857d8db1b15e58dd3fb42c4b945a16
deeca566cff915dfcb4455abaa22e1ab3c47db68c9ff61665b87bc55ea68bf1ed4ece166ff35bd089552c79617babd499aa676be7c9416315649b3b7d6fabd30ad97f8094ffdc3676b4575ecf66c4dad53f2b53eb789c01fcfd603ea86eaa006e900497a3c5b9ff31e4c39467e306b8d1a78f76bf5ac71ffc0eb49ad187a3c
5bb728cb8a2e9e5168c55f4cfaf3af3a5bcddab4e7c84e9f233aab4208e35c8a10c7916da9429fc5ffe91a60336e2695bad5eaa7aeebda732bfa00c6567fde9a752b3bdadf4d764b1447ef9fd6fd085d474aa1db2d0916b98e6bcf45a30efad85dc988fc556585b22a51e4d41ea7eb5a5ab3e65e6d7ac3bd828889d947ad2a
a8de4beba6b191cffedefe9cf962ea970ffb3d8ab244abf762d7f5ac3279f2488d6cff8caeaacaae9dbaaeac52729a2408b59ec6ab39a49539631b1c0e39767bda933dd745ac3314fcc0b7299d3ff31efafbbfb90ff7effffdbbff7b061c9494e8cc39753860bfdba1c8a95e5d6c361b652c462bf0f08c26cae6c0301bb551
e03379a9af2188f0d003e8bf17935ad417ad78c945ae9f8a268ddc2bbe15c278ecf5fa2a5e5dd7a16b8fe966a659fb73d4ba5e3a06fdefd9e814409306689b569a1a849e1cedaf4a0feb8f9bf1049d16adfe5c8fc39f7d4f265dc3f4f8eabacef62bec17429b8bda5bd6513d07a96bfe9e9a934f8d0370ba46fa6bb5df67e9
b59fd1c9faea2976fec83c3173fefc73393d0186ef3d4bf3f5fd9fe78d995f33e5fd7befa3bf27ffaaef7f3e6eb297aed317167bebf96f3e777fad364d834e5f80fb222d7d11b4e79c556f497f2f6edb9652d69dd3f9fd3367ebf919fd9a9fa3ff5cbab6b31131d775c96166529f9ef33e14d0c9ce7e366ab42c6d8fc6efb5
967a6c1f3b57c9fbd546f2f939d2d48d9da39da4fdd8cc49f3b3ff8c7e05fdcfdb6f4e7d3ea7de9bf33dcc3496fe68eff321fa6bf6b179f5bd35aba4829474569b7b90a34b865c332f5f71af7aec3e6cf6f697de6decdc3f6f03d65bb3df3b5f1f3ca3cff690579f17aaf77cbbe3f3751dd7decb7fd5197272ff3fdba3deec
f33ef77dcade98e8de8f42bd76e1d0df15a53e6693e3ef600ff0b303e43987eeef4affc2ddc9ce4efefe98bcb787956118e2fc7206e0552ffd0cf31ce8c27f3c43a8ff269f23cc33f89bde27eddbc7476f1cc2fc0ad820fc0de9470dcfbd3a9fcd18fcde98bc85c42fc3302fc33871ced7ea478a06329f0f3e471886f95d79
dde61fccbbc117a76fe1316198bf0f7cc1663e227c8e300cf33bc211428661188661188661984f0abb601986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d42866118866118
8661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693e2bdf71b7815d4d9afccfb22ce7e65983ebc5e3f16bc5e99a7508ffc9e791f78bd324fc1e7ebc7e203afd7df
cf20540064efa7022f88f7428062d00e00f7eccf1946f57ef6d7ecf9bf615e97fe0165d6ac0b5ea7ccb73cb45efb672cf336089caed7feafbc6e198359ab1d8e6bb5ff77cceb22ce7e2f4067abf3c8bf79677e2f83d04cfe1640a38006b410fa174fe6ed10007c0081fed5159ca4cc1c51a0f5d929bd6641bff25a7d5bce0d
411f4020f872c99cd2bf5c76fa7ced9fb1ccdb61d6ab073a573de833f6bddf18f3a150a033b57ee03eccbc0de60c35eb35c071dd7eb0fbf0ef63109a49de012814b057400ea0062d880e80d2ab802f39af8b79169e0012004300a90042457f663c99cce7c5acd546012568cd1e40bf6f953eb004f8e47a45ccd00a7da1f400
840006faa72b789d32a774002abd66f3de9a957cb6be0966cd3a820cc00840ac7f26e21881601880d66ba9808d5eabb5d27761c1f7e137410042d1189bfbf000b456838f771ffe3d0cc27e1a4ba580b502ae14d49d0276faf0aad5311ded830cfe6f8b494d0805301710ff8700be02188aa36793f9dc289031b8071d560b05
75ab80953a5e30fb9e4c5eb3bf1e7bb904add504c048407c11c09f822e9bbc561983029da33bd03abd5350b7125881d632c0f3e5b5e93b5b0780180b602a8099002ef49fb341c8003a3aa8cfd47f2aa86b49e76d038af0f37df8f5e8df5b1c90733506c48500be0a600e20fb78f7e1dfc320047ad141d041f57f49e0ff2b81
5b056c75b4b0d3ff9617c0ebd2e9cb7c2a80ffa703d53a40e0407802f0b457849fc1e74681a2f73b0575a380ff90c0ff4702ffd2d17d4e1d7d7d14c84bec0b20053011c05707eaffe5400c14fdf7ef7342303f8b045001582ba8bf24f07f49e07f4be0df8aa2850e2872c5bc1ec651169211a8fe2180ffc381681c72e00c78
fc991e35807b05f5bf3ae07f49e05ed11dd964cd017c177b2d144ecb30c602eaff2e206a07f01cba077fb0fbf0ef75dc4b0035a0360af89784fa7f4be05f1258e848047b31df8616f42c460268003117c01f801a29884ef0259fd11142401d002c15f02f05f5bfb451b8d6f50e0a9c8af69a98487e2068ad5e0ae000880c74
70c99ffd06cc6f8576e2a81d4507f19f0aeaffd46b76afbe150f637e3da6062c16c01f0222770001a8a18eecf39a65148ee765a3efc3ffa5a0fea704fed251c21a143de43af1d7a19fda6d4a312e0444eb404d04c41cc05051eae807ba0fff3e06a1ad2154e4c53c802e960b7d78ed142d820f16a2fd2d69608d73ac24d4c1
81a815d0f181c5684c8a77a3805241ed75aaf7bd2403b1e9fd1b800fadd7c0a6762ba016e4a99c00c8851efffecd8261400e9a0640a1c8305c2ae04e025b1c451398d7c3188489020207ea42411c4075622ceec39c23f57d78afd7eabd4ef9ae74160e1b84af83350815ed89918e026e7ada2646f9f503f17b6ddf7d35d14e
59f542d5ea43ace508e19b60267903880e0f4b1e334c5fbebe5340aba05ad041d5820e3336085f0f33b68e005a05d18863749fd72af31026cdb8bf668df3800d92d7c79ead02c2d48129757af76118a0d76e4daf4dade4ad9ade7d980dc2d7a15f9faf0484a780569cde853fe05afdbd0c4200943fa17f6b0e2f65fea3f7e7
ccdb703ef60c738e3aff7976c161b1d1d74529529d3303ce63cd3c17f59dff665e09b366357ca9671ec31a1feaf48c357fc7fc7afea6fbe26f6810f626fa79e3ebb37fc2bc32e7de4b8679887363f0bc493dcf9dd7e5bcd938af57e67b9c9cadec6c7d73ec3ae5f39579827e70a4bfb77383fab741420b418963c6d3071e6f
4e9e6418e66321ce7e65de0e1e73e639f03cf938f0b3601e83cfd28fc5077f0ebfb741d8cf8ffee00fe2b7443cf27b86f91e3c5fde9efe5ec9e3cf3c179e2b6f0f8f39f352785f7f7bfe6636c8ef6d10320cc3300cc3300cc3308fc20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300c
c3309f1436081986611886611886613e296c10320cc3300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27850d428661188661188661984f0a1b840cc3300cc3300cc3309f1436081986611886611886613e296c10320cc3
300cc3300cc37c52d820641886611886611886f9a4b041c8300cc3300cc3300cf3496183906118866118866118e693c20621c3300cc3300cc330cc27e5373408c57bbf01866118866118866198bf05bfa141c8300cc3300cc3300cc33c87dfd02054effd06188661188661188661fe1678effd067e3d02028082002000257a
49a4cafe1be635e91be502e609f0a833e708004ae85f41b3e57495f29a7d3dfa63dbffc9300cc330cc67e23734080dea91df330cf3e1108ffd271b280cc3fc7d39baa415df4498df1261ddb73cc3ffcefc8606a18284d23f3a2821a120c146e17b40db840307020e286ecb177cc640c78759ad12120a1d00f9de6fec132220
e0e818a10387f74b86f96954ef87f96f0027e7a0e865d130cc47a53f8fcd7f03e865809dfecafcfdf8cd0c427db114129d68d1a1814407253a7bf564de0eba58faf020e06ab3908d42c6a0004821e9275a74a24687563b70faff8a795d8c31e8c08107178007070e5c5ea9cc333009df8ce1e8e43ababacc7f9d3a4a69d539
5ace81cf46e6a3a1eced59ea1f662ed3df0a3b8b859dd3ece4f87bf25b19844a005228b4e8d0881a8da8d08a0612ad9dc6044fd4d7c5788e1c0408110208e002fad813fa50643e33c7a8608b160d2ad428d1a286d4117d73e0103c5f7e3d470fafa38d410f3e02280878bfa3e218c3bc3ac7fc24fad1dadf9163da1883aefe
e1e96b184758988f46dfb16166738b0e129dbe53030e849dc9aefdc10e8ebf23bf8d4178dc84251a512317390a7140252ab4a8d1e909cc13f4f5315779172e620c904140c0d5510801c591874f8f022021d1a0458d0a85c891638f0a055ab41cd17f231494bd9c7a0810224202a523fb01ef97cc33e0756a50678eae1a352a
d4a8d1a041830e1d1c0878f010c047d0fbe1c2e5f5c67c28e89c2663b0eefd68d0d873da850bff6c2e0b9d6302b051f877e2b7310801da8c5bb4c85160850d3662851c079428d0a0d19107e657f0d01257f657f21c05f031c2141d141c78103679946128925fa3c21e7b6cb0c61a4becb04573162514df7c25f32ba1c46e1f
1122a4c83081848f102192f77e6bcc07e4a808dc5706febcabd2c4f5fa390de6027d408e0372fda3448b060e1c44081123468a042952eb2cedfff8cc63cabc2fc7f9a7b4e3b64189127b3d9b0b94a8514142c187871831122448f599e1f42ad2cdeb7d56c999a341fcf10de3dfc2203cf7ca1d70c03d16b8c535d658e3803d
4a94e8d001608fc5afa23f8afd5263939e1b21c257fc01173e4224f011c283a72384fc0c3e3374696a51a0c4163bdce10ed7b8c202f72851a0b306e1b1e6c67c1df3aba0d1f5e0224484010618630205811419069070e1bef79b643e1ca77b37afc923e60adda243890a3becb1c61a6b6cb1c50e152a78709122c110196a8c
009b7277ac2504d8d066de87fedd8ca283ad766e1cf45cde60873d72e4e8201121c41019461841ea33c3b7e9a3a7afccbb053eb45df85b1884060585060d0ec8b1c012ffc615ee7187add8e8c9db92ef4d7ce027f237403db1a60584ad954891a20330c21413cc9062a02b0a99cf8ed211c24a47089758e12f5ce11a5738e0
60d3511ebb10f112fe4914ac1ab3070f09128c3042810a1112ccf1852fa3cc83a8931f12121d3ef345af2fb9afe5b150a3468e025b6cb1c412f7628125562850c28787213254aa828242001f210278567a4d9c18860cf396987d9f56768bda4607f75861850516588935f6d8a3458718314a4c2055071702217c04f0b556b5
b273baffda9f877e7c903ebba34c39ccc70b8bfc3606a1399e286534c7122b5cab1b5ce30a6b2c910bba643a42c071e841f0a5f271ce23324aff9f022095d246a1b0bf9a1f0e848d1066c89060603da3548cfcd93604e631a4e8508b1a8528b0c116f758e04adce8b4d14657fd76f61031eb55e846f64eefbf99e7a1f41a56
0a909256aa277ca418608a031404a6b84089ea4ced95618e468fd297456994bced5cf99c8b51007a54284ba944895c1cb0c3166bb1c202f7b817f7c891c3878f1a05a03af87091a818316278ea587765ea09596886792bfaad518c285283c6d6f8efb1c346acb1c43d1662892db668d1224102a80e9e7010aa003162842a84
d0b5b28ed58ef89c087347566422bb3d2dd68fb6b27f1b8310301e8d0e852ab0566bdce21657b8c20a0b1cc41ed269e03a029eebc01120c54b01d8434cfcce53f665497766125bc961054845c66027cdef0569a629d1534d73ecc652a3c11c5be42850a3b597fbcfe72562ce31ca6514252411a8add8628915d65859074267
14828584108023141c47c011802bc82814426faa42fd4052caef9e8c2aec47534ae9750b744aa1854227155cf818880c351a0488b0c50e356a76de30679c966650eca04287e693efe926fa21edd8e4fa02bd7348cb6023eeb1726e918b037ce503aa86af0462152293291215c3132e84a251f67584a51f5df9585747e677e2
3ce62f21f5ea2e918b1c0771c04e6cb1152b6cc4026b718f8d58a3112d2a35802f0522e52356111215234400a9143cf836e66dbed367c3187e0e5c782a800f014f3970e17c38c5fddfca20345e8d0a35f66a8fb55a638525966281c2dd03aa41e009849e03cf11701dc011c2461c986f51da08940a6825d04885ba53683aa0
93024a0a40b95aaeded70a53642076569a98cd40e621745b7a6112cfe83255a146811295d6e76bd1408a0e8ea3e0390a9e2be03b80af7f7584d086e17b7f9e8f8989eed31a5668a542d3299442a26e1584e3a346030f3ec69820478e46b5effdb6990fc6b93270891c050ea851f604db3edf223cba94b4b12c1a1422c746ac
b0759738384b14ee0ab5bb442d0e502a40a980bcf3b09721b65d8250861012e8448756b5081121800f4fd762b131c8bc26a751c1d68ac8e422c75eecb0112becdc15f6ce12b9b342e92c51391bb4a281a76a149d8f7d17229121e22e840307052a1bf53ea68c7e26d4d11854426b69c488a110e9066c64287e9cdedcbf8d41
d8cf7b36974aba529668dc02d22be0b92da2c0411aba885c7172a1a4e7f159a6eb33279fa2a842ab80a653a83a85a251908d44d32874ad834eb970840f4ff9f0e123416c2588a798608c11122408e07f9306c37c5e8cd3c0133e42112215298622c3480cd1881a0079dc1bd4e844874ed470dc0eaea7e0f902912f90f80291
ebc0770157470d5fc6e758ef4ad1cf4e0155ab50b60a7923d154da65e3b42845805294a850a3518dad03661843bfeef7a095813758e1803d5a9003e133efed26bed2a1432d721cbc3576de1d6a7f09e16f107807c0c9e1aa066ee7a26b7de44d8055e343b50a95aa90a912030c90628014312244765ccdc9c9ab92f955885e
169851c62d516975dc3d76d8612736d8b84bacbd5b14fe02d25bc3f57688dc3d3ad12190009a10551b60db504bb1bc2b11a8080ebc13b5d1cf8650ba944a504fee0c438c2171d461753e54bdf06f6310025aec4499d4285decee74f05c05c757881d85690c4c128141e020f6044257c0753ee131a63ff083878b3aea4149a9
d048a06c150e8dc4ba94704bfa7aa180563a70948f5425986082891821552912c498628a7fe04f4c31d186a2f7a1263ff3beb8f01021448601a698e20ffc81160d420488b0c41abe9e8712b5d3c2733b2421300c8151048c420759e020f2043c57c0ed45091f9ad7276bfc13ddaa4cdd6fdd017923b1ab2436958070804629
5490809038fef84483c3bc88162d0a1458638b5bdce206575861890ab56db8fe79678f8eb3880ecaa9d07a3bb4e11a5db44618ee30094b746e032125dc26875379282b074b2814aac64ee518c903466a82091a28487b6174ecc5d15ce1ff3e52f6ccc7a47feb55bd400a29e36eb0c60a6bb1c2d65961ef2e50f84bd4d1026e
b8c520c811fb35203a389d03afdaa1ad5c6c9d0e392a786a05478580727ae9a29f0fa3abe16ae1b60b31a7266c2280071f2e3ce003a58dfe5606e1b9fe19a02004b441080c7d07b3d4c565ea621cb9c80207b12fe0391fe571bc15c2fcef4994023aa950760a79adb0a92402975a77a84e41742e9a2e80d7c51822c305a6b8
c41c638c30c210534cf127fe8119264890d8ba88cf35d6cc4350c1b98b0811320c7081296a9410903af598dc078044275a38a241e02964bec43812b8481d5c240e26918bd47710b880e788efa68daa93df7c8eababa91bac3a856d25b12c3a782ed076024503741d208402447fe76498538c685b81021b6c708b3bfca7f827
6e708d122544bfcbec03ebf0f7aed6d5b219424138128edbc0f34b04d1014172401ce7f0e31a8ed7424a89b62ad07a028d2351c8065b5960277314aa442d1a28756cf8edd98614fd6882d28966bfe76832afcf69565d871a0d0a14d861a79571efb014f7d838f728bc2554b08117ef10c407245109376ce00889aeadd01407
34aec20135eaee80b68b209507050750bfef2c7d744fd3e26d5492467d7e3391a1468b0829061822468c00e10732077f3b8390302228008950780e1078026920308904e6a98b8bc4c5387290facea733084ddb0d93297b22aca347d0a811363a4d74572bc405d589542d50d5806c3c34228087181932cc30c5175c628e0b4c
31c114535ce012638c1123ea45083fd368330f21404a7aa10a90aa14133581542d1cc05e2a4d0a4b85024254081c89812f310e8159ece0ab5ec75928107a02beae0b3e6d9d4d28754c80545ab8e1b73da57a98bdb05340d14aa4258d51a714f6b540580285327b405f53f8130c0ef3228e0661891d76b8c33dfe857fe35ff8
270ae4e4e411ee510df8998ec7df0912bd5208dc0ea9df6214d608e21af1a0c1206910f8129d94c80b85bd2351aa1afbb640d3e6d877151ad5422ac083871824d061ca2d8c3178149961989761dc7d7d4551926e6b50a34681027ba1db4b883bdc3bb7d8b8b7a8bd25fc708f2c2e91a635d2a4411cb6705da0aa15f62eb57c
cbbb02db668343eba3910e2404a4fa3c33f5a8c6af3b280b1293f1e16384095cf898618e0b1468b460de47e2b73408fb77194708788e2083d01718862ea6315d24a73145097d872e44bffb1548e83b32e534ebc96a951a8fd768630c4a49758379ad90540a1e24ea4660efbb283d01383e6a912010038c31c20c337c555ff0
155fac5138c404030c1121d68a539f377d80e923e02a3208954a219482a7047ce5c251c0ffbfbd3bdd72e3561634fa01c891c9a906c9ebf6edf77fb0eebeebd81aab38e40c44ff4026c992e4e1f84876998ced654b72c9b24de580400422467c6c786d5a3a53634d47668575e2d964c27d6e782c2d6f2bc7a6b02c52f3224b
78b9733777c8156273a4b951d2fcf56b74faff1708c44c7f3d5812eb19a7efc7ccaa21f1d333409798ea375c9e21dc73e0139ff8173ff37ff8bfd41cb05852eba677caf48e0130b77165c55138827350a642c8605108b614169570b71416592cdd76ce3398919d6f688623c7a1260dfd34b7cd51869c95545473658db853e9
ddb96ba3dcc4e7aafe532faf92d81ceadc517460888ddc4c434dec26fa6c3ef3d97ee073f28e5df20b63f6992a6f58979ebc0aac2a615d0aa985ba0f78e3e386c668d80f86a7d1d000633048b8def7ec97e68de710042f530774e3484dce918625ab8b316ce3a9e9e26b719d01e117ac31b8e9cfc4c64c42e6e2f9c17c6a2e
f3754ee11ac929084c4c3c3b99582e3aaecee78de20272f0d08c71053d8cd038a1b2094b0bb54930e48c54e4dcf1c8036fa6bd8fb7bce12d6fb8e38e054b324a1cd9b4cba94d65d49c21b4404a110427904cddb8e62c444b434b434f436a465293b0363d2be3a9acb070b0480cd5b4d9535c04857383993065c77c10861047
a6f8207831a78d8ff9bfe71acd41b0b7062f81ccc5e75f62e3f33096b45cebffbdfade623bfa9849d8b1e3231f7967de53b32735962249482c53b67e3ed73bf7dabbee85a1993657530b5966a0b4b8d2522c2ccb85655b59aaccd0fbd859b915211b0533087eec10111a93529b9cbd5fb0f315a514b86063276609d300fb64
ea3e6a909b6ed9a1fe88cbfb6e0e026356709cce0d76d3cccc3d3bfbccce7ce6e03e71749f68d34ff4f967289eb0654fb6305495615d19eecaf82e49d3401b02bb31908c01c6c01802bd13c66944995cf18d7f4aa41003422f30fad8c93b18834c01a100cf3c53534f639d5e5fe3b6ab0f0845629bf5de079aa931caaef7e4
6dfc8decbd90baaf8bcc5ed76fd37fe6f26561cd45409c98d890635a20ce8be8310823d087582e5af7d0f496beb730241443cac6e7e452012b4ab9e70d6f799cb2825b36ac59b1a422a7c0924ea74bf4d5a5667163c0892586820212875dc7f3a77734340cf4089e4a1c26eca87c4d3e7698a1a7ef3c75e6496d2cd3b2f61c
0c26d3c53c4e3b75c3742d773e8e4d19a7e0f0b53d90bfdfa71b9d3678049a21f0d47a765de0d807da31c4205904c7f57e16eafb99c7c39cb20ab434e648c7119b384c96922586328dcd9e527b5985729dcf7e99eac48c89017062a1ca2cf7a5e56e99b0ad60b330ac0ba832e87d2cd9ee43a0099e264c67b95c4bd61d90ee
997658f03414b8d13230d08496252baa53efd182ec34c74ca93f662e119dbb8936341c397260c7ce3ef3ec3eb273ef68d38f903d9365079645835bf4dcad46b69565b3b06c4acbba98baf45b629f091f68c5d332125ca018c245401857d757fa0838cdf89dd71aed10a88740170c5e1cc1065a1387690d0c2f06b2bd26d719
104e7187101783bd17fc203ce3795f5bac353483f0d40616690c86cce53f7ba50ce02ce42e96d855a9639d5b3605b1f3d154cdd97be1d0073eb781e746d83596436d38d629dd7141da566cfa159b714312362cb8e7613a3bb8614dc5829cfc1b33943437a82ecd73782c229604474e46c5822d1b7a7a90402a8e5d2818fd13
b6df91b6077a77e0d9348cd2d18c23cd28ac4b18c522588a240643fde90c6ce0b9f5ecfb40339c83c2692d76c52faaf839f810c74decbac0c7c6f3bef63c753e8e9f0816449bc9a83fe6e5006b8f188f75429e0acb42d8e4866d61586571e66f5c345eff68ea58321a37a38ac4b02d1c6f2acb9b85655b1a96b9a14c0da907
2f26fe89c510583843978d50b7b874cfd0643c19434fcf61ac59cb91b56cd94e2ddbe641d7b1adffeb9963a65e9bf9bca9793147b4a563cf9ee76978ccce7c66673fb1779fa8f38f8cf927b2e24052b69885275f18b695e5edd272575ad6b9a5caa6fe1b06866018c562ac9038c7aa807634f8e91d7bcdf73c9c8f65c48efc
817d67786a603f088d0f8c2e3e27e55422fafa8241b8d28030b6bf3618b104318c01fa01ac87d40642081c3a58a481621e3b71e5cfd3b9794c62a14c2cabdcb2c961f0a7f899d4c532bacec760f9c3d1f3e108fbda52d796a1ce90ba226def590c0fe4fe8e52ee5972c7967beeb967c58a729a4578d951f4ca3f5ef5271962
d0729a4b38355358b3c2e371187232d65252fb8abe2f196c468fa10f9ec338701ca1f14237bd7ce2af19dbdfb7a3b0ef029f5bcf873af0b9f11cfa582d30f8a9ceffeffe107eb0b9a94cefe3fcc1e72ef0dc06762db4635c9c26624e33938c66f2d5ef3895481939bf575258e796c785e34de5b82f2c8bd49225d7dfc97bae
2eb2c69c365d97590c0a37457cdf96e934e6ca9853e75f00670ca533d489d0ba9ec11e1830b46164e75b76be666f1a6ad3318a9f3a342753dbfacbd6f597ff254ac17c5dcc1b38e3941dac69d8b1e7c3d44df4b3f9c8ce7ea0493e13d2275cb9235b1cc8ab9ea20a2c1686cd2206839b3c963e1749cc8803ac8225109f0345
0277a5a5f38110e279fd6bbf2a051802f45315e2c7c6e38c4027480f2d739f12415e71bf92ab0b08cdc51f160b62f1de328c31d8b1c4fade7d174ec3e9cf87df4f7fb93a661ac1915a4395c1b680ae8c9f53ee0ca915f224ee743483b0eb840fb5f0ee00fb0374b543da9ca25db2eeee590f6f59fb4756e18195dcb162cdfa
a2a4e5b2a3a82e30d56f9967f5c81410c651142b0c868c94520af652b2f305cf43c2de4027b1a359185b8e1e7a897b6fcec6737276da7fab0761df099f6be1dd21f0ee18d8b581e39425f4d3aaec5acbd9e68ec141600cd08db194e538c0b1837e30041b37cfe699677aca57fd96d362c6ccf78e9038285258e686bbd2f2d3
d2f276914c1d806326c15ee3798c4b661a376de2e66a9118aa2c366faa327bea57606d1c1921d829a32814ceb0b3811d1d3b81a31f39f40dc37024b33547dfd3e331580a721694e4e4a46424924e59c26b5f76ab3fe37c6e30ce1a8c67806b9ed9f1818ffcc23b3e9a77ecec7b06f799343db0ca5baa45c772d9b3a902eb85
61553a5659ecd6bf482db99bc72a40101bd7972e6e0cb5a330787b6ae676cdf7bc612a15f5d0fa981d4cac30064b2f817e4a4ac5d14ef177e4b5baaa80d04ced05adb12426c19904272926a4f8312178d807c330580e6e6aa8325dd0d7fc1c3d150d18c81cacf2696c8417322b54a990b958fb2c02c741786ae0d3113eec0d
fb8363a85392b6c00d4bd2f18eb57fcb837fcb5d7864c396051505393919d974f05d9795eadf11e7983932329630cd29cca958508505d998124468c3801f1b8ec38176a8a9434f20604cbc8ecb84d399b8632fec5ae1730deff7f0cb013e3786632f313b16aebd357efc3f9bb384a3b7f4d34e663b38c268312ec5494a421a
cbbc8dd36ec0ea0f399749429e5896a9655b581e17093f2d1d9bc25126e65436fa8ad742dfe7f330f3d18c18fc65eedcc0ced973f5526ae373ca1a4b6a63b7464b600c3dc7d133740dcf89e3600f24a6a5311e8f21256349c5926a3a4798939061093ae3577d652e13f5f8e9dcef7c6ef06540f8819fd99b7778fbc4326d29
728f2b035519d856c2dd22068273963b968ac635a5b3902771de5ee60c556a63f54d901723e0ae96895d45fb1093294fa9c70738f481430f879138a5f51fb0e97c550121105b5f934e0bc98a4a96f4a1454608e380f1063f5ac4183cd09bf3f9a16bdb5f7bd141d14cd9d1046c6fc8bca1c4b04f0cfbcc905b13338402756f
d8d786c3d1521f13da6341682a6cb7c28d5bca70cf5a1eb80b8f3cc8236b5953504c6706ed6966d2794358db63ab6f3bbf2bce59fdb9dc389e29cc29a524234382d048cf21b424634d188ef4634b2090594be146f68950398309f1d73cf6b0af1dfbda72383a0e07e1d8c0b18b67eae692d16bbd3e2fdfc573a6d04fdf497d
002f243663292b96b264319dff75c6e9868efa26f3c50f4e41a181c4413665c7ca349e552f134bea6269245cef02717ecfcec733e6663a32956b8f218ea53877f2062406caa9139c0be002a3eb696ce0d90acfa6c69a913e1eea20a798ea7016a464584988db5f97addbf4be55914c59c1d8b3fbc021b68fe1339fe3f0793e
f29e0f7c30ef39f001313b82e9595bc3682d388373f6d4895e249e930bc404828153f9b3c8b9cbae33069907d25f738270bad57c1092008640e76343adcc59122bb8b9a916e7e4cc6b753501e1bc9c9c4bce3666c3a37960a02797943ad4783f6082c106737a687ff5f0bcc6ded8539ada00a9174a11321b30ce33249e43e2
71c1932542c0d0f686e3d131d609ae2d28ba0ad3af590c0f6cfc236bb967c59695ac59ca928a0519d929ab70ee26fa7a2f7cf51a99d38cadb980716eb10ed049c75a6a8ed2700c2d75e8018124c3a6353ee968928167e3f163cc7677bde1d05afaa3c3348ebc752c5a8bed2df9c86968ee2d5ca9f1e53c2f48851062996d22
294b59f1c0230fdcb3664546a60b4bf54df2c50f02e7ee7add2834636c4ab6eb0206e8122175e7f346d7f67abdf4e2ccfcb4be3017737e2fcd0b691fe267f6d4059efac0f3e079f69e9df73c4b8f118327c392935150529048824718080c1208222cc45090e85dab4e3c818696679e78e213cf3cb3e3998f7ce2677e89c120
9ff82c4f1c658709076c18791e1dcbd151f68eacb5602cf518fb6dcc1b1d974ef3ab2f4a442f4fb55eabf9638825a3f13ede75739f8240e76300ed65ae5a7add9fc8d504841003918484a5a978300ffc37ff8bcca4dcb3a191068fc7089860bedae5bc05c6801d03a91dc8fa9ec275e01a8eb6c68f3dd679440ce398d0d605
ae59b0ec9630acc9c62d5578e031bc3d358f59c8623ac7907ed14df4663e52f51d9d47bfc4abc75d649933c92859b0664d3b0d7525c0c2670c4385ed763877a0b3354fa1a56e4700fce8e8da0ca90bcab6e4be2f588e19a34ff0c12161fa3798d7fb90feae2e5ed473dbeb441216546cb9e3277ee28e2d258516a0a9df35cf
b9ecfd745eb70f7c6c46321747be3c65963c99e75e9efea1eb66bef1dd6f0484e70ec0b191dbae0b7cac3defebc0e7ceb31f3d471f30a141648f259be6f95a3c814e067a19192580d8a9d83ec7e2feee4f40bd121ecf9123ef78cfcffc8bcf7ce279ca10fec27bdef19ecf3cb193038db418df637b4fd905d2632c366dbde3
a9b32fca9ecd3702c2f9be96afbe70c5e60ca1c4e75d3b6d86bd3b8e7c6a6257f376340c2224f2fafb785f4d4078596e56b1e0917b06d3515172e4484f8bc7c79f29dfba9a4fbfd0d77fef9f6e3ec82a00238c1dd806ec01b1cfb4589ae100768c836ec70cba25697b47d9df918d779461cb2adcb3957beeb863c99282e254
def7eb678eaee983547f9539289cafab9494726a36334a0cf61212aa50d08c0bfabec49b9c91849d079376d36a2bc3f425742baa6ec37258832f21641052902b4d5bfc81e7d8dcfeda4d55154b56dcf3c03d771414183d47a8bee1e5b69f45c4e03db403ec5b213582114f33c44edea933a7b3fa5fcefbbd7573b67ef070ec
6307e0a7368ec8a9fb40e701198016cb0133e519e260f18060b092905352b1225cdd834cfd59f3ccc12335eff9c0ffe37ff8c07b76ec7866c7473ef1894fecd953d3d28501e33d6e083c35310b3884780ebf4a63d9b7355a37329b9f6373767414993a790b4f8de7531dd877f1b9e82df0a28bf7eb741501e16566212161c1
8207ee31081b96b4d23030c4c613a77fe2575ce3f3542e5a0fcbc0101aba714f6b9ea9711cc348db8f78d30396c41794c392657fcfaa7fcbd23fb00c77ace48ef5c5d0f9629a35682fce2dbcc6d92aea9f26ded197416142424e41c58820389966168682bdcfd9f70947b11c43a01e0686240086d417e4e392b2dfb2e8df50
8ef7647e451a0a9c64d71bf4fca1db30dead0e4b4accc0ae58b3654b41feaa5f5ceaef130f0318acc43f099610a01b0d872e76b4f6413876e13472c299eb1fedf44df2fb5f1689e70b5b2f1cfbc0b117f6bdd00cf1ec21c123d2811c0808e3f48760c8c8284dc59a2d3d83be7fd50b9e404dcd073ef13ffc8b77fcc28e1d07
0e3cb367c79ea31c69a5630c2378c10c901841240e58dfb790274262a64632bff72fbdc1fb5ca6b3f97327ef432f3cb7c2713474c1105c9c7810bb79bfdec0f02a02c2399f701910de71474642c786911e4f1c0a7993572be761c2a3f434e1c87e7ce2597286e019c78663d2d39b78b1e6a124f76b8ae19ecdf896fbf0864d
b867c5868a25e5453fd1cb52517d19a9efedb27c342745a87058323216942ca5a4f02916c3188483ef698696da8e80a10c0bac5fb1f477acc6b7dc8d6f59860da5542fcaab6ef3da9dc6064c01776c5951b2644d4eae25a3ea2be7d64fb1799823c149c21012c6c1d15807de30f48643c269dc849de615de847ff351224008
c4eebfded08ed08e8e6114828f9d5947f1b474048481016f02a9c958993577664f631a460d08d5173c9e8696279e78c73b7ee617f6ec39525353d3d2d2d1338a8fe7e9bd63e8856330f8d1d07486bd63ea12cc34dae4df7023f7fcdcb02d080cc1d00d866674f4c13062b126c14a72d170f1d4fbffeffe4f7fe14a02c22806
8476dadd5e5148cac840380583b7f9b03ce707855e7a0e614f261922863a74d8f148b003deb4f102950a17362cc23ddbf0c87d78642bf7aca66ea229096eea29eaa60c8bbe88d4f7f3f5b514b3842905e6dc7d94825c324c308ce269c2c0ceb730b478136b06822c71614311ee5987471ee42ddb704745454e81c3bdfa83de
3fd25c591117f80949cc39685319f54de7d13053276fa958ca0a0ba4a3c5d904f18661803035a0b86ca8a257d4b7cd8bc9310821800d4216c00910cee137c0c84847372de53b0633e08d3f9d0956b74d2eaa6b64ca287774d434d4d43434f474b1a706669a196d9090020127600384d130d8781f77bfd21849bd6c9e739af9
eb05f1823306671da92fa8a4a2a424936ceac7fffaaa93ae2620bc2c2f4b25c588908a25c86530789b0fcbf3051be8e9716209087d18394ac32a34f406523a0c86050bd6f2c04aee59c996956c58c96a5a4467a71d8ef3106b7d4ca81fe765939914378da44824c11ac318461ad3524bc73174d46640c8001317acdc4dd7f2
1d6bd9b2664325b1e4f9d603c2f3276ca6a6f5315718179f7a5fabb33918ccc958b060cb96b73c5273a06685c3907a870de6dc667deed974fa0b207a65c1d74f9c20f399c278ae70eeda18fb1ec477ed7c6e69c182d8df7b412139a9a43a7242012fefadcbd9be0b4a2a2a0c9091313212e66d0411300142cce45be1d48d7f
ded4f9b57fc7ad9a6ecdd30f4eeb6c99bb7803d662c4914ac6bd3c702771333a93f371abd7e46a0242981a054a2c6749c4e12443e4b6b383b3b964d44e1dca0619e8e969a5a333038e8c6e0a084b0a1e78602b77ac58b3907908eecb81f31a0caabfca39289ccbc3e3e22748416916ac644d2b3dbd190940c912302c2859b3
e14e1ed8b09966ed9594d3f5ec6eba64f492bd080a7569a9be6d1eebb466c5238ffc6ffe1b0b34d431cb1cec171941733b1d7cff13f275a661fe7e6c4601b1602f6e6ce752f046def0461ed9ca964a16a4a47ad72a2ec33587a5a460cb86b7bcc161696818e919f1a79f27a70b504e3d08e7fbd87cfdcbaa5f33cd5e946943
c760b0c69148c64636fc243fb195cd69748c7d656fdaab0a0899f6d0ac188cb87301855834203c979314e48c2c18646460c44b20a7a4373d064321391b366ca76ea2e529183c97ad28f557bbac02300886848c4029054b960c8c04112c8eb56900c8a56049c5962d2bd69494e45377dcb9e8598341e0b4b9e34ec1b65297e6
33fa31205cf396473a6a4a325adaa9d18c3dc77fd7d8b1fb47fb56ebfe175f8e5fc9c8a631316fcf5907323df7ab5e880161c903f71cf92f1694f4b4a7ece037cd197cbd8fffb4794367aea44b24a59225ff35078452c6525dd10ce10f6638b798b1d36fcced968bcee4541827a4a41414f8a960c060595031ca88c1909152
51b16143c5829ce2b478d60632eaef769999beec3e1aa60c784e4e2b1d06a6ee99052b96d3e6464976110c6a967b363f332fbf55eacc4ce777cb29201c7804e35953d1d39f32f727fa8af8ee641a2c9190b062cd9ddc73c79625d594217c5d0b4cf5f7b2b853d77d4fcf8615033d013fadfde077537f7a1fff49722af57624
942cb8e781ed34e7771ed9f69adeb55718109ec9573f9ebbeadd8aaf83b7730bfffcf4e38c8cf5d489d5c0e9ebd5545c979dce14f1d5afa7d4df65de7dcb4859b0385dcb15150303c074222e6e802c28c9c97124df5838dde6353d379599bf77395be9769e93ea8f98df0d73c9a821909370cf8691f1b499a0be8f6f7d9273
a54f9c1d5a529925955951b12023d50ca17ac1e1a6b9dc8fa4383a9a698265b8580f7f7dcddce6dbf0fb9b37c9e2da24a762cd860d25e529207c4dae30203ce7c262ee7b2e95948b9f712bbefd7f6ab1a7dd4437057fe334df6dfefadc6f309d7a8ace3b191a0caad7e2548e414201a77114150bfc743e62eecf370786e9b4
b971ae82d1eb594e61a15652a8df726e2a631012a094949e3561ea58a87ebcd80bc09d06c56414e4942fcef72bc5b4c22ba6338405c9a9eb7ed067fd5fc34c3548c6909894cc949454d3c6f4bcae7e3dae302054bfe5b23ba89dda47a4a4533db95cfc1c37b59770af2eadadd46ceea266386f74c4d75de03c9fd44e57b19b
f6eab42452a97f57bcc7cc1478080ec87078cae97e9b7f96fa71a677b4315893e04c4a62529cd1cec0eaa5f97e4d49595092624f23d85e2649f49af9fece9fede52a243119a9c949ccd450e645fbe5bf9f068437e6cb0ea171997c9945bd3c45f4f20fa55e9b73a399d80c4510928bbcdfcbabdd70794a4e29f5ef30171b30
820512ccc59c5fbdab7eb4b9fae9d411d8b838f4da38acd1cf5fbd34f78d8e5b3706c17f5531a77e3c630cc6c4b14ef6140cbebe75b5068437e8f22234bf730cfdb55db04a7d690ef3fe48f9a75ecf4afd79e7dd6e3b2d3505a68d18f557325337608b316e7a8bebb34dbd3457ce98d3b67fecb8afb377ff2ae694059c8342
833d9592be361a10deb0cb6ce1b7e84b5efd93fc56265baf65a5be8fcbacbbe818a2bf919d02c1986df8626a9c527cd975ff7296a5faeb9c1b6e5ddeabaf8f06840a79d17e5897ceea9feb65e734bd9695fab1e48b6f5fe742e7ba7cd903589f72ead7c8173fd260f0eff04fe9daad01a102d012027555341454eac790afbe
956f7c55fd5832e57ae266aec83f63c1a9fe7a9733a8e3b7e7bfaabfc6e560a7d77cafbeae21184a29a594524a29a5fe321a102aa594524a29a5d48dd2805029a594524a29a56e9406844a29a594524a2975a33420544a29a594524aa91ba501a1524a29a594524add280d0895524a29a59452ea466940a894524a29a59452
374a0342a594524a29a594ba511a102aa594524a29a5d48dd2805029a594524a29a56e9406844a29a594524a2975a33420544a29a594524aa91ba501a1524a29a594524add280d0895524a29a59452ea466940a894524a29a59452374a0342a594524a29a594ba511a102aa594524a29a5d48dd2805029a594524a29a56e94
06844a29a594524a2975a33420544a29a594524aa91ba501a1524a29a594524add280d0895524a29a59452ea466940a894524a29a59452374a0342a594524a29a594ba511a102aa594524a29a5d48dd2805029a594524a29a56e9406844a29a594524a2975a3fe3f0b8316f7c409ffb40000002574455874646174653a6372
6561746500323031392d30322d32375431393a33333a30372d30373a30306f05a0fa0000002574455874646174653a6d6f6469667900323031392d30322d32375431393a33333a30342d30373a30302fb002db0000000049454e44ae426082}
 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure 2.2: All Rotate and Mirror Flags}{\field{\*\fldinst TC "2.2 All Rotate and Mirror Flags" \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb240 \fi0 Sprite Attribute 3 {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par V E N5 N4 N3 N2 N1 N0
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 V = 1 to make the sprite visible\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 E = 1 to enable attribute byte 4\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 N = Sprite pattern to use 0-63\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If E=0, the sprite is fully described by sprite attributes 0-3. The sprite pattern is an 8-bit one identified by pattern N=0-63. The sprite is an anchor and cannot be made relative. The sprite is displayed as if sprite attribute 4 is zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If E=1, the sprite is further described by sprite attribute 4.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sprite Attribute 4 {\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi-300 [A.] \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Extended Anchor Sprite {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \li600\fi0 
\par H N6 T X X Y Y Y8
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 H = 1 if the sprite pattern is 4-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 N6 = 7th pattern bit if the sprite pattern is 4-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 T = 0 if relative sprites are composite type else 1 for unified type\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 XX = Magnification in the X direction (00 = {1{\u215*}}, 01 = {2{\u215*}}, 10 = {4{\u215*}4}, 11 = {8{\u215*}})\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 YY = Magnification in the Y direction (00 = {1{\u215*}}, 01 = {2{\u215*}}, 10 = {4{\u215*}}, 11 = {8{\u215*}})\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 Y8 = Ninth bit of the sprite\u226?\u8364?\u8482?s Y coordinate\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 {H,N6} must not equal {0,1} as this combination is used to indicate a relative sprite.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Relative Sprite, Composite Type {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \li600\fi0 
\par 0 1 N6 X X Y Y PO
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 N6 = 7th pattern bit if the sprite pattern is 4-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 XX = Magnification in the X direction (00 = {1{\u215*}}, 01 = {2{\u215*}}, 10 = {4{\u215*}}, 11 = {8{\u215*}})\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 YY = Magnification in the Y direction (00 = {1{\u215*}}, 01 = {2{\u215*}}, 10 = {4{\u215*}}, 11 = {8{\u215*}})\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 PO = 1 to indicate the sprite pattern number is relative to the anchor\u226?\u8364?\u8482?s\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
Relative Sprite, Unified Type {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \li600\fi0 
\par 0 1 N6 0 0 0 0 PO
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 N6 = 7th pattern bit if the sprite pattern is 4-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 PO = 1 to indicate the sprite pattern number is relative to the anchor\u226?\u8364?\u8482?s \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The display surface for sprites is {320{\u215*}256}. The X coordinate of the sprite is nine bits, ranging over 0-511, and the Y coordinate is optionally nine bits again ranging over 0-511 or is eight bits ranging over 0-255. The full extent 0-511 wraps on both axes, meaning a sprite 16 pixels wide plotted at X coordinate 511 would see its first pixel not displayed (coordinate 511) and the following pixels displayed in coordinates 0-14.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The full display area is visible in VGA. However, the HDMI display is vertically shorter so the top eight pixel rows (Y = 0-7) and the bottom eight pixel rows (Y = 248-255) will not be visible on an HDMI display.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sprites can be fully described by sprite attributes 0-3 if the E bit in sprite attribute 3 is zero. These sprites are compatible with the original sprite module from core versions prior to 2.00.26.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the E bit is set then a fifth sprite attribute, sprite attribute 4, becomes active. This attribute introduces scaling, 4-bit patterns, and relative sprites. Scaling is self-explanatory and 4-bit patterns were described in the last section. Relative sprites are described in the next section.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.5.4  Relative Sprites\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Normal sprites (sprites that are not relative) are known as anchor sprites. As the sprite module draws sprites in the order 0-127 (there are 128 sprites), it internally stores characteristics of the last anchor sprite seen. If following sprites are relative, they inherit some of these characteristics, which allows relative sprites to have, among other things, coordinates relative to the anchor. This means moving the anchor sprite also causes its relatives to move with it.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 There are two types of relative sprites supported known as \u226?\u8364?\u339?Composite Sprites\u226?\u8364?\u32? and \u226?\u8364?\u339?Unified Sprites\u226?\u8364?\u32?. The type is determined by the anchor in the T bit of sprite attribute 4.\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \li600\fi-300 [A.] \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Composite Sprites\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 The sprite module records the following information from the anchor: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.visible \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.Y \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.palette_offset \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.N (pattern number) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.H (indicates if the sprite uses 4-bit patterns) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 These recorded items are not used by composite sprites: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.rotate \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.xmirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.ymirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.xscale \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Anchor.yscale \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 The anchor determines if all its relative sprites use 4-bit patterns or not.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi-300 The visibility of a particular relative sprite is the result of ANDing the anchor\u226?\u8364?\u8482?s visibility with the relative sprite\u226?\u8364?\u8482?s visibility. In other words, if the anchor is invisible then so are all its relatives.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi-300 Relative sprites only have 8-bit X and Y coordinates (the ninth bits are taken for other purposes). These are signed offsets from the anchor\u226?\u8364?\u8482?s X,Y coordinate. Moving the anchor moves all its relatives along with it.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi-300 If the relative sprite has its PR bit set in sprite attribute 2, then the anchor\u226?\u8364?\u8482?s palette offset is added to the relative sprite\u226?\u8364?\u8482?s to determine the active palette offset for the relative sprite. Otherwise the relative sprite uses its own palette offset as usual.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi-300 If the relative sprite has its PO bit set in sprite attribute 4, then the anchor\u226?\u8364?\u8482?s pattern number is added to the relative sprite\u226?\u8364?\u8482?s to determine the pattern used for display. Otherwise the relative sprite uses its own pattern number as usual. The intention is to supply a method to easily animate a large sprite by manipulating the pattern number in the anchor.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi-300 A composite sprite is like a collection of independent sprites tied to an anchor.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Unified Sprites\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 Unified sprites are a further extension of the composite type. The same information is recorded from the anchor and the same behaviour as described under composite sprites applies.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 The difference is the collection of anchor and relatives is treated as if it were a single {16{\u215*}16} sprite. The anchor\u226?\u8364?\u8482?s rotation, mirror, and scaling bits apply to all its relatives. Rotating the anchor causes all the relatives to rotate around the anchor. Mirroring the anchor causes the relatives to mirror around the anchor. The sprite hardware will automatically adjust X,Y coords and rotation, scaling and mirror bits of all relatives according to settings in the anchor.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 Unified sprites should be defined as if all its parts are {16{\u215*}16} in size with the anchor controlling the look of the whole.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 A unified sprite is like a big version of an individual {16{\u215*}16} sprite controlled by the anchor. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2.5.5  Programming Sprites\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Sprites are created via three io registers and a nextreg interface.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $303B ({303B}) Sprite Slot/Flags\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write: Sprite Slot Select\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 select sprite slot for Sprite Attribute and Sprite Pattern ports which independently auto-increment\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read: Sprite status {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-2 = reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Max sprites per line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Collision flag \par
}{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par X S S S S S S S
\par N6 X N N N N N N
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A write to this port has two effects.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 One is it selects one of 128 sprites for writing sprite attributes via port $57.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The other is it selects one of 128 4-bit patterns in pattern memory for writing sprite patterns via port $5B. The N6 bit shown is the least significant in the 7-bit pattern number and should always be zero when selecting one of 64 8-bit patterns indicated by N.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $57 ({57}) Sprite Attributes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Byte 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = LSB of X coordinate (bit 8 is in byte 3) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Byte 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = LSB of Y coordinate (bit 8 is in byte 5) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Byte 3 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 = Palette Offset \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Enable X Mirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Enable Y Mirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Enable Roration \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = By Sprite Type {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Anchor = MSB of X coordinate \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Relative = Enable relative palette offset \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Byte 4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = Enable visibility \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = Enable Byte 5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5-0 = Pattern Index (\ldblquote name\rdblquote ) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Byte 5 (optional)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Anchor {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7-6 = type and pattern {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = 8-bit color \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = relative \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = 4-bit color, lower half of pattern (bytes 0-127) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = 4-bit color, upper half of pattern (byets 128-255) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Attached relative sprite type {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = composite \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = big sprite \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4-3 = X-axis scale factor {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = {1{\u215*}} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = {2{\u215*}} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = {4{\u215*}} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = {8{\u215*}} \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-1 = Y-axis scale factor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = MSB of Y coordinate \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Composite Relative {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = N6\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 8-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Reserved, must be 0 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 4-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = lower half of pattern (bytes 0-127) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = upper half of pattern (bytes 128-255) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4-3 = X-axis scale factor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-1 = Y-axis scale factor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Enable relative pattern offset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Big-sprite Relative {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = N6\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 8-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Reserved, must be 0 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 4-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = lower half of pattern (bytes 0-127) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = upper half of pattern (bytes 128-255) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Enable relative pattern offset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Once a sprite is selected via port $303B, its attributes can be written to this port one byte after another. Sprites can have either four or five attribute bytes and the internal attribute pointer will move onto the next sprite after those four or five attribute bytes are written. This means you can select a sprite via port $303B and write attributes for as many sequential sprites as desired. The attribute pointer will roll over from sprite 127 to sprite 0.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $5B ({5B}) Sprite Pattern\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Load data into sprite pattern memory auto-incrementing. Port $303B can be used to set the starting sprite pattern number.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Once a pattern number is selected via port $303B, the 256-byte or 128-byte pattern can be written to this port. The internal pattern pointer auto-increments after each write so as many sequential patterns as desired can be written. The internal pattern pointer will roll over from pattern 127 to pattern 0 (4-bit patterns) or from pattern 63 to pattern 0 (8-bit patterns) automatically.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $303B (R)\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par 0 0 0 0 0 0 M C
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 M = 1 if the maximum number of sprites per line was exceeded\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 C = 1 if any two displayed sprites collide on screen\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reading this port automatically resets the M and C bits.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Besides the i/o interface, there is a nextreg interface to sprite attributes. The nextreg interface allows the copper to manipulate sprites and grants the program random access to a sprite\u226?\u8364?\u8482?s individual attribute bytes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $34 ({34}) {{\f5\u8658*}} Sprite Number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Lockstep (NextReg $09 bit 4 set) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pattern address offset (Add 128 to pattern address) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-0 = Sprite number 0-127, Pattern number 0-63 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
effectively performs an out to port $303B \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 No Lockstep (NextReg $09 bit 4 clear) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-0 = Sprite number 0-127 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This register selects which sprite has its attributes connected to the sprite attribute registers\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $35 ({35}) {{\f5\u8658*}} Sprite Attribute 0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Sprite X coordinate LSB (MSB in NextReg $37) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $75 ({75}) {{\f5\u8658*}} Sprite Attribute 0 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $35\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $36 ({36}) {{\f5\u8658*}} Sprite Attribute 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Sprite Y coordinate LSB (MSB in NextReg $39) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $76 ({76}) {{\f5\u8658*}} Sprite Attribute 1 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $36\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $37 ({37}) {{\f5\u8658*}} Sprite Attribute 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = 4-bit Palette offset \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable horizontal mirror (reverse) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable vertical mirror (reverse) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable 90{{\field{\*\fldinst{ EQ \\s\\up5({\fs18 {\i O}})}}{\fldrslt }}
} Clockwise Rotation \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Normal Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = X coordinate MSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Relative Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Palette offset is relative to anchor sprite \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Rotation is applied before mirroring\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $77 ({77}) {{\f5\u8658*}} Sprite Attribute 2 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $37\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $38 ({38}) {{\f5\u8658*}} Sprite Attribute 3 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Visiblity \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Attribute 4 (0 = Attribute 4 effectively $00) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = Sprite Pattern Number \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $78 ({78}) {{\f5\u8658*}} Sprite Attribute 3 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $38\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $39 ({39}) {{\f5\u8658*}} Sprite Attribute 4\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Normal Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = 4-bit pattern switch (0 = 8-bit sprite, 1 = 4-bit sprite) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pattern number bit-7 for 4-bit, 0 for 8-bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Type of attached relative sprites (0 = Composite, 1 = Unified) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-3 = X scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Y scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = MSB of Y coordinate \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Relative, Composite Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pattern number bit-7 for 4-bit, 0 for 8-bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-3 = X scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Y scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pattern number is relative to anchor \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Relative, Unified Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pattern number bit-7 for 4-bit, 0 for 8-bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-1 = 0000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pattern number is relative to anchor \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $79 ({79}) {{\f5\u8658*}} Sprite Attribute 4 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $39\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 2.5.6  Global Control of Sprites\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The following nextreg are also of interest for sprites.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $09 ({09}) {{\f5\u8658*}} Peripheral 4 setting: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = PSG 2 Mono Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = PSG 1 Mono Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = PSG 0 Mono Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Sprite ID lockstep enable (1 = Nextreg $34 and IO Port $303B are in lockstep, 0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = divMMC mapRAM bit Control (reset bit 7 of port $E3) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = HDMI audio mute (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = scanlines {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = scanlines off \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = scanlines 12.5% \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = scanlines 25% \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = scanlines 50% \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
In Sprite lockstep, NextREG $34 and Port $303B are in lockstep \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $15 ({15}) {{\f5\u8658*}} Sprite and Layer System Setup {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = LoRes mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Sprite priority (1 = sprite 0 on top, 0 = sprite 127 on top) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable sprite clipping in over border mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-2 = set layers priorities (000 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 - S L U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 - L S U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 - S U L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 - L U S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 - U S L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 - U L S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 - S(U+L) ULA and Layer 2 combined, colours clamped to 7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 - S(U+L-5) ULA and Layer 2 combined, colours clamped to [0,7] \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Sprites Over border (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Sprites (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The sprite module draws sprites in the order 0-127 in each scanline. Bit 6 determines whether sprite 0 is topmost or sprite 127 is topmost.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bits 4:2 determine layer priority and how sprites overlay or are obscured by other layers.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 clip window}} Register (R/W) $19 ({19}) {{\f5\u8658*}} Sprite Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Cood. of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write - X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write - X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write - Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write - Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 The values are 0,255,0,191 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the clip window is enabled for sprites in "over border" mode, the X coords are internally doubled and the clip window origin is moved to the sprite origin inside the border.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the clip window is enabled for sprites in \u226?\u8364?\u339?over border\u226?\u8364?\u32? mode, the X coords are internally doubled and the clip window origin is moved to the sprite origin inside the border.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sprites will only be visible inside the clipping window. When not in over-border mode (bit 1 of nextreg $15) the clipping window is given in ULA screen coordinates with 0,0 correspoding to the top left corner of the ULA screen. In over-border mode, the clipping window\u226?\u8364?\u8482?s origin is moved to the sprite coordinate origin 32 pixels to the left and 32 pixels above the ULA screen origin.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Regardless, sprite position is always in sprite coordinates with 32,32 corresponding to the top left corner of the ULA screen.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $1C ({1C}) {{\f5\u8658*}} Clip Window Control\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Layer 3 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Layer 0/1 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-2 = Sprite clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Layer 2 Clip Index \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 - reset Layer 3 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 - reset Layer 0/1 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 - reset sprite clip index. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 - reset Layer 2 clip index. \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 transparency}} Register (R/W) $4B ({4B}) {{\f5\u8658*}} Sprite Transparency Index {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Index value ($E3 if reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 For 4-bit sprites only the bottom 4-bits are relevant.\par
\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb120 \fi0 Chapter 3\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Audio\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 3.1  ZX Spectrum 1-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The baseline sound of the ZX Spectrum was produced by toggling the Ear bit (bit 4) of $fe (254) The ULA port to produce 1-bit audio. It is enabled by bit 4 of Next register $08 (8). While this does work on the ZX Spectrum Next, there are other much better methods and this is only supported for backward compatibility.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code: {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; enable internal speaker
\par ld bc,$243B
\par ld a,$08
\par out (c),a
\par ld bc,$253B
\par in a,(c)
\par or $10
\par out (c),a
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 3.2  Sampled 8-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Next has four 8-bit D/A audio channels connected to provide sampled stereo sound. Channels A and B are the left channels, while C and D are the right channels. In order use 8-bit sound, it must first be enabled by setting bit 3 on nextreg $08. In order to emulate legacy hardware there are a number of ports that can be used to control the four channels additionally these are mirrored to three nextregs to enable driving audio using the copper. Channel A is mapped to ports $0f, $3f, and $f1; channel B to ports $1f and $f3 and nextreg $2C; channel C to ports $4f, and $f9 and nextreg $2E; and channel D to: $5f and $fb; with port $df connected to both channel A and C and nextreg $2D connected to both channel A and D.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code: {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; enable SpecDrum/Convox audio
\par ld bc,$243B
\par ld a,$08
\par out (c),a
\par ld bc,$253B
\par in a,(c)
\par or $08
\par out (c),a
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 3.3  Turbosound\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 TurboSound consists of the implementation of three AY-3-8912 chips. To enable TurboSound set bit 1 of Next Register $08 (8). Once enabled the sound chips and registers of the sound chips are selected using port $fffd (65533) TurboSound Next Control while the registers are accessed using $bffd () Sound Chip Register Access. To enable access to a particular chip write 111111xx to the control register where 01=AY1, 10=AY2, and 11=AY3. Access to particular registers of the selected chip is selected by writing the register number to the control register. You can then access a chip register using the access port.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code: {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; enable TurboSound audio
\par ld bc,$243B
\par ld a,$08
\par out (c),a
\par ld bc,$253B
\par in a,(c)
\par or $02
\par out (c),a
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Each of the three AY chips has three channels, A, B, and C whose mapping is controlled by bit 5 of Next register 0x08 (8).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $00 ({00}) {{\f5\u8658*}} Channel A fine tune\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $01 ({01}) {{\f5\u8658*}} Channel A coarse tune (4 bits)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $02 ({02}) {{\f5\u8658*}} Channel B fine tune\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $03 ({03}) {{\f5\u8658*}} Channel B coarse tune (4 bits)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $04 ({04}) {{\f5\u8658*}} Channel C fine tune\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $05 ({05}) {{\f5\u8658*}} Channel C coarse tune (4 bits)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $06 ({06}) {{\f5\u8658*}} Noise period (5 bits)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $07 ({07}) {{\f5\u8658*}} Tone Enable {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Channel C tone enable (0=enable, 1=disable) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Channel B tone enable (0=enable, 1=disable) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Channel A tone enable (0=enable, 1=disable) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Channel C noise enable (0=enable, 1=disable) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Channel B noise enable (0=enable, 1=disable) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Channel A noise enable (0=enable, 1=disable) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $08 ({08}) {{\f5\u8658*}} Channel A amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = enable fixed amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = fixed amplitude \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = use envelope generator (bits 0-3 ignored) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = value of fixed amplitude \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $09 ({09}) {{\f5\u8658*}} Channel B amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = enable fixed amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = fixed amplitude \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = use envelope generator (bits 0-3 ignored) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = value of fixed amplitude \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $0A ({0A}) {{\f5\u8658*}} Channel C amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = enable fixed amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = fixed amplitude \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = use envelope generator (bits 0-3 ignored) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = value of fixed amplitude \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $0B ({0B}) {{\f5\u8658*}} Envelope period fine\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $0C ({0C}) {{\f5\u8658*}} Envelope period coarse\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $0D ({0D}) {{\f5\u8658*}} Envelope shape {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Continue {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = drop to amplitude 0 after 1 cycle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = use \u226?\u8364?\u732?Hold\u226?\u8364?\u8482? value \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Attack {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = generator counts down \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = generator counts up \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Alternate\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 hold = 0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = generator resets after each cycle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1=generator reverses direction each cycle \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 hold=1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = hold final value \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = hold initial value \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Hold {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = cycle continuously \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = perform one cycle and hold \par
}}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb340 \fi0 3.3.1  Pi Audio\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If connected the Pi Zero is configured to use the ZX Next as a soundcard over an I{\up7\fs18 2}S interface making the Raspberry Pi a fully configurable audio source for the ZX Spectrum Next.\par
\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb120 \fi0 Chapter 4\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Memory\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 The ZX Spectrum Next commonly has with either 1MB or 2MB SRAM memory. This is more the 64kB directly addressable by its Z80N CPU. It is therefore necessary to use some form of memory paging to address all of the memory. This is accomplished using 8k pages or 16k banks. 256k of the total memory is used by the ROM images and device specific RAM leaving either 768k (pages 0-95/banks 0-47) or 1792k (pages 0-223/banks 0-111) that can be paged in as RAM. Pages 10, 11, and 14 are a little odd in that rather than coming from the normal SRAM, they come from BRAM internal to the FPGA.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 4.1  Memory Management\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 There are a number of different systems for controling memory papping into the 64k memory space of the Z80N CPU in the ZX Next: ZX Next native memory paging, ZX Spectrum 128, ZX Spectrum +3, divMMC, and Multiface.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 4.1.1  Default Layout\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The default mapping of memory banks is the same as on 128k Spectrum models with a ROM0 (128k editor and menu system) mapped in at $0000-$3FFF, bank 5 at $4000-$7FFF, bank 2 at $8000-$BFFF, and bank 0 at $C000-$FFFF.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 4.1.2  RAM\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 ZX Spectrum Next Native\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Registers $50 to $57 control the which SRAM pages are in each of the eight memory slots. Registers $50 and $51 support the special value $FF which indicates that the currently selected ROM is to be mapped into slots 0 and/or 1 ($0000-$3FFF).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $50 ({50}) {{\f5\u8658*}} MMU Slot 0 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $0000 to $1FFF ($ff on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A 255 value causes the ROM to become visible.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $51 ({51}) {{\f5\u8658*}} MMU Slot 1 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $2000 to $3FFF ($ff on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A 255 value causes the ROM to become visible.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $52 ({52}) {{\f5\u8658*}} MMU Slot 2 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $4000 to $5FFF ($0A on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $53 ({53}) {{\f5\u8658*}} MMU Slot 3 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $6000 to $7FFF ($0B on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $54 ({54}) {{\f5\u8658*}} MMU Slot 4 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $8000 to $9FFF ($04 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $55 ({55}) {{\f5\u8658*}} MMU Slot 5 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $A000 to $BFFF ($05 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $56 ({56}) {{\f5\u8658*}} MMU Slot 6 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $C000 to $DFFF ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $57 ({57}) {{\f5\u8658*}} MMU Slot 7 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $E000 to $FFFF ($01 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Writing to ports $1FFD, $7FFD and $DFFD writes $FF to MMU0 and MMU1 and writes appropriate values to MMU6 and MMU7 to map in the selected 16k bank.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 +3 special modes override the MMUs if used.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In addition the ZX Next has special controls which allow the data area for Layer 2 to be overlaied on memory in a fashion that permits selective read or write access. For details see the section on Layer 2 video.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 ZX Spectrum 128\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 In addition to the native memory management, the ZX Next supports a memory management system that is an expanded, and backward compatible, version of the the system used on earlier ZX Spectrum models. This system uses registers $1FFD, $7FFD, and $DFFD.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1FFD ({1FFD}) Plus 3 Memory Paging Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-3 = Unused, nust be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = High bit of ROM selection (low bit is in Port $7FFD) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = ROM0 = 128k editor and menu system \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = ROM1 = 128k syntax checker \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = ROM2 = +3DOS \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = ROM3 = 48k BASIC \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Special mode: Low bit of memory configuration number \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Paging mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Normal \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Special \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 You should echo writes to $5B67\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $7FFD ({7FFD}) Memory Paging Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 6-7 = reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Lock memory paging \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = low bit of ROM Select (high bit is in Port $1FFD) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = ROM0 = 128k editor and menu system \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = ROM1 = 128k syntax checker \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = ROM2 = +3DOS \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = ROM3 = 48k BASIC \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Shadow screen toggle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 2-0 = LSB of Bank number for slot 4 (MSB is in Port $DFFD) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 5 port $7FFD\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $DFFD ({DFFD}) Next Memory Bank Select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 3-0 = MSB of bank number for slot 4 (LSB is in Port $7FFD) \par
}\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Spectrum 128 Standard Paging\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 128-style memory management can only alter the bank addressed at $c000 (16k-slot 4, or 8k-slots 7-8). The active 16k-bank at $c000 is selected by writing the 3 LSBs of the 16k-bank number to the bottom 3 bits of Memory Paging Control ($7FFD), and the 4 MSBs to the bottom 4 bits of Next Memory Bank Select ($DFFD). (The reason for the division is that the original Spectrum 128, having only 128k of memory, only needed 3 bits.)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If you are using the standard interrupt handler or OS routines, then any time you write to Memory Paging Control ($7FFD) you should also store the value at $5B5C. Any time you write to Plus 3 Memory Paging Control ($1FFD) you should also store the value at $5B67. There is no corresponding system variable for the Next-only Next Memory Bank Select ($DFFD) and standard OS routines may not support the extended banks properly.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Paging out ROM\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ROM can be paged out by enabling AllRam mode, or by using Next memory management. Beware that some programs may assume that they can find ROM service routines at fixed addresses between $0000-$3fff. More importantly, if the default interrupt mode (IM 1) is set, the Z80 will jump the program counter to $0038 every frame expecting to find an interrupt handler there. If it does not, pain and suffering will likely result. DI is your friend. On the plus side, this does allow you to write your own interrupt handler without the nuisance of using IM 2.\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Spectrum 128 Special Paging\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 \ldblquote Special paging mode\rdblquote  (also called \ldblquote AllRam mode\rdblquote  or \ldblquote CP/M mode\rdblquote ) is enabled by writing a value with the LSB set to Plus 3 Memory Paging Control ($1FFD). Depending on the 3 low bits of this value a memory configuration is selected as follows:\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 4.1: Special Paging Modes}{\field{\*\fldinst TC "4.1 Special Paging Modes" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {memory/zx128mm.csv} \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb480 \fi0 4.1.3  ROM\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next had several ROMS: ROM0 (16k) - 128k editor and menu system, ROM1 (16k) - 128k syntax checker, ROM2 (16k) - +3DOS, ROM3 (16k) - 48k BASIC, divMMC/esxDOS ROM (8k), divMMC RAM (128k), Multiface ROM (8k) and Alternate ROM (16k).\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 ZX Next native\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Slots 0 and 1 select use by ROM by selecting page $FF. Which what ROM is mapped in is determined by the other memory management system. If the rest of the system selected the 48k ROM, Nextreg $8C determines whether the actual 48k ROM, or the ZX Next Alternate ROM is in use. In addition, it is possible to enable writing to the Alternate ROM.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $8C ({8C}) {{\f5\u8658*}} Alternate ROM\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Immediate {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Alt ROM Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Alt ROM visible ONLY during writes (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = 48k ROM Lock (0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 After Soft Reset (copied into bits 7-4) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Alt ROM Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Alt ROM visible ONLY during writes (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = 48k ROM Lock (0 on hard reset) \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 ZX Spectrum 128k\par
\pard\plain\s7\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 ROM paging and selection\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 $0000-$3fff is usually mapped to ROM. This area can only be fully remapped using Next memory management. ROM is not considered one of the numbered banks; it is mapped to the two 8k-banks by default, or by setting their 8k-bank numbers to 255.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The 128k Spectrum has 2 ROM pages. Which of these is mapped is selected by altering Bit 4 of Memory Paging Control ($7FFD). The +2a/+3 has 4 ROM pages; the extra bit needed to select between these is bit 2 of Plus 3 Memory Paging Control ($1FFD). This maintains compatibility with the original machines\rquote  ROM paging as long as the ROM is not paged out.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 divMMC\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The divMMC ROM mapping can take priority when it is enabled by port $E3 or, when automapping has been enabled by nextreg $06, when it has been automapped due to reading one of the appropriate addresses. Port $E3 also controls whether the divMMC maps the esxDOS ROM or divMMC RAM page 3 into slot 0 and which divMMC RAM page is mapped into slot 1.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $E3 ({E3}) divMMC Control\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Disable with bit 2 of Nextreg $09 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = conmem, enable divMMC memory \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = mapram, enable divMMC allRAM mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 3-0 = bank, selected divMMC ram bank for $2000-$3FFF region \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
conmem can be used to manually control divMMC mapping. When enabled\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 $0000-$1FFF contains esxDOS ROM or esxDOS page 3\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 $2000-$3FFF contains esxDOS RAM page selected by bits 3-0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
divMMC automatically maps itself in when instruction fetches hit specific addresses in the ROM. When this happens, the esxDOS ROM (or divMMC bank 3 if mapram is set) appears in $0000-$1FFF and the selected divMMC bank appears as RAM in $2000-$3FFF \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 can only be set, once set only a power cycle can reset it. nextreg $09 bit 3 can be set to reset this bit. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 divMMC automapping is normally disabled by NextZXOS see nextreg $06 bit 4.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $06 ({06}) {{\f5\u8658*}} Peripheral 2 Settings {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = F8 CPU Speed Hotkey Enable (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable classic audio mode (beep and tape to internal speaker, other audio to ear and HDMI, 3.01.02) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = F3 50Hz/60Hz Hotkey Enable (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = divMMC Automap/NMI Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = NMI Button Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = PS/2 Mode (0 = keyboard, 1 = mouse) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = PSG Mode (00 = YM, 01 = AY, 11 = hold all PSGs in Reset) \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Multiface\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Need to find useful docs on the Multiface memory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 9f 1-In, 128-In2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 1f 1-Out\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 bf 128-In, 3-Out\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 3f 128-Out, 3-In, 3-button\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 7f3f 3-7ffd\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 1f3f 3-1ffd\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 4.2  Interactions between paging methods\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Changes made in 128 style and Next style memory management are synchronized. The most recent change always has priority. This means that\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 using 128-style memory management to select a new 16k-bank in 16k-slot 4 will update the MMU registers for the two 8k-slots with the corresponding 8k-bank numbers. enabling AllRam mode will update all of the 8k-bank values with the appropriate 8k-slot numbers. These may then be overwritten using Next memory management without needing to alter the value at port $1FFD. Since the 128-style memory management ports are not readable, there is no synchronization applicable in the other direction.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 4.3  Memory Map\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 4.3.1  Global Memory Map\par
{\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 \par
{\trowd\clbrdrb\brdrs\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\clbrdrb\brdrs\cellx6898
{\pard\intbl\ql {{\b Physical Address}}\cell}
{\pard\intbl\ql {{\b Size}}\cell}
{\pard\intbl\ql {{\b Description}}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql { $000000-$00FFFF}\cell}
{\pard\intbl\ql {64k}\cell}
{\pard\intbl\ql {ZX Spectrum ROM (ROM0-3)}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$010000-$011FFF}\cell}
{\pard\intbl\ql {8k}\cell}
{\pard\intbl\ql {EsxDOS ROM}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$012000-$013FFF}\cell}
{\pard\intbl\ql {8k}\cell}
{\pard\intbl\ql {Multiface ROM}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$014000-$017FFF}\cell}
{\pard\intbl\ql {16k}\cell}
{\pard\intbl\ql {EsxDOS Extra ROM}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$018000-$01BFFF}\cell}
{\pard\intbl\ql {16k}\cell}
{\pard\intbl\ql {Alternate ROM}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$01C000-$01FFFF}\cell}
{\pard\intbl\ql {16k}\cell}
{\pard\intbl\ql {Multiface RAM}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$020000-$03FFFF}\cell}
{\pard\intbl\ql {128k}\cell}
{\pard\intbl\ql {DivMMC RAM}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$040000-$0FFFFF}\cell}
{\pard\intbl\ql {768k}\cell}
{\pard\intbl\ql {Standard RAM}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx2823\clbrdrl\brdrs\clbrdrr\brdrs\cellx4284\clbrdrl\brdrs\cellx6898
{\pard\intbl\ql {$100000-$1FFFFF}\cell}
{\pard\intbl\ql {1024k}\cell}
{\pard\intbl\ql {Expanded RAM}\cell}
\row}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Normal RAM is divided into 8k pages or 16k banks which may be mapped into the 64k memory space by the memory management hardware of the Next. Some of these pages have special properties.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Pages 10, 11 and 14 are used by Layer 1/0 (ULA) video modes with 10 used by standard Spectrum ULA video, 10 and 11 used by Timex Hi-res and Hi-colour modes, 11 used by Timex alternate video and page 14 used by the ULA shadow mode. Pages 10 an 11 are usable by Layer 3 (Tilemap) video.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 4.3.2  Z80 Visible Memory Map\par
\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb180 \fi0 Chapter 5\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 zxnDMA\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 February 25, 2019 Phoebus Dokos Off Hardware, Resources,\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The ZX Spectrum Next DMA (zxnDMA)\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 5.1  Overview\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next DMA (zxnDMA) is a single channel dma device that implements a subset of the Z80 DMA functionality. The subset is large enough to be compatible with common uses of the similar Datagear interface available for standard ZX Spectrum computers and compatibles. It also adds a burst mode capability that can deliver audio at programmable sample rates to the DAC device.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 5.2  Accessing the zxnDMA\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The zxnDMA is mapped to a single Read/Write IO Port 0x6B which is the same one used by the Datagear but unlike the Datagear it doesn\rquote t also map itself to a second port 0x0B similar to the MB-02 interface.\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par PORT $6b: zxnDMA
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 5.3  Description\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The normal Z80 DMA (Z8410) chip is a pipelined device and because of that it has numerous off-by-one idiosyncrasies and requirements on the order that certain commands should be carried out. These issues are not duplicated in the zxnDMA. You can continue to program the zxnDMA as if it is were a Z8410 DMA device but it can also be programmed in a simpler manner.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The single channel of the zxnDMA chip consists of two ports named A and B. Transfers can occur in either direction between ports A and B, each port can describe a target in memory or IO, and each can be configured to autoincrement, autodecrement or stay fixed after a byte is transferred.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A special feature of the zxnDMA can force each byte transfer to take a fixed amount of time so that the zxnDMA can be used to deliver sampled audio.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 5.4  Modes of Operation\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The zxnDMA can operate in a z80-dma compatibility mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The z80-dma compatibility mode is selected by setting bit 6 of nextreg $06. In this mode, all transfers involve length+1 bytes which is the same behaviour as the z80-dma chip. In zxn-dma mode, the transfer length is exactly the number of bytes programmed. This mode is mainly present to accommodate existing spectrum software that uses the z80-dma and for cp/m programs that may have a z80-dma option.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The zxnDMA can also operate in either burst or continuous modes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Continuous mode means the DMA chip runs to completion without allowing the CPU to run. When the CPU starts the DMA, the DMA operation will complete before the CPU executes its next instruction.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Burst mode nominally means the DMA lets the CPU run if either port is not ready. This condition can\rquote t happen in the zxnDMA chip except when operated in the special fixed time transfer mode. In this mode, the zxnDMA will let the CPU run while it waits for the fixed time to expire between bytes transferred.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note that there is no byte transfer mode as in the Z80 DMA.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 5.5  Programming the zxnDMA\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Like the Z80 DMA chip, the zxnDMA has seven write registers named WR0-WR6 that control the device. Each register WR0-WR6 can have zero or more parameters associated with it.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In a first write to the zxnDMA port, the write value is compared against a bitmask to determine which of the WR0-WR6 is the target. Remaining bits in the written value can contain data as well as a list of associated parameter bits. The parameter bits determine if further writes are expected to deliver parameter values. If there are multiple parameter bits set, the expected order of parameter values written is determined by parameter bit position from right to left (bit 0 through bit 7). Once all parameters are written, the zxnDMA again expects a regular register write selecting WR0-WR6.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The table X.Y describes the registers and the bitmask required to select them on the zxnDMA.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 5.1: zxnDMA Registers}{\field{\*\fldinst TC "5.1 zxnDMA Registers" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {zxndma/registers.csv} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 5.6  zxnDMA Registers\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 These are described below following the same convention used by Zilog for its DMA chip:\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WR0 \u226?\u8364?\u8220? Write Register Group 0\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par D7  D6  D5  D4  D3  D2  D1  D0  BASE REGISTER BYTE
\par  0   |   |   |   |   |   |   |
\par      |   |   |   |   |   0   0  Do not use
\par      |   |   |   |   |   0   1  Transfer (Prefer this for Z80 DMA compatibility)
\par      |   |   |   |   |   1   0  Do not use (Behaves like Transfer, Search on Z80
\par      |   |   |   |   |                       DMA)
\par      |   |   |   |   |   1   1  Do not use (Behaves like Transfer, Search/Trans-
\par      |   |   |   |   |                      fer on Z80 DMA)
\par      |   |   |   |   0 = Port B -> Port A (Byte transfer direction)
\par      |   |   |   |   1 = Port A -> Port B
\par      |   |   |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  PORT A STARTING ADDRESS (LOW BYTE)
\par      |   |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  PORT A STARTING ADDRESS (HIGH BYTE)
\par      |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  BLOCK LENGTH (LOW BYTE)
\par      V
\par D7  D6  D5  D4  D3  D2  D1  D0  BLOCK LENGTH (HIGH BYTE)
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Several registers are accessible from WR0. The first write to WR0 is to the base register byte. Bits D6:D3 are optionally set to indicate that associated registers in this group will be written next. The order the writes come in are from D3 to D6 (right to left). For example, if bits D6 and D3 are set, the next two writes will be directed to PORT A STARTING ADDRESS LOW followed by BLOCK LENGTH HIGH.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WR1 \u226?\u8364?\u8220? Write Register Group 1\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par D7  D6  D5  D4  D3  D2  D1  D0  BASE REGISTER BYTE
\par  0   |   |   |   |   1   0   0
\par      |   |   |   |
\par      |   |   |   0 = Port A is memory
\par      |   |   |   1 = Port A is IO
\par      |   |   |
\par      |   0   0 = Port A address decrements
\par      |   0   1 = Port A address increments
\par      |   1   0 = Port A address is fixed
\par      |   1   1 = Port A address is fixed
\par      |
\par      V
\par D7  D6  D5  D4  D3  D2  D1  D0  PORT A VARIABLE TIMING BYTE
\par  0   0   0   0   0   0   |   |
\par                          0   0 = Cycle Length = 4
\par                          0   1 = Cycle Length = 3
\par                          1   0 = Cycle Length = 2
\par                          1   1 = Do not use
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The cycle length is the number of cycles used in a read or write operation. The first cycle asserts signals and the last cycle releases them. There is no half cycle timing for the control signals.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WR2 \u226?\u8364?\u8220? Write Register Group 2\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par D7  D6  D5  D4  D3  D2  D1  D0  BASE REGISTER BYTE
\par  0   |   |   |   |   0   0   0
\par      |   |   |   |
\par      |   |   |   0 = Port B is memory
\par      |   |   |   1 = Port B is IO
\par      |   |   |
\par      |   0   0 = Port B address decrements
\par      |   0   1 = Port B address increments
\par      |   1   0 = Port B address is fixed
\par      |   1   1 = Port B address is fixed
\par      |
\par      V
\par D7  D6  D5  D4  D3  D2  D1  D0  PORT B VARIABLE TIMING BYTE
\par  0   0   |   0   0   0   |   |
\par          |               0   0 = Cycle Length = 4
\par          |               0   1 = Cycle Length = 3
\par          |               1   0 = Cycle Length = 2
\par          |               1   1 = Do not use
\par          |
\par          V
\par D7  D6  D5  D4  D3  D2  D1  D0  ZXN PRESCALAR (FIXED TIME TRANSFER)
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZXN PRESCALAR is a feature of the zxnDMA implementation. If non-zero, a delay will be inserted after each byte is transferred such that the total time needed for each transfer is determined by the prescalar. This works in both the continuous mode and the burst mode. If the DMA is operated in burst mode, the DMA will give up any waiting time to the CPU so that the CPU can run while the DMA is idle.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The rate of transfer is given by the formula \ldblquote Frate = 875kHz / prescalar\rdblquote  or, rearranged, \ldblquote prescalar = 875kHz / Frate\rdblquote . The formula is framed in terms of a sample rate (Frate) but Frate can be inverted to set a transfer time for each byte instead. The 875kHz constant is a nominal value assuming a 28MHz system clock; the system clock actually varies from this depending on the video timing selected by the user (HDMI, VGA0-6) so for complete accuracy the constant should be prorated according to documentation for nextreg $11.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In a DMA audio setting, selecting a sample rate of 16kHz would mean setting the prescalar value to 55. This sample period is constant across changes in CPU speed.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WR3 \u226?\u8364?\u8220? Write Register Group 3\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par D7  D6  D5  D4  D3  D2  D1  D0  BASE REGISTER BYTE
\par  1   |   0   0   0   0   0   0
\par      |
\par      1 = DMA Enable
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Z80 DMA defines more fields but they are ignored by the zxnDMA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The two other registers defined by the Z80 DMA in this group on D4 and D3 are implemented by the zxnDMA but they do nothing.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 It is preferred to start the DMA by writing an Enable DMA command to WR6.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WR4 \u226?\u8364?\u8220? Write Register Group 4\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par D7  D6  D5  D4  D3  D2  D1  D0  BASE REGISTER BYTE
\par  1   |   |   0   |   |   0   1
\par      |   |       |   |
\par      0   0 = Do not use (Behaves like Continuous mode, Byte mode on Z80 DMA)
\par      0   1 = Continuous mode
\par      1   0 = Burst mode
\par      1   1 = Do not use
\par                  |   |
\par                  |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  PORT B STARTING ADDRESS (LOW BYTE)
\par                  |
\par                  V
\par D7  D6  D5  D4  D3  D2  D1  D0  PORT B STARTING ADDRESS (HIGH BYTE)
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Z80 DMA defines three more registers in this group through D4 that define interrupt behaviour. Interrups and pulse generation are not implemented in the zxnDMA nor are these registers available for writing.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WR5 \u226?\u8364?\u8220? Write Register Group 5\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par D7  D6  D5  D4  D3  D2  D1  D0  BASE REGISTER BYTE
\par  1   0   |   |   0   0   1   0
\par          |   |
\par          |   0 = /ce only
\par          |   1 = /ce & /wait multiplexed
\par          |
\par          0 = Stop on end of block
\par          1 = Auto restart on end of block
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The /ce & /wait mode is implemented in the zxnDMA but is not currently used. This mode has an external device using the DMA\rquote s /ce pin to insert wait states during the DMA\rquote s transfer.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The auto restart feature causes the DMA to automatically reload its source and destination addresses and reset its byte counter to zero to repeat the last transfer when a previous one is finished.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WR6 \u226?\u8364?\u8220? Command Register\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb180 \fi0 
\par D7  D6  D5  D4  D3  D2  D1  D0  BASE REGISTER BYTE
\par  1   ?   ?   ?   ?   ?   1   1
\par      |   |   |   |   |
\par      1   0   0   0   0 = \\$C3 = Reset
\par      1   0   0   0   1 = \\$C7 = Reset Port A Timing
\par      1   0   0   1   0 = \\$CB = Reset Port B Timing
\par      0   1   1   1   1 = \\$BF = Read Status Byte
\par      0   0   0   1   0 = \\$8B = Reinitialize Status Byte
\par      0   1   0   0   1 = \\$A7 = Initialize Read Sequence
\par      1   0   0   1   1 = \\$CF = Load
\par      1   0   1   0   0 = \\$D3 = Continue
\par      0   0   0   0   1 = \\$87 = Enable DMA
\par      0   0   0   0   0 = \\$83 = Disable DMA
\par  +-- 0   1   1   1   0 = \\$BB = Read Mask Follows
\par  |
\par D7  D6  D5  D4  D3  D2  D1  D0  READ MASK
\par  0   |   |   |   |   |   |   |
\par      |   |   |   |   |   |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  Status Byte
\par      |   |   |   |   |   |
\par      |   |   |   |   |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  Byte Counter Low
\par      |   |   |   |   |
\par      |   |   |   |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  Byte Counter High
\par      |   |   |   |
\par      |   |   |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  Port A Address Low
\par      |   |   |
\par      |   |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  Port A Address High
\par      |   |
\par      |   V
\par D7  D6  D5  D4  D3  D2  D1  D0  Port B Address Low
\par      |
\par      V
\par D7  D6  D5  D4  D3  D2  D1  D0  Port B Address High
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Unimplemented Z80 DMA commands are ignored.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Prior to starting the DMA, a LOAD command must be issued to copy the Port A and Port B addresses into the DMA\rquote s internal pointers. Then an \u195?\u172?Enable DMA\u195?\u174? command is issued to start the DMA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The \u195?\u172?Continue\u195?\u174? command resets the DMA\u226?\u8364?\u8482?s byte counter so that a following \u195?\u172?Enable DMA\u195?\u174? allows the DMA to repeat the last transfer but using the current internal address pointers. I.e. it continues from where the last copy operation left off.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Registers can be read via an IO read from the DMA port after setting the read mask. (At power up the read mask is set to $7f). Register values are the current internal dma counter values. So \u195?\u172?Port Address A Low\u195?\u174? is the lower 8-bits of Port A\u226?\u8364?\u8482?s next transfer address. Once the end of the read mask is reached, further reads loop around to the first one.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The format of the DMA status byte is as follows:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 00E1101T\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 E is set to 0 if the total block length has been transferred at least once.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 T is set to 1 if at least one byte has been transferred.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Operating speed\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The zxnDMA operates at the same speed as the CPU, that is 3.5MHz, 7MHz or 14MHz. This is a contended clock that is modified by the ULA and the auto-slowdown by Layer2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Auto-slowdown occurs without user intervention if speed exceeds 7Mhz and the active Layer2 display is being generated (higher speed operation resumes when the active Layer2 display is not generated). Programmers do NOT need to account for speed differences regarding DMA transfers as this happens automatically.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Because of this, the cycle lengths for Ports A and B can be set to their minimum values without ill effects. The cycle lengths specified for Ports A and B are intended to selectively slow down read or write cycles for hardware that cannot operate at the DMA\rquote s full speed.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 The DMA and Interrupts\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The zxnDMA cannot currently generate interrupts.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The other side of this is that while the DMA controls the bus, the Z80 cannot respond to interrupts. On the Z80, the nmi interrupt is edge triggered so if an nmi occurs the fact that it occurred is stored internally in the Z80 so that it will respond when it is woken up. On the other hand, maskable interrupts are level triggered. That is, the Z80 must be active to regularly sample the /INT line to determine if a maskable interrupt is occurring. On the Spectrum and the ZX Next, the ULA (and line interrupt) are only asserted for a fixed amount of time \~30 cycles at 3.5MHz. If the DMA is executing a transfer while the interrupt is asserted, the CPU will not be able to see this and it will most likely miss the interrupt. In burst mode, the CPU will never miss these interrupts, although this may change if multiple channels are implemented.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 5.7  Programming examples\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A simple way to program the DMA is to walk down the list of registers WR0-WR5, sending desired settings to each. Then start the DMA by sending a LOAD command followed by an ENABLE_DMA command to WR6. Once more familiar with the DMA, you will discover that the amount of information sent can be reduced to what changes between transfers.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Assembly\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 Short example program to DMA memory to the screen then DMA a sprite image from memory to sprite RAM, and then showing said sprite scroll across the screen. {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \li600\fi0 
\par ;------------------------------------------------------------------------------
\par device zxspectrum48
\par ;------------------------------------------------------------------------------
\par ; DEFINE testing
\par ;------------------------------------------------------------------------------
\par ; DMA (Register 6)
\par ;
\par ;------------------------------------------------------------------------------
\par ;zxnDMA programming example
\par ;------------------------------------------------------------------------------
\par ;(c) Jim Bagley
\par ;------------------------------------------------------------------------------
\par DMA_RESET equ $c3
\par DMA_RESET_PORT_A_TIMING equ $c7
\par DMA_RESET_PORT_B_TIMING equ $cb
\par DMA_LOAD equ $cf ; %11001111
\par DMA_CONTINUE equ $d3
\par DMA_DISABLE_INTERUPTS equ $af
\par DMA_ENABLE_INTERUPTS equ $ab
\par DMA_RESET_DISABLE_INTERUPTS equ $a3
\par DMA_ENABLE_AFTER_RETI equ $b7
\par DMA_READ_STATUS_BYTE equ $bf
\par DMA_REINIT_STATUS_BYTE equ $8b
\par DMA_START_READ_SEQUENCE equ $a7
\par DMA_FORCE_READY equ $b3
\par DMA_DISABLE equ $83
\par DMA_ENABLE equ $87
\par DMA_WRITE_REGISTER_COMMAND equ $bb
\par DMA_BURST equ %11001101
\par DMA_CONTINUOUS equ %10101101
\par ZXN_DMA_PORT equ $6b
\par SPRITE_STATUS_SLOT_SELECT equ $303B
\par SPRITE_IMAGE_PORT equ $5b
\par SPRITE_INFO_PORT equ $57
\par ;------------------------------------------------------------------------------
\par 
\par IFDEF testing
\par org $6000
\par ELSE
\par org $2000
\par ENDIF
\par 
\par start
\par ld hl,$0000
\par ld de,$4000
\par ld bc,$800
\par call TransferDMA ; copy some random data to the screen pointing
\par ; to ROM for now, for the purpose of showing
\par ; how to do a DMA copy.
\par ld a,0 ; sprite image number we want to update
\par ld bc,SPRITE_STATUS_SLOT_SELECT
\par out (c),a ; set the sprite image number
\par ld bc,1*256 ; number to transfer (1)
\par ld hl,testsprite ; from
\par call TransferDMASprite ; transfer to sprite ram
\par 
\par nextreg 21,1 ; turn sprite on. for more info on this check
\par ; out https://www.specnext.com/tbblue-io-port-system/
\par ld de,0
\par ld (xpos),de ; set initial X position ( doesn't need it for
\par ; this demo, but if you run the .loop again it
\par ; will continue from where it was
\par ld a,$20
\par ld (ypos),a ; set initial Y position
\par 
\par .loop
\par ld a,0 ; sprite number we want to position
\par ld bc,SPRITE_STATUS_SLOT_SELECT
\par out (c),a
\par ld de,(xpos)
\par ld hl,(ypos) ; ignores H so doing this rather than
\par ; ld a,(ypos):ld l,a
\par ld bc,(image) ; not flipped or palette shifted
\par call SetSprite
\par 
\par halt
\par 
\par ld de,(xpos)
\par inc de
\par ld (xpos),de
\par ld a,d
\par cp $01
\par jr nz,.loop ; if high byte of xpos is not 1 (right of
\par ; screen )
\par ld a,e
\par cp $20+1
\par jr nz,.loop ; if low byte is not $21 just off the right of
\par ; the screen, $20 is off screen but as the
\par ; INC DE is just above and not updated sprite
\par ; after it, it needs to be $21
\par xor a
\par ret ; return back to basic with OK
\par 
\par xpos dw 0 ; x position
\par ypos db 0 ; y position
\par ; these next two BITS and IMAGE are swapped
\par ; as bits needs to go into B register image
\par ; db 0+$80 ; use image 0 (for the image we
\par ; transfered)+$80 to set the sprite to active
\par bits db 0 ; not flipped or palette shifted
\par 
\par c1 = %11100000
\par c2 = %11000000
\par c3 = %10100000
\par c4 = %10000000
\par c5 = %01100000
\par c6 = %01000000
\par c7 = %00100000
\par c8 = %00000000
\par 
\par testsprite
\par db c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1
\par db c1,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c1
\par db c1,c2,c3,c3,c3,c3,c3,c3,c3,c3,c3,c3,c3,c3,c2,c1
\par db c1,c2,c3,c4,c4,c4,c4,c4,c4,c4,c4,c4,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c5,c5,c5,c5,c5,c5,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c6,c6,c6,c6,c6,c6,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c6,c7,c7,c7,c7,c6,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c6,c7,c8,c8,c7,c6,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c6,c7,c8,c8,c7,c6,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c6,c7,c7,c7,c7,c6,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c6,c6,c6,c6,c6,c6,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c5,c5,c5,c5,c5,c5,c5,c5,c4,c3,c2,c1
\par db c1,c2,c3,c4,c4,c4,c4,c4,c4,c4,c4,c4,c4,c3,c2,c1
\par db c1,c2,c3,c3,c3,c3,c3,c3,c3,c3,c3,c3,c3,c3,c2,c1
\par db c1,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c2,c1
\par db c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1,c1
\par 
\par ;-------------------------------------------------
\par ; de = X
\par ; l = Y
\par ; b = bits
\par ; c = sprite image
\par SetSprite
\par push bc
\par ld bc,SPRITE_INFO_PORT
\par out (c),e ; Xpos
\par out (c),l ; Ypos
\par pop hl
\par ld a,d
\par and 1
\par or h
\par out (c),a
\par ld a,l:or $80
\par out (c),a ; image
\par ret
\par 
\par ;--------------------------------
\par ; hl = source
\par ; de = destination
\par ; bc = length
\par ;--------------------------------
\par TransferDMA
\par di
\par ld (DMASource),hl
\par ld (DMADest),de
\par ld (DMALength),bc
\par ld hl,DMACode
\par ld b,DMACode_Len
\par ld c,ZXN_DMA_PORT
\par otir
\par ei
\par ret
\par 
\par DMACode db DMA_DISABLE
\par db %01111101 ; R0-Transfer mode, A -> B, write adress
\par ; + block length
\par DMASource dw 0 ; R0-Port A, Start address
\par ; (source address)
\par DMALength dw 0 ; R0-Block length (length in bytes)
\par db %01010100 ; R1-write A time byte, increment, to
\par ; memory, bitmask
\par db %00000010 ; 2t
\par db %01010000 ; R2-write B time byte, increment, to
\par ; memory, bitmask
\par db %00000010 ; R2-Cycle length port B
\par db DMA_CONTINUOUS ; R4-Continuous mode (use this for block
\par ; transfer), write dest adress
\par DMADest dw 0 ; R4-Dest address (destination address)
\par db %10000010 ; R5-Restart on end of block, RDY active
\par ; LOW
\par db DMA_LOAD ; R6-Load
\par db DMA_ENABLE ; R6-Enable DMA
\par 
\par DMACode_Len equ $-DMACode
\par 
\par ;------------------------------------------------------------------------------
\par ; hl = source
\par ; bc = length
\par ; set port to write to with TBBLUE_REGISTER_SELECT
\par ; prior to call
\par ;------------------------------------------------------------------------------
\par TransferDMAPort
\par di
\par ld (DMASourceP),hl
\par ld (DMALengthP),bc
\par ld hl,DMACodeP
\par ld b,DMACode_LenP
\par ld c,ZXN_DMA_PORT
\par otir
\par ei
\par ret
\par 
\par DMACodeP db DMA_DISABLE
\par db %01111101 ; R0-Transfer mode, A -> B, write adress
\par ; + block length
\par DMASourceP dw 0 ; R0-Port A, Start address (source address)
\par DMALengthP dw 0 ; R0-Block length (length in bytes)
\par db %01010100 ; R1-read A time byte, increment, to
\par ; memory, bitmask
\par db %00000010 ; R1-Cycle length port A
\par db %01101000 ; R2-write B time byte, increment, to
\par ; memory, bitmask
\par db %00000010 ; R2-Cycle length port B
\par db %10101101 ; R4-Continuous mode (use this for block
\par ; transfer), write dest adress
\par dw $253b ; R4-Dest address (destination address)
\par db %10000010 ; R5-Restart on end of block, RDY active
\par ; LOW
\par db DMA_LOAD ; R6-Load
\par db DMA_ENABLE ; R6-Enable DMA
\par 
\par DMACode_LenP equ $-DMACodeP
\par ;------------------------------------------------------------------------------
\par ; hl = source
\par ; bc = length
\par ;------------------------------------------------------------------------------
\par TransferDMASprite
\par di
\par ld (DMASourceS),hl
\par ld (DMALengthS),bc
\par ld hl,DMACodeS
\par ld b,DMACode_LenS
\par ld c,ZXN_DMA_PORT
\par otir
\par ei
\par ret
\par 
\par DMACodeS db DMA_DISABLE
\par db %01111101 ; R0-Transfer mode, A -> B, write adress
\par ; + block length
\par DMASourceS dw 0 ; R0-Port A, Start address (source address)
\par DMALengthS dw 0 ; R0-Block length (length in bytes)
\par db %01010100 ; R1-read A time byte, increment, to
\par ; memory, bitmask
\par db %00000010 ; R1-Cycle length port A
\par db %01101000 ; R2-write B time byte, increment, to
\par ; memory, bitmask
\par db %00000010 ; R2-Cycle length port B
\par db %10101101 ; R4-Continuous mode (use this for block
\par ; transfer), write dest adress
\par dw SPRITE_IMAGE_PORT ; R4-Dest address (destination address)
\par db %10000010 ; R5-Restart on end of block, RDY active
\par ; LOW
\par db DMA_LOAD ; R6-Load
\par db DMA_ENABLE ; R6-Enable DMA
\par DMACode_LenS equ $-DMACodeS
\par ;------------------------------------------------------------------------------
\par ; de = dest, a = fill value, bc = lenth
\par ;------------------------------------------------------------------------------
\par DMAFill
\par di
\par ld (FillValue),a
\par ld (DMACDest),de
\par ld (DMACLength),bc
\par ld hl,DMACCode
\par ld b,DMACCode_Len
\par ld c,ZXN_DMA_PORT
\par otir
\par ei
\par ret
\par 
\par FillValue db 22
\par DMACCode db DMA_DISABLE
\par db %01111101
\par DMACSource dw FillValue
\par DMACLength dw 0
\par db %00100100,%00010000,%10101101
\par DMACDest dw 0
\par db DMA_LOAD,DMA_ENABLE
\par DMACCode_Len equ $-DMACCode
\par 
\par ;------------------------------------------------------------------------------
\par ; End of file
\par ;------------------------------------------------------------------------------
\par 
\par IFDEF testing
\par savesna "dmatest.sna",start
\par ELSE
\par fin
\par savebin "DMATEST",start,fin-start
\par ENDIF
\par \par
}}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb220 \fi0 Chapter 6\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Copper and Display Timing\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 From: KevB (aka 9bitcolour)\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Introduction\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next includes a co-processor named \ldblquote COPPER\rdblquote . It functions in a similar way to the Copper found in the Commodore Amiga Agnus custom chip. It\rquote s role is to free the Z80 of tasks that require the writing of hardware registers at precise pixel co-ordinates.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Overview\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next COPPER has three instructions: NOOP, MOVE, WAIT. \par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 NOOP is used to fine tune timing. MOVE writes data to a specific range of hardware registers. WAIT waits for a pixel position on the video display.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 These instructions are stored in 2k (2048 BYTES) of dedicated write-only program RAM also known as a \ldblquote Copper list\rdblquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Each instruction is 16 bits (WORD) in size allowing for a maximum of 1024 instructions to be stored in the program RAM. The COPPER uses an internal 10 bit program counter (PC) which wraps to zero at the end of the list. The PC can be reset to zero, this is the default value after a hard/soft reset.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The instructions are stored in big endian format and transferred to the 2k program RAM using the Z80 or DMA (bits 15..8 followed by bits 7..0).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Three write-only hardware registers control access to the program RAM as well as the operating modes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 System performance is not affected when the COPPER is executing instructions.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The hardware registers and COPPER program RAM are not connected to the main memory BUS. The overall design of this system together with the use of alternate clock edges means that contention between the COPPER, Z80 and DMA has been eliminated.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The COPPER has a base clock speed of 13.5Mhz for HDMI and 14Mhz for VGA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The bandwidth is around 14 million single cycle NOOP/WAIT instructions and 7 million two cycle MOVE instructions per second.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 6.1  Timing\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 To fully understand the COPPER, you must first understand the display timing for each of the machines and video modes found in the ZX Spectrum Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 There are several display timing configurations due to the four machine types, two refresh rates, two video systems (VGA/HDMI) and Timex HIRES mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Details of these timings are outlined in this chapter.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Machines\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next has four machine types (48k, 128k, Pentagon, and HDMI). The machine timing and HDMI determine the number of T-states per line which determines the base dot clock frequency and Z80/DMA clock speed.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This guide groups machine types by their timing for convenience. The HDMI video mode overrides the default machine timing so it is included as an extra machine type which does not exist in the official documentation.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Display\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next doesn\rquote t have video modes based on resolution that you would expect to find on graphics card based hardware. There is one fixed resolution of {256{\u215*}192} which can be doubled to {512{\u215*}192} in Timex HIRES mode. What it does have is the ability to set the refresh rate from 50Hz to 60Hz and horizontal dot clock. This in turn together with the VGA and HDMI timing affects the vertical line count giving several combinations in total.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 VGA modes 0..6 are included as one single VGA mode as the internal machine timing is constant across those seven refresh rate steps.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 More details can be found in Video modes.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Resolution\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 There are two main horizontal resolutions: standard {256{\u215*}192} and Timex HIRES {512{\u215*}192}. Details of LORES {128{\u215*}96} are not included to simplify this guide.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The frame buffer height is fixed at 192 pixels and surrounded by a large border and overscan as well as horizontal and vertical blanking periods.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 There are five vertical line counts: 261, 262, 311, 312, 320. Several pixels are hidden in the overscan and blanking periods beyond the visible border.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The result is {256{\u215*}192} and {512{\u215*}192} pixel resolutions with a large border.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The colour of the visible border beyond the frame buffer can be manipulated. Visual changes will not show during the overscan and blanking periods.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Dot Clock\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The dot clock on the ZX Spectrum Next runs at 13.5Mhz for HDMI and around 14Mhz for VGA. The COPPER clock runs at the same frequency as the dot clock. For v3.00 the copper runs at twice the frequency of the dot clock.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The number of dot clocks per line is calculated by multiplying the number of 3.5Mhz Z80 T-states per line by four. Example: 228Ts * 4 = 912 dot clocks.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The number of dot clocks per second is calculated by the following:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 T-states per line * 4 * line count * refresh rate\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In standard {256{\u215*}192} resolution the duration of one pixel is two dot clocks. In Timex HIRES {512{\u215*}192} resolution the duration of one pixel is one dot clock.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Details of the dot clock counts can be found in tables 5.1 and 5.2.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.1: Vertical Line Counts and Dot Clock Combinations}{\field{\*\fldinst TC "6.1 Vertical Line Counts and Dot Clock Combinations" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/perline.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.2: Dot Clocks per Second}{\field{\*\fldinst TC "6.2 Dot Clocks per Second" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/persec.csv} \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb480 \fi0 Coordinates\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The top left pixel of the frame buffer is line 0 and horizontal dot clock 0. This is also known as \ldblquote 0,0\rdblquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The bottom right pixel of the frame buffer in standard {256{\u215*}192} resolution is line 191 and horizontal dot clocks 510+511.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The bottom right pixel of the frame buffer in Timex HIRES {512{\u215*}192} resolution is line 191 and horizontal dot clock 511.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The line one pixel above the frame buffer is the last line of the video frame and equal to the total line count minus one (312-1 for example).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The line one pixel below the frame buffer is line 192.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The COPPER horizontal dot clock compare is locked to every eight pixels in standard {256{\u215*}192} resolution and every sixteen pixels in Timex HIRES {512{\u215*}192} resolution. The NOOP instruction can be used to fine tune timing in single dot clock steps.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Compare\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The COPPER uses a 9 bit vertical line compare allowing it to handle the various line counts.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The COPPER horizontal compare is 6 bits meaning that it can wait for 64 positions across each line. The range of this value is limited by the machine timing as that determines the number of dot clocks per line.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.3: Maximum Horizontal COPPER Compare}{\field{\*\fldinst TC "6.3 Maximum Horizontal COPPER Compare" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/maxhcmp.csv} \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 Each horizontal compare is in steps of 16 dot clocks to cover the full range across a raster line.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 16 dot clocks = 4 pixels in lo {128{\u215*}96} resolution\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 16 dot clocks = 8 pixels in standard {256{\u215*}192} resolution\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 16 dot clocks = 16 pixels in high {512{\u215*}192} resolution\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 There is some slack to consider after the maximum horizontal compare value. The slack is calculated using the following:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 dot clocks per line - maximum horizontal compare * 16\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.4: Slack Dot Clocks After Maximum Compare}{\field{\*\fldinst TC "6.4 Slack Dot Clocks After Maximum Compare" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/aftermaxcmp.csv} \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 Table 5.5 provides details of the horizontal display, left/right border, blanking and COPPER dot clock/pixel position compare values:\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.5: Horizontal Timing}{\field{\*\fldinst TC "6.5 Horizontal Timing" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/htime.csv}\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \endash  Dot clock compare is out of range. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 Table 5.6 provides a detailed list of vertical display, top/bottom border and blanking as well as maximum COPPER line compare. It also provides the ULA VBLANK interrupt line number.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\fs11 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs11 {Table 6.6: Vertical Timing}{\field{\*\fldinst TC "6.6 Vertical Timing" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs11 {copper/vtime.csv}\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs11 \endash  Line compare is out of range\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs11 * ULA VBLANK interrupt. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 Note: The HDMI overscan and blanking period is larger than that of a VGA monitor which can auto-adjust alignment. The following data is based on visible results from various monitors thus subject to refinement.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Pixels are visible during DISPLAY/BORDER and hidden during BLANKING.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Overscan\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The visible area of the display can extend to resolutions exceeding {256{\u215*}192}.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The 50/60 Hz refresh rate mode dictates the vertical limit.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 VGA and HDMI differ with VGA providing more visible pixels beyond the range of HDMI. Table 5.7 provides ideal extended pixel resolutions:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Maximum Extended VGA Resolutions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 50Hz = {352{\u215*}288} (standard 256 resolution)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 60Hz = {352{\u215*}240} (standard 256 resolution)\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.7: Ideal Extended Resolutions for Both VGA and HDMI}{\field{\*\fldinst TC "6.7 Ideal Extended Resolutions for Both VGA and HDMI" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/idealres.csv} \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 Table 5.8 provides COPPER horizontal position and vertical line compare parameters for ideal extended resolutions:\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\fs20 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs20 {Table 6.8: Ideal Extended Resolution Display Parameters}{\field{\*\fldinst TC "6.8 Ideal Extended Resolution Display Parameters" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs20 {copper/idealparam.csv}\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs20 TOP: Initial line of the extended top border area - see notes below*\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs20 BOT: Last line of the extended bottom border area - see notes below*\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs20 LEFT: First pixel of the extended left border area - see notes below**\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs20 RIGHT: Last pixel of the extended right border area - see notes below**\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs20 * Line compare value for MOVE (bits 8..0).\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs20 ** The integer part is the horizontal value for MOVE (bits 14..9).\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs20 ** The fractional part is specified in dot clocks (NOOP instructions). \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 6.2  Instructions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This section describes the behaviour of the COPPER instructions as well as the bit definitions and execution time.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The three 16 bit COPPER instructions are comprised of the following bit definitions:\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.9: Instruction Bit Definition}{\field{\*\fldinst TC "6.9 Instruction Bit Definition" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/instrbit.csv}\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 H 6 bit horizontal dot clock compare\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 V 9 bit vertical line compare\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 R 7 bit Next register 0x00..0x7F\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 D 8 bit data \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb480 \fi0 NOOP\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 NOOP (no-operation) executes in one dot clock. It is useful for fine tuning timing, initialising COPPER RAM and \rquote NOP\rquote  out COPPER program instructions.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 It can be used to align colour and display changes to half pixel positions in standard {256{\u215*}192} resolution. Its duration is equal to one Timex HIRES pixel.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This guide uses the name \rquote NOOP\rquote  to avoid confusion with the Z80 opcode NOP.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 MOVE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 MOVE executes in two dot clocks. It moves 8 bits of data into any of the Next hardware registers in the range $00 (0) .. $7F (127).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The WORD value $0000 is reserved for the NOOP instruction so no register access is carried out for that special case. Register $00 is read-only so not affected by the restriction of not being able to write zero to it.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This instruction can perform 7 million register writes per second for VGA and 6.75 million register writes per second for HDMI.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 WAIT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 WAIT executes in one dot clock. It performs a compare with the current vertical line number and the current horizontal dot clock.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 WAIT will hold until the current raster line matches the 9 bit value stored in bits 8..0. When the line compare matches, WAIT will still hold if the current horizontal dot clock is less than the value in bits 14..9.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This compare logic means that out of order vertical line compares will cause the COPPER to wait until the next video frame as the test is for an exact match of the line number. The COPPER will continue to the next instruction after an out of order horizontal pixel position compare as the test checks for the current dot clock being greater than or equal to the compare value.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 WAIT will stop the COPPER when a compare is made against an out of range vertical line or horizontal dot clock position as they will never occur\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A standard way to terminate a COPPER program is to wait for line 511 and horizontal position 63. This encodes into the instruction WORD $FFFF.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The horizontal dot clock position compare includes an adjustment meaning that the compare completes three dot clocks early in standard {256{\u215*}192} resolution and two dot clocks early in Timex HIRES {512{\u215*}192} resolution. In practice, a pixel position can be specified with clocks to spare to write a register value before the pixel is displayed. This saves software having to auto-adjust positions to arrive early. It also means that a wait for 0,0 can affect the first pixel of the frame buffer before it is displayed and set the scroll registers without visual artefacts.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Example\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The following example provides a simple COPPER program to move data to a hardware register at two specific pixel positions. The BYTES for the program are listed in the left column:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par          PAL8 equ   0x41           ; 8 bit palette hardware register
\par 
\par $80,$00       WAIT  0,0            ; wait for pixel position 0,0 (H,V)
\par $00,$00       NOOP                 ; fine tune timing by one dot clock
\par $41,$E0       MOVE  PAL8,11100000b ; write RED to palette register
\par 
\par $C0,$BF       WAIT  32,191         ; wait for pixel position 256,191
\par $00,$00       NOOP                 ; fine tune timing by one dot clock
\par $41,$00       MOVE  PAL8,00000000b ; write BLACK to palette register
\par 
\par $FF,$FF       WAIT  63,511         ; wait for an out of range position
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 6.3  Control\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The COPPER is controlled by the following three write-only registers:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
$60 (96) Copper data \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
$61 (97) Copper control LO BYTE \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
$62 (98) Copper control HI BYTE \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The COPPER instructions are written one BYTE at a time to the program RAM using register $60 (Copper data).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 An index system is used to select the destination write address within the 2K program RAM. Eleven bits are needed to represent the index. Registers $61 and $62 hold this 11 bit index.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The index increments each time one BYTE is written to register $60. The index wraps to zero when the last BYTE of program RAM is written.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The instruction data is normally written in big endian format although there is no rule stating that partial instruction BYTES cannot be written. It is safe to write to the COPPER program RAM while the COPPER is executing as long the instruction data written does not create a mall formed instruction which comprises of one half of the current executing instruction and one half the new instruction - this could result in unexpected behaviour.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Z80 and DMA can be used to write the instruction data.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Writing to program RAM while the COPPER is running has no impact on system performance as the RAM is contention free. COPPER timing is not affected by the Z80 or DMA writing to the program RAM. Program RAM is write-only.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The contents of the 2k program RAM are preserved during a hard/soft reset.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register $61 holds the lower 8 bits of the index. Register $62 holds the upper 3 bits of the index as well as two control bits which set the COPPER operating mode.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.10: Register Bit Definitions}{\field{\*\fldinst TC "6.10 Register Bit Definitions" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/regbit.csv}\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 D 8 bit data\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 I 11 bit index \par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 C 2 bit control \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 The COPPER has an internal 10 bit program counter (PC). Each instruction advances the program counter by one after completion. The program counter wraps to zero after the last instruction at location 1023. This causes the copper list to loop.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The program counter defaults to zero during a hard/soft reset.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The control bits require a change to update the operating mode. This feature preserves COPPER operation when setting the program RAM index address.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The program counter is preserved when stopping the COPPER. Two of the four control settings reset the internal PC to zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Table 5.11 describes the control bits:\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.11: Control Mode Definitions}{\field{\*\fldinst TC "6.11 Control Mode Definitions" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/controlmodes.csv}\par
\pard\plain\s10\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 * The control mode names used in this guide differ from the official names. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 Here is a detailed description of the control bits:\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 STOP\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This is the default operating mode set during a hard/soft reset. The COPPER is idle in this state and will STOP if currently executing when entering this mode. It is safe to write to any location within the 2K program RAM when the COPPER is stopped.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entering STOP mode preserves the internal program counter so that the COPPER may continue when restarted.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 RESET\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The program counter is RESET to zero when entering this mode. The COPPER is started if idle otherwise entering this mode acts as a jump to location zero when the COPPER is running.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 START\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Entering this mode causes an idle COPPER to start executing instructions from the current program counter. Entering this mode while the COPPER is running has no effect other than to disable FRAME mode if active.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 FRAME\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The program counter is RESET to zero when entering this mode. The COPPER is started if idle otherwise entering this mode acts as a jump to location zero when the COPPER is running.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entering this state enables FRAME mode. The program counter will be reset to zero each frame at 0,0.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 6.4  Configuration\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Hardware registers provide timing and configuration data allowing software to build and configure COPPER programs that function correctly across the various video modes and machine types. It is not essential to detect the machine type but it should be noted that software should not assume that it is running on a specific machine as the COPPER hardware is available across all four machine types.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Three registers can be read to determine the machine configuration for Ts per line, dot clocks, refresh rate, line count and maximum horizontal dot clock/pixel position compare.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Refresh Rate\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The refresh rate must be taken into account and can change real-time so should be monitored and auto-configured when the COPPER is active as the line count will change with the refresh rate. This could lead to the COPPER waiting for lines that never occur.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $05 ({05}) {{\f5\u8658*}} Peripheral 1 Settings {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = joystick 1 mode (MSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = joystick 2 mode (MSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = joystick 1 mode (LSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = 50/60 Hz mode (0 = 50Hz, 1 = 60Hz) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = joystick 2 mode (LSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Scandoubler \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Joystick modes {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
000 = Sinclair 2 (67890) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
001 = Kempston 2 (port $37) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
010 = Kempston 1 (port $1F) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
011 = Megadrive 1 (port $1F) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
100 = Cursor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
101 = Megadrive 2 (port $37) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
110 = Sinclair 1 (12345) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
111 = I/O Mode (3.01.04) Both joysticks are places in I/O Mode if either is set to I/O Mode. The underlying joystick type is not changed and reads of this register will continue to return the last joystick type. Ehether the joystick is in io mode or not is invisible but this state can be cleared either through reset or by re-writing the gegister with joystick type not equal to 111. Recovery time for a normal joystick read after leaving I/O Mode is at most 64 scan lines. \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Video Modes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The video mode can only be changed during the boot process so one initial read is required of this register during software start up phase.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The machine timing is identical for the seven VGA modes although the physical refresh rate of the video output speeds up for each mode in turn by roughly 1Hz. The internal timing of the machine remains constant and as close to the original hardware as possible. VGA is a perfect Amstrad ZX Spectrum 128k +3 for example as far as timing is concerned across the seven VGA modes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The effect of this speed up means that mode 0 will execute in one second of time whereas mode 6 will execute in a shorter time period. Mode 0 is as close to 50/60 Hz as possible where mode 6 is closer to 60/70 Hz. That would mean that one second of machine time for mode 6 will execute in 0.83 seconds of human time when running 50 frames per second at 60Hz.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The eighth mode (mode 7) is used for HDMI timing. Machine configuration is forced for this mode. Line counts, Ts and various other settings are set to meet the rigid HDMI timing specification. For mode 7, 50/60 Hz are rock solid but the original hardware timing loses Ts across all machines to meet HDMI display requirements.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Software that was previously written for specific hardware with hard-coded software timing loops may fail. This is one of the risks of coding timing loops counting Ts. We saw evidence of this with the release of the 1985 Sinclair ZX Spectrum 128k+ and the later Amstrad models as previous software written for the ZX Spectrum 48k/48k+ would fail when trying to display colour attribute and border effects as the number of Ts per line was changed from 224Ts (1982 original 48k) to 228Ts (128k models). The ZX Spectrum Next runs slower in HDMI mode. Demos may fail to display correctly and games may slow down although setting the Z80 to 7Mhz can solve the game slow down, demos should be run in VGA mode for maximum compatibility.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Video timing also affects audio output as the sample rate can vary depending on the output timing method.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The following register allows software to read the video timing mode:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $11 ({11}) {{\f5\u8658*}} Video Timing (writable in config mode only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-0 = Mode (VGA = 0..6, HDMI = 7) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 = Base VGA timing, clk28 = 28000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 = VGA setting 1, clk28 = 28571429 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 = VGA setting 2, clk28 = 29464286 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 = VGA setting 3, clk28 = 30000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 = VGA setting 4, clk28 = 31000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 = VGA setting 5, clk28 = 32000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 = VGA setting 6, clk28 = 33000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 = HDMI, clk28 = 27000000 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
50/60Hz selection depends on bit 2 of register $05 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Only writable in config mode \par
}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 Machine Type\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The machine type register can be used to provide the number of Ts per line, line count, dot clock and maximum horizontal COPPER wait.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The dot clock (DC) is the number of Ts per line * 4.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The maximum horizontal COPPER wait (H) is in multiples of 16 clocks.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Video mode 7 (HMDI) overrides the timing.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The following list shows the various parameters that can be gained from reading the machine register combined with the refresh register and video mode bits:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $03 ({03}) {{\f5\u8658*}} Machine Type\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A write to this register disables the boot rom in config mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 bits 2-0 select machine type when in config mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = (W) Display Timing change enable (allow changes to bits 6-4) (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Display Timing \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Display Timing user lock control \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = No user lock on display timing \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = User lock on display timing \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Apply user lock on display timing (0 on hard reset) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-0 = Machine Type (config mode only)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 determines roms loaded \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Machine Types/Display Timings {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 or 001 = ZX 48K \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 = ZX 128K/+2 (Grey) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 = ZX +2A-B/+3e/Next Native \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 = Pentagon 128K \par
}}\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb340 \fi0 Summary\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Table 5.13 provides a full list of video timing configuration data:\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table 6.12: Summary of Video Modes}{\field{\*\fldinst TC "6.12 Summary of Video Modes" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {copper/videotiming.csv} \par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Chapter 7\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Interrupts\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 7.1  Interrupt Types\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Z80 has three different hardware interrupt signals: {{\field{\*\fldinst{ EQ  \\x\\to( {RESET}) }}{\fldrslt }}
}, {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
}, and {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
}.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 {{\field{\*\fldinst{ EQ  \\x\\to( {RESET}) }}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {{\field{\*\fldinst{ EQ  \\x\\to( {RESET}) }}{\fldrslt }}
} is used to return the CPU to a known state. When the {{\field{\*\fldinst{ EQ  \\x\\to( {RESET}) }}{\fldrslt }}
} line is pulled low, a {{\field{\*\fldinst{ EQ  \\x\\to( {RESET}) }}{\fldrslt }}
} is generated. The CPU then does several things. I, and R are set to $00. PC is set to $0000. SP becomes $FFFF. A and F are set to $FF. The interrupt mode is set to 0. And (maskable) interrupts are disabled by clearing IFF1 and IFF2.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} is the non-maskable interrupt. Upon receiving a non-maskable interrupt ({{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} being pulled low) one of two sequences occur depending on the calue of bit 3 of the interrupt control register (nextreg $C0).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C0 ({C0}) {{\f5\u8658*}} Interrupt Control (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = Programmable portion of IM2 vector * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable stackless {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} response \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Maskable interrupt mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 - pulse \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 - IM2 \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 * In IM2 mode vector generated is: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = nextreg $C0 bits 7-5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-1 = Interrupt source {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 - line interrupt (highest priority) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 - UART 0 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2 - UART 1 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3\endash 10 - CTC channels 0-7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 - ULA \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
12 - UART 0 Tx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
13 - UART 1 Tx (lowest priority) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = 0 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If bit 3 is clear (0) PC is pushed on the stack, IFF1 is copied to IFF2, IFF1 is cleared (inhibiting maskable interrupts). The {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} should end with RETN which copies the contents of IFF2 to IFF1 (returning the interrupt state to what it was before the {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
}) and PC is popped off the stack.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If bit 3 is set (1) PC is stored in the {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} return address registers (nextregs $C2 and $C3), IFF1 is copied to IFF2, IFF1 is cleared (inhibiting maskable interrupts). The {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} should end with RETN which copies the contents of IFF2 to IFF1 (returning the interrupt state to what it was before the {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
}) and PC is compied from the {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} return address registers.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C2 ({C2}) {{\f5\u8658*}} {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} Return Address LSB (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C3 ({C3}) {{\f5\u8658*}} {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} Return Address MSB (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset)\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The interrupt generally of most interest to programmers is {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
}. So much so that if programmers talk about interrupts on the Z80, they are probebly only talking about {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
}. The processing of {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
} is controlled by IFF1 and IFF2 which are set using EI to enable interrupts and reset using DI to disable interrupts. Interrupts can happen at any time and should preserve register contents. If none of your code uses the alternate registers the EXX and EX AF,AF\u226?\u8364?\u8482? instructions can make this faster and easier. Interrupt routined should end with EI and RETI to reenable interrupts, potentially inform the interrupting device that its interrupt has been serviced, and return from the interrupt routine. In general the Spectrum machines do not make any distingtion between RET and RETI, but future developments in the ZX Spectrum Next may make the distinction important.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The ZX Spectrum Next has 14 internal sources for {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
} signals. This can be enabled and disabled using nextregs $C4 \endash  $C6. Which signals have been received can be read/cleared using nexregs $C8 \endash  $CA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Interrupt Enable\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C4 ({C4}) {{\f5\u8658*}} Interrupt Enable 0 (3.01.08)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($83 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Expansion bus {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-2 = Reserved must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $C5 ({C5}) {{\f5\u8658*}} Interrupt Enable 1 (3.01.08)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = ctc channel 7 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = ctc channel 6 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = ctc channel 5 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = ctc channel 4 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = ctc channel 3 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = ctc channel 2 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = ctc channel 1 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ctc channel 0 zc/to \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $C6 ({C6}) {{\f5\u8658*}} Interrupt Enable 2 (3.01.08)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = UART1 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = UART1 Rx half full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = UART1 Rx available * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = UART0 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = UART0 Rx half full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = UART0 Rx available * \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * For each UART, Rx half full and Rx available are shared interrupts\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Interupt Status\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C8 ({C8}) {{\f5\u8658*}} Interrupt Status 0 (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the device generated an interrupt in the past * Writes clear bits where bits are set except in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C9 ({C9}) {{\f5\u8658*}} Interrupt Status 1 (3.01.09) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = ctc channel 7 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = ctc channel 6 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = ctc channel 5 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = ctc channel 4 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = ctc channel 3 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = ctc channel 2 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = ctc channel 1 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ctc channel 0 zc/to \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the device generated an interrupt in the past * Writes clear bits where bits are set except in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CA ({CA}) {{\f5\u8658*}} Interrupt Status 2 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = UART1 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = UART1 Rx almost full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = UART1 Rx available * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Reserved must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = UART0 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = UART0 Rx almost full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = UART0 Rx available * \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * For each UART Rx half full and Rx available are shared interrupts ** Set bits indicate the device generated an interrupt in the past ** Writes clear bits where bits are set except in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Internal Interrupt Sources {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
0 = Line (highest priority) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
1 = UART 0 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
2 = UART 1 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
3-10 = CTC channels 0-7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
11 = ULA \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
12 = UART 0 Tx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
13 = UART 1 Tx (lowest priority) \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 7.2  Interrupt Modes\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 IM0\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 When an interrupt is received by the CPU it disables interrupts and executes the instruction placed on the bus by the interrupting device and (no known use on the Next) It is enabled with the IM0 instruction and enabling interrupts (EI).\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 IM1\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 When an interrupt is received, the CPU disables interrupts and jumps to an interrupt handler at $0038 (normally in ROM). The ROM interrupt handler updates the frame counter and scans the keyboard. This is the default interrupt handling method for the ZX Spectrum and is probably the method to use if you don\u226?\u8364?\u8482?t need the ROMs for anything. It is enabled using the IM1 instruction and enabling interrupts.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 IM2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spectrum Next has both a legacy method for handling IM2 and an updated one which makes better use of the capabilities of IM2 which was added in Core 3.01.09.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The ZX Spectrum Next has 14 interrupt devices which can all be given independent interrupt vectors when using IM2. These interrupts are controlled by nextregs $C0 \endash  $CF. The address of the vector for a given interrupt is created by composing the I register (bits 15-0), nextreg $C0 bits 7-5 (bits 7-5) and the interrupt number of the interrupt device (bits 4-1). This means that even if you use all 14 internal interrupt sources, your interrupt vector table is no more than 28 bytes which can be at any 32 byte boundry. It also means that far less processing has to be done on interrupts which are received. External interrupts are a little different. If no vector is supplied by a device the implied LSB will be $FF.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 While in IM2 mode, it is possible for interrupts to interrupt DMA transfers. This capability is controlled by The DMA Interrupt enable registers (nextregs $CC \endash  $CE). When DMA is interrupted, one instruction of the main program will be processed, then the interrupt will be taken. On return, DMA will continue.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CC ({CC}) {{\f5\u8658*}} DMA Interrupt Enable 0 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the specified interrupt will interrupt a DMA operation when in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CD ({CD}) {{\f5\u8658*}} DMA Interrupt Enable 1 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = CTC channel 7 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = CTC channel 6 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = CTC channel 5 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = CTC channel 4 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = CTC channel 3 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = CTC channel 2 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = CTC channel 1 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = CTC channel 0 zc/to \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the corresponding interrupt will interrupt a DMA operation when in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CE ({CE}) {{\f5\u8658*}} DMA Interrupt Enable 2 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = UART1 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = UART1 Rx half full \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = UART1 Rx available \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = UART0 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = UART0 Tx half full \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = UART0 Tx available \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the corresponding interrupt will interrupt a DMA operation when in IM2 mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In legacy mode, when the CPU receives an interrupt it disables interrupts and jumps to an interrupt routine starting at the contents of the jump table at I. The start of the interrupt routine is the contents of I*$100+bus and I*$100+bus+1. Most devices that can supply interrupts on the ZX Spectrum leave the data bus in a floating state. As a result the interpreted state of the data bus while generally $FF is not entirely predictable. The solution to place your interrupt routine at an address where the MSB and LSB are the same ($0101, $0202, \u226?\u8364?\u166? $FFFF) then place 257 copies of that value in a block starting at I*$100 (you can set the value of the I register).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Code: {\par
\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; my program
\par org $8000
\par ;; enable interrupt mode im2
\par ld i,$fe
\par im2
\par ei
\par ;; program body
\par ;; interrupt routine
\par handler:
\par ;; preserve registers used
\par ;; handle interrupt
\par ;; restore registers
\par ei
\par reti
\par ;; jump to interrupt routine
\par org $fdfd
\par jp handler
\par ;; im2 jump table
\par org $fe00 ; not actually legal
\par defs $101,$fd
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 7.3  Z80 CTC\par
(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 3.01.08) Untested, assuming it acts like two Z80 CTCs.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Eight independent CTC channels are available on ports $183B through $1F3B. These perform counter/timer functions that can be used to generate timer interrupts or to generate interrupts from physical signals.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The CTC is a standard Zilog part. Its datasheet can be found at http://www.zilog.com/docs/z80/ps0181.pdf . The Zilog documentation is ambiguous around how soft resets are treated so the following clarifies some points in the Next\rquote s implementation.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Hard reset requires both a control word and a time constant to be written to a channel even if bit 2 = 0 in the first control word. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Soft reset with bit 2 = 0 causes the entire control register to be modified. Soft reset with bit 2 = 1 does not change the control register contents. In both cases a time constant must follow to resume operation. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
Changing the trigger edge selection in bit 4 while the channel is in operation counts as a clock edge. A pending timer trigger will be fired and, in counter mode, an edge will be received. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
ZC/TO is asserted for one clock cycle and not for the entire duration that the count is at zero. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 At the moment, any interrupt generated by the CTC will assert the z80\rquote s /INT line for 32 cpu cycles. This is the same way that the ULA and line interrupts operate.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 At the moment, the ZC/TO output of each channel is fed into the CLK/TRG input of the succeeding channel so that time and count periods can be cascaded.\par
\pard\plain\s6\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Programming\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Initial values are set by a write of a channel control word followed by a time constant. In timer mode, the counter decrements every time it is triggered. In counter mode it decrements every time the prescaler counter reaches zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Channel Control Word {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = Enable Interrupt \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = Mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = Timer mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Counter mode \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Prescalar value (Timer mode only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = 16 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = 256 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = CLK/TRG edge selection {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = Falling Edge \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Rising Edge \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Timer Trigger (Timer mode only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = Starts on loading of time constant \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Starts on CLK/TRG \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Time constant follows \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Software reset \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = 0 (Control Word) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If we are running at 28MHz (Mode 0) and wish to trigger an interrupt every 1 sec, that is 28 million T-States/cycles we could program CTC 5 as a counter with a prescalar of 16 and a period of 175, CTC 6 as a counter with a prescalar of 16 and a period of 125, and CTC 7 as a timer with a period of 5.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 CTC 5 triggers ZC5 every 280 cycles or 10 usec.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 CTC 6 triggers ZC6 every 560,000 cycles or 20 msec.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 CTC 7 triggers ZC7 and an interrupt every 28,000,000 cycles or 1 sec.\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par di
\par ; set up interrupt routine
\par im 2
\par ld bc,$183B     ; CTC 0
\par ld hl,$FFFA     ; address pointing to start of interrupt routine
\par ld de,interrupt ; start of interrupt routine
\par ld (hl),de
\par ld i,$FF
\par ld a,l          ; Vector to address at on this interrupt
\par out (c),a
\par ; set up CTC 5
\par ld b,$1D        ; CTC 5
\par ld a,$87
\par out (c),a       ; Interrupt mode, timer mode, time constant, soft, control
\par ld a,$05
\par out (c),a       ; once every 5 times 
\par ; set up CTC 6
\par inc b           ; CTC 6
\par ld a,$47
\par out (c),a       ; 16x, counter mode, time constant, soft, control
\par ld a,$7D        ; 125 = once every 2000 times
\par out (c),a
\par ; set up CTC 7
\par inc b           ; CTC 7
\par ld a,$47
\par out (c),a       ; 16x, counter mode, time constant, soft, control
\par ld a,$AF        ; 175 = once every 2800 times
\par ei
\par \par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb180 \fi0 Chapter 8\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Serial Communication\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 The Spectrum Next has two independent fully featured UARTs. The UARTS share I/O ports so it is important to select the correct one before communicating with it. Each has its own 64 byte Tx buffer and 512 byte Rx buffer. One UART can be connected to either the ESP of joystick port while the other can be connected to the Raspberry Pi accelerator or joystick port. The UARTS are controlled using ports $37, $133B, $143B, $153B, and $163B. The UARTs are connected to the IM2 interrupt system. Nextreg $c6 allows interrupts to be enabled for the status of each UART. UART interrupts correspond to interrupts 1, 2, 12, and 13 (see Interrupts).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $37 ({37}) Kempston/Mega Drive Joystick 2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = \rdblquote start\rdblquote  button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = A/X button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = C/Z button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Fire/C/Y button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Up \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Down \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Left \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Right \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with Nextreg $05\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write ($00 on reset, 3.01.04) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = Select I/O Mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = Bit Bang \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = Clock \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = UART \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = Reserved (don\rquote t use) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Select Joystick Port for Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Left \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Right \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 3-1 = Reserved, must be $00 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Pin 7 state (both ports) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Bit Bang - bit 0 on pin 7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Clock - clock on pin 7\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 0 = Slow clock (Fsys/2048 = 12.672 kHz)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 1 = Fast clock (Fsys/8 = 3.5 MHz) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
UART - Pin 7 = TX, Pin 9 = RX 0 = ESP\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 1 = Pi \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 ** A Runt clock may appear in the first cycle\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The I/O mode should be set by writing this port first followed by enabling io mo de on the joysticks with a write to nextreg 0x05.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $133B ({133B}) UART tx\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read: UART Status\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = UART at least half full (3.01.09) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = UART full \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = UART transmit busy \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = UART receive has data \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write: UART Transmit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $143B ({143B}) UART rx\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read: UART Receive\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write: UART Prescalar {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = select prescalar part {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Bits 6-0 of prescalar \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Bits 13-7 of prescalar \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 6-0 = Prescalar bits \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $153B ({153B}) UART select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = UART select (0 on soft reset) ** {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = ESP \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Pi * \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Prescalar valid in this write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 2-0 = Bits 16-14 of prescalar (0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Pi GPIO must be configured for UART, see nextreg $A0\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ** Either UART can be redirected to the joystick ports, see port $037\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $153B ({153B}) UART frame (upcoming)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($18 on hard reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = Immediately reset Rx and Tx to idle and empty FIFOs \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = Assert break (Tx=0) when Tx reaches idle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Enable hardware flow control * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 4-3 = Number of bits in a frame {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = 5 bits \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = 6 bits \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = 7 bits \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = 8 bits \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Enable parity \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Parity {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Even parity \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Odd parity \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Number of stop bits {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = 1 stop bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = 2 stop bits \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Register (R/W) $C0 ({C0}) {{\f5\u8658*}} Interrupt Control (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = Programmable portion of IM2 vector * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable stackless {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} response \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Maskable interrupt mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 - pulse \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 - IM2 \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 * In IM2 mode vector generated is: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = nextreg $C0 bits 7-5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-1 = Interrupt source {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 - line interrupt (highest priority) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 - UART 0 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2 - UART 1 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3\endash 10 - CTC channels 0-7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 - ULA \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
12 - UART 0 Tx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
13 - UART 1 Tx (lowest priority) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = 0 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $C6 ({C6}) {{\f5\u8658*}} Interrupt Enable 2 (3.01.08)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = UART1 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = UART1 Rx half full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = UART1 Rx available * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = UART0 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = UART0 Rx half full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = UART0 Rx available * \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * For each UART, Rx half full and Rx available are shared interrupts\par
\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb120 \fi0 Chapter 9\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Raspberry Pi0 Acceleration\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 The Spectrum Next has a header (with male pins) which can be attached to a Raspberry Pi Zero. There is a modified version of DietPi called NextPi which is the standard distro for the Raspberry Pi0 accelerator. Software for the general public should be written assuming that it will be interfacing with a Pi0 running this distro.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If you are more adventurous, you may choose to use another distro, or even another accelerator that uses the Raspberry Pi style (40 pin) expansion bus. Chief concers when doing this is that you have a console presented on the UART that defaults to 115,200 bps, you don\rquote t need to login, the machine is configured with a driver to treat the I{\up7\fs18 2}S interface as a sound card, and the presence of the nextpi scripts.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Raspberry Pi 0 has a Broadcom BCM2835 SoC with an ARMv6 core, a Videocore 4 GPU, and its own 512 MB memory and HDMI output. It has its own SD card from which it boots. For this application the Pi 0 ships with a 1GB microSD card containing NextPi a customized version of DietPi.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Pi Zero, if installed, is a smart peripheral for the ZX Spectrum Next. Available interfaces are: low level access to the GPIO pins, higher level access to standardized I/O interfaces, and use of the Pi Zero as a sound card.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When using the low level GPIO interface Pi Zero GPIO pins 2-27 can be configured as either inputs or outputs using nextregs $90-$93. If they are outputs, the output state can be set by writing to nextregs $98-$9b. The current status of the GPIO pins can be read from nextregs $98-$9b whether it is the state driven by the ZX Spectrum Next or the state drive by some other peripherial attached to the bus (normally the Raspberry Pi Zero).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $90 ({90}) {{\f5\u8658*}} Pi GPIO output enable 1/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Pin 7 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Pin 6 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pin 5 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Pin 4 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 3 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 2 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 1 (cannot be enabled) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 0 (cannot be enabled) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $91 ({91}) {{\f5\u8658*}} Pi GPIO output enable 2/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Pin 15 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Pin 14 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pin 13 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Pin 12 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 11 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 10 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 9 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 8 (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $92 ({92}) {{\f5\u8658*}} Pi GPIO output enable 3/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Pin 23 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Pin 22 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pin 21 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Pin 20 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 19 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 18 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 17 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 16 (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $93 ({93}) {{\f5\u8658*}} Pi GPIO output enable 4/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 27 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 26 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 25 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 24 (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $98 ({98}) {{\f5\u8658*}} Pi GPIO Pin State 1/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pin 7 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pin 6 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pin 5 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Pin 4 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 3 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 2 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 1 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 0 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $99 ({99}) {{\f5\u8658*}} Pi GPIO Pin State 2/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pin 15 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pin 14 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pin 13 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Pin 12 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 11 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 10 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 9 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 8 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $9A ({9A}) {{\f5\u8658*}} Pi GPIO Pin State 3/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pin 23 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pin 22 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pin 21 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Pin 20 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 19 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 18 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 17 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 16 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $9B ({9B}) {{\f5\u8658*}} Pi GPIO Pin State 4/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 27 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 26 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 25 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 24 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Standardized I/O access with the Pi Zero can use the I{\up7\fs18 2}C , SPI, or UART interfaces and is configured using nextreg $a0. Any enabled port will disable low level (write) access to the corresponding GPIO pins.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $A0 ({A0}) {{\f5\u8658*}} Pi Peripheral Enable {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable UART on GPIO 14, 15 (0 on reset)* \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Communication Type (0 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = Rx to GPIO 15, Tx to GPIO 14 (Pi) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Rx to GPIO 14, Tx to GPIO 15 (Pi Hats) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable I{\up7\fs18 2}C on GPIO 2, 3 (0 on reset)* \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable SPI on GPIO 7, 8, 9, 10, 11 (0 on reset)* \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 *Overrides GPIO Enables\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The I{\up7\fs18 2}C interface is controlled using ports $103b (SCL) and $113b (SDA). This is the same I{\up7\fs18 2}C interface that is used for the optional Real Time Clock. Interfacing with the Pi Zero over I{\up7\fs18 2}C is complicated by the fact that it is a master/slave interface, but both the ZX Spectrum Next and Pi Zero are configured to be bus masters.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $103B ({103B}) I{\up7\fs18 2}C SCL (rtc, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $113B ({113B}) I{\up7\fs18 2}C SDA (rtc, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The SPI interface is controlled using ports $e7 (/CS) and $eb (/DATA). The SPI interface is shared between the SD card(s), the flash memory, and the Pi Zero. Interfacing with the Pi Zero over SPI is complicated by the fact it is a master/slave interface and both the ZX Spectrum Next and Pi Zero are configured to be bus masters.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $E7 ({E7}) SPI {{\field{\*\fldinst{ EQ  \\x\\to( {CS}) }}{\fldrslt }}
} (SD card, flash, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Disable with bit 2 of Nextreg $09\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $EB ({EB}) SPI {{\field{\*\fldinst{ EQ  \\x\\to( {DATA}) }}{\fldrslt }}
} (SD card, flash, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Disable with bit 2 of Nextreg $09\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The default means of communication between the ZX Next and the Pi is through the UART interface (see serial communications chapter). In order to communicate withe the Pi the Pi UART must be connected to the Pi by setting nextreg $a0 bits 5 and 4 to 1, selecting the Pi UART by setting port $153b bit 6 to 1 and ensuring that both ends are using matching communication protocols (by default 115,200 bps, 8N1 and no flow control). On the Pi end the UART is connected to the serial console.\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par ;; enable UART connection with Pi Zero
\par    ld c,$3b
\par    ld b,$15 ; UART control
\par ;; select Pi on UART control
\par    in a,(c)
\par    or $40
\par    out (c),a
\par    ld b,$24 ; Next Register Select
\par    ld a,$a0
\par    out (c),a
\par    inc b ; Next Register Data
\par ;; Enable UART on GPIO and select Pi
\par    in a,(c)
\par    or $30
\par    out (c),a
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The I{\up7\fs18 2}S sound interface between the ZX Spectrum Next and the Pi Zero is controlled by nextregs $a2 and $a3. Normally, one would control the Pi through some other channel such as the UART recieve audio from the Pi to either use as a fulloy programmable sound card or to allow loading of tape files on the ZX Spectrum Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $A2 ({A2}) {{\f5\u8658*}} Pi I{\up7\fs18 2}S Audio Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = I{\up7\fs18 2}S State ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = I{\up7\fs18 2}S Disabled \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = I{\up7\fs18 2}S is mono, source R \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = I{\up7\fs18 2}S is mono, source L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = I{\up7\fs18 2}S is stereo \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Audio Flow Direction (0 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = PCM_DOUT to Pi, PCM_DIN from Pi (Hats) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = PCM_DOUT from Pi, PCM_DIN to Pi (Pi) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Mute left (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Mute right (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Slave mode, Reserved must be 1 (remove in 3.01.05) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Direct I{\up7\fs18 2}S audio to EAR on port $FE (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $A3 ({A3}) {{\f5\u8658*}} Pi I{\up7\fs18 2}S Clock Divide (Master Mode) (removed in 3.01.05) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Clock divide value ($0B on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {{\field{\*\fldinst{ EQ {Divider}= \\F(538461,{Rate})\u8722?1}}{\fldrslt }}
} or {{\field{\*\fldinst{ EQ {Rate}= \\F(538461,{Divider}+1)}}{\fldrslt }}
}\par
\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb120 \fi0 Chapter 10\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 System Software\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 10.1  CP/M\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Spextrum Next has support for CP/M+ 3.0. CP/M was the most popular microcomputer coperating system prior to the advent of MS-DOS.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 10.1.1  Utilities\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 From the Digital Research: CP/M 3 Command Reference Manual 1984\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This section documents all standard CP/M+ 3 commands plus those extras included with the ZX Spectrum Next CP/M system.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\fs31 {\b COLOURS}}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Function:} Sets the screen colours\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Parameters:} {\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Options:} {\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Notes:} Sets the screen colours using standard ZX colours or octal 9-bit RGB numbers.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Examples:}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 colours 1 6\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 colours rgb 000 750\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\fs31 {\b COPYSYS}}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Function:} Copy CP/M system\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Notes:} COPYSYS copies the CP/M Plus system from a CP/M Plus system diskette to another diskette. The new diskette must have the same format as the original system diskette.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\fs31 {\b DATE}}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Function:} The DATE command lets you display and set the date and time of day.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Parameters:} {\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Options:} {\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{labeledpar\} ... \\end\{labeledpar\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Notes:} The DATE command is a transient utility that lets you display and set the date and time of day. When you start CP/M 3, the date and time are set to the creation date of your CP/M 3 system. Use DATE to change this initial value to the current date and time.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Examples:}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DATE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DATE C\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DATE CONTINUOUS\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DATE 08/13/82 09:15:37\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DATE SET\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DEVICE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE NAMES\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE VALUES\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE logical-dev \{XON{|}NOXON{|}baud-rate\},\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE physical-dev \{XON{|}NOXON{|}baud-rate\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE logical-dev=physical-dev \{option\} \{,physical-dev \{option\},...\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE logical-dev = NULL\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE CONSOLE \{PAGE\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE CONSOLE \{COLUMNS=n, LINES=n\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVICE displays current logical device assignments and physical device names.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DIR} (built-in)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIR\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIR d:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIR filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIR d: options\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIR filespec,... filespec options\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The DIR command displays the names of files catalogued in the directory of an online disk that belong to current user number and have the Directory (DIR) attribute. DIR accepts the * and ? wildcards in the file specification.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The DIR command with options displays the names of files and the characteristics associated with the files. DIR is a built-in utility. DIR with options is a transient utility and must be loaded into memory from the disk.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DIRSYS/DIRS} (built-in)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIRSYS\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIRSYS d:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DIRSYS filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The DIRSYS command lists the names of files in the current directory that have the system (SYS) attribute. DIRSYS accept the * and ? wildcards in the file specification. DIRSYS is a built-in utility.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DUMP}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DUMP filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DUMP displays the contents of a file in and ASCII format.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b ECHO} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ECHO string\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Echo characters to the terminal\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The following special character sequences may be used {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\a alert (bell) (ASCII 7) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\b backspace (ASCII 8) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\e escape (ASCII 27) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\n line feed (ASCII 10) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\r carriage return (ASCII 13) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\l interpret further characters as lower-case \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\u interpret further characters as upper-case \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
\\\\backslash (\rquote \\\rquote ) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Note that CP/M converts all your typed characters to upper-case before providing them to ECHO.COM. Therefore you will need to use \\l and \\u to specify the case of characters if it is important (in ESCape sequences, for example).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b ED}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ED\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ED input-filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ED input-filespec \{d: {|} output-filespec\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Character file editor. To redirect or rename the new version of the file specify the destination drive or destination filespec.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b ERASE/ERA} (built-in)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ERASE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ERASE filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ERASE filespec [CONFIRM]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The ERASE command removes one or more files from the directory of a disk. Wildcard characters are accepted in the filespec. Directory and data space are automatically reclaimed for later use by another file. The ERASE command can be abbreviated to ERA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 [CONFIRM] option informs the system to prompt for verification before erasing each file that matches the filespec. CONFIRM can be abbreviated to C.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b EXIT} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 EXIT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The EXIT command leaves CP/M (rebooting the ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b EXPORT} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 EXPORT cpm-filespec nextzxos-filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 NextZXOS file export utility\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Export file to a NextZXOS drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b GENCOM}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GENCOM COM-Eilespec RSX-filespec... RSX-Eilespec \{[LOADER {|} SCB=(Offset,value)]\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GENCOM RSX-filespec ... RSX-filespec \{[NULL {|} SCB=(Offset,value)l\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GENCOM filename\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GENCOM filename [SCB=(offset,value)]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The GENCOM command attaches RSX files to a COM file, or creates a dummy COM file containing only RSXS. It can also restore a previously GENCOMed file to the original COM file without the header and RSXS, add or replace RSXs in already GENCOMed files, and attach header records to COM files without RSXS.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b GENCPM}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GENCPM \{AUTO{|}AUTO DISPLAY\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GENCPM creates a memory image CPM3.SYS file, containing the CP/M 3 BDOS and customized BIOS. The GENCPM utility performs late resolution of intermodule references between system modules. GENCPM can accept its command input interactively from the console or from a file GENCPM.DAT.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In the nonbanked system, GENCPM creates a CPM3.SYS file from the BDOS3.SPR and BIOS3.SPR files. In the banked system, GENCPM creates the CPM3.SYS file from the RESBDOS3.SPR, the BNKBDOS3.SPR and the BNKBIOS3.SPR files. Remember to back up your CPM3.SYS file before executing GENCPM, because GENCPM deletes any existing CPM3.SYS file before it generates a new system.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b GET}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GET \{CONSOLE INPUT FROM\} FILE filespec options\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GET \{CONSOLE INPUT FROM\} CONSOLE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 GET directs the system to take console input from a file for the next system comand or user program entered at the console.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Console input is taken from a file until the program terminates. If the file is exhausted before program input is terminated, the program looks for subsequent input from the console. If the program terminates before exhausting all its input, the system reverts back to the console for console input.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b HELP}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP topic\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP topic subtopic\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP topic [NOPAGE]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP topic subtopic1...subtopic8\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP{>}topic\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP{>}.subtopic\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HELP displays a list of topics and provides summarized information for CP/M Plus commands.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Typing HELP topic displays information about that topic. Typing HELP topic subtopic displays information about that subtopics One or two letters is enough to identify the topics. After HELP displays information for your topic, it displays the special prompt HELP{>} on your screen, followed by a list of subtopics.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Enter ? to display list of main topics. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Enter a period and subtopic name to access subtopics. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Enter a period to redisplay what you just read. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Press RETURN to return to the CP/M Plus system prompt. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{[NOPAGE]} option disables the 24 lines per page console display. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Press any key to exit a display and return to the HELP{>} prompt. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {\b HEXCOM}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HEXCOM filename\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The HEXCOM Command generates a command file (filetype COM) from a HEX input file. it names the output tile with the same filename as the input file but with filetype COM. HEXCOM always looks for a file with filetype HEX.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IMPORT} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IMPORT nextzxos-filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IMPORT nextzxos-filespec cpm-filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 NextZXOS file import utility\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 List or import files from a NextZXOS drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b INITDIR} (Not included)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 INITDIR d:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The INITDIR command initializes a disk directory to allow date and time stamping of files on that disk. INITDIR can also recover time/date directory space.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b NEXTREG} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 NEXTREG register \{value\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 NextReg Utility\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Show or change a NextReg register (use at your own risk!)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b LIB} (Not included)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LIB filespec options\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LIB filespec options=filespec {<}modifier{>} f,filespec{<}modifier{>}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A library is a file that contains a collection of object modules.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Use the LIB utility to create libraries, and to append, replace, select, or delete modules from an existing library. Use LIB to obtain information about the contents of library files. LIB creates and maintains library files that contain object modules in Microsoft REL file format. These modules are produced by the Digital Research relocatable macro-assembler program, RMAC, or other language translator that produces modules in Microsoft REL file format.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 You can use LINK-80 to link the object modules contained in a library to other object files. LINK-80 automatically selects from the library only those modules needed by the program being linked, and then forms an executable file with a filetype of Com.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b LINK} (Not included)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LINK filespec [options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LINK filespec [options],...filespec [options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LINK filespec [options]=filespec [options],...\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LINK combines relocatable object modules such as those produced by RMAC and PL/I- 80 into a COM file ready for execution. Relocatable files can contain external references and publics. Relocatable files can reference modules in library files. LINK searches the library files and includes the referenced modules in the output file. See the Programmer\rquote s Utilities Guide for the CP/M Family of Operating Systems for a complete description of LINK-80.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Use LINK option switches to control execution parameters. Link options follow the file specifications and are enclosed within square brackets. Multiple switches are separated by commas.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b MAC} (Not included)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 MAC filename [$options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 MAC, the CP/M Plus macro assembler, reads assembly language statements from a file of type ASM, assembles the statements, and produces three output files with the input filename and filetypes of HEX, PRN, and SYM. Filename.HEX contains Intel hexadecimal format object code. Filename.PRN contains an annotated source listing that you can print or examine at the console. Filename.SYM contains a sorted list of symbols defined in the program.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Use options to direct the input and output of MAC. Use a letter with the option to indicate the source and destination drives, and console, printer, or zero output. Valid drive names are A through 0. X, P, and Z specify console, printer, and zero output, respectively.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b PATCH}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PATCH filename.typ n\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The PATCH command displays or installs patch number n to the CP/M Plus system or command files. The patch number n must be between 1 and 32 inclusive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b PIP}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PIP Destination = Source\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PIP d:[Gn]=filespec [options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PIP filespec[Gn]=filespec [options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PIP filespec[Gn]device=filespec [options] device\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The file copy program PIP copies files, combines files, and transfers files between disks, printers, consoles, or other devices attached to your computer. The first filespec is the destination. The second filespec is the source. Use two or more source filespecs separated by commas to combine two or more files into one file. [options] is any combination of the available options. The [Gn] option in the destination filespec tells PIP to copy your file to that user number. PIP with no command tail displays an * prompt and awaits your series of commands, entered and processed one line at a time. The source or destination can optionally be any CP/M Plus logical device.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b PUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PUT CONSOLE \{OUTPUT TO\} FILE filespec \{option\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PUT PRINTER \{OUTPUT TO\} FILE filespec \{option\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PUT CONSOLE \{OUTPUT TO\} CONSOLE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PUT PRINTER \{OUTPUT TO\} PRINTER\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PUT puts console or printer output to a file for the next command entered at the console, until the program terminates. Then console output reverts to the console. Printer output is directed to a file until the program terminates. Then printer output is put back to the printer.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 PUT with the SYSTEM option directs all subsequent console/printer output to the specified file. This option terminates when you enter the PUT CONSOLE or PUT PRINTER command.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b RENAME/REN} (built-in)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 RENAME\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 RENAME new-filespec=old-filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 RENAME lets you change the name of a file in the directory of a disk. To change several filenames in one command use the * or ? wildcards in the file specifications. You can abbreviate the RENAME command to REN. REN prompts you for input.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b RMAC} (Not included)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 RMAC filespec {options}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 RMAC, a relocatable macro assembler, assembles ASM files into REL files that you can link to create COM files.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 RMAC options specify the destination of the output files. Replace d with the destination drive letter for the output files.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SAVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SAVE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SAVE copies the contents of memory to a file. To use SAVE, first issue the SAVE command, then run your program which reads a file into memory. Your program exits to the SAVE utility which prompts you for a filespec to which it copies the contents of memory, and the beginning and ending address of the memory to be SAVED.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SET}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET [options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET d: [options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET filespec [options]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET [option = modifier]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET filespec [option = modifier]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET initiates password protection and time stamping of files. It also sets the file and drive attributes Read/Write, Read/Only, DIR and SYS. It lets you label a disk and passord protect the label. To enable time stamping of files, you must first run INITDIR to format the disk directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SET Default password operation:}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET [DEFAULT=password]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Instructs the system to use a default password if you do not enter a password for a password-protected file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SET Time-stamp operations:}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET {d:} [CREATE=ON{|}OFF]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET {d:} [ACCESS=ON{|}OFF]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET {d:} [UPDATE=ON{|}OFF]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The above set commands allw YOU to keep a record of the time and date of file creation and update or of the last access update of your files.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SET Drive operations:}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET {d:} [RO]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SET {d:} [RW]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Adds or removes write protection from a drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SETDEF}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDEF\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDEF [TEMPORARY=d:]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDEF d:i,d:i,d:i,d:i\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDEF [ORDER= (typ1, typn)]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDEF [DISPLAY {|} NO DISPLAY)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDEF [PAGE {|} NOPAGE]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDEF allows the user to display or define up to four drives for the program search order, the drive for temporary files, and the filetype search order. The SETDEF definitions affect only the loading of programs and/or execution of SUBMIT (SUB) files. SETDEF turns on/off the system Display and Console Page modes. When on, the system displays the location and name of programs loaded or SUBmit files executed, and stops after displaying one full console screen of information.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SHOW}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SHOW\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SHOW d:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SHOW d: [SPACE]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SHOW d: [LABEL]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SHOW d: [USERS]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SHOW d: [DIR]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SHOW d: [DRIVE]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The SHOW command displays the following disk drive information: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
access mode and the amount of free disk space \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
disk label \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
current user number \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
number of files for each user number on the disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
number of free directory entries for the disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
drive characteristics \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {\b SID}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SID [pgm-filespec],\{sym-filespec\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The SID symbolic debugger allows you to monitor and test programs developed for the 8080 microprocessor. SID supports real-time breakpoints, fully monitored execution, symbolic disassembly, assembly, and memory display and fill functions. SID can dynamically load SID utility programs to provide traceback and histogram facilities.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SUBMIT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SUBMIT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SUBMIT filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SUBMIT filespec argument ... argument\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The SUBMIT command lets you execute a group (batch) of commands from a SUBmit file (a file with filetype of SUB).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SUB files:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The SUB file can contain the following types of lines: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
any valid CP/M Plus command \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
any valid CP/M Plus command with SUBMIT parameters ($0-$9) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
any data input line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
any program input line with parameters ($0 to $9) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The command line cannot exceed 135 characters.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b TERMINFO} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 TERMINFO\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This program provides information on the terminal facilities provided by the BIOS on the ZX Spectrum Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b TERMSIZE} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 TERMSIZE top left height width\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Terminal resize utility\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Size can be up to 32x80 (defaults to 24x80, suitable for many programs). If setting a reduced size, the top and left parameters can be used to make the image more centered on your screen.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b TYPE/TYP} (built-in)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 TYPE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 TYPE filespec\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 TYPE filespec [PAGE]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 TYPE filespec [NOPAGE]\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The TYPE command displays the contents of an ASCII character file on your screen.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b UPGRADE} (ZX Spectrum Next)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 UPGRADE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 UPGRADE CP/M from C:/NEXTZXOS/CPMBASE.P3D\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b USER/USE} (built-in)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 USER\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 USER n\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The USER command sets the current user number. The disk directory can be divided into distinct groups according to a User Number. User numbers range from 0 through 15.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b XREF} (Not included)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 =0.7cm Syntax:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 XREF \{d:\} filename \{$P\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 XREF provides a cross-reference summary of variable usage in a program. XREF requires the PRN and SYM files produced by MAC or RMAC for input to the program. The SYM and PRN files must have the same filename as the filename in the XREF command tail. XREF outputs a file of type XRF.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 10.1.2  BDOS\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 From the CP/M 3 Programmers\rquote  Guide 1984\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This section documents all BDOS system calls to include the parameters that must be passes to them and the values that are returned to the calling program.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 system reset}} BDOS function 0: {\b SYSTEM RESET}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $00 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The System Reset function terminates the calling program and returns control to the CCP via a warm start sequence. Calling this function has the same effect as a jump to location $0000 of Page Zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note that the disk subsystem is not reset by System Reset under CP/M 3. The calling program can pass a return code to the CCP by calling Function 108, Get/Set Program Return Code, prior to making a System Reset call or jumping to location $0000.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 console input}} BDOS function 1: {\b CONSOLE INPUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $01 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: ASCII Character \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Console Input function reads the next character from the logical console, CONIN:, to register A. Graphic characters, along with carriage return, line-feed, and backspace, CTRL-H, are echoed to the console. Tab characters, CTR-L-1, are expanded in columns of 8 characters. CTRL-S, CTRL-Q, and CTRL-P are normally intercepted as described below. All other non-graphic characters are returned in register A but are not echoed to the console.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the Console Mode is in the default state Function 1 intercepts the stop scroll, CTRL-S, start scroll, CTRL-Q, and start/stop printer echo, CTRL-P, characters. Any characters that are typed following a CTRL-S and preceding a CTRL-Q are also intercepted. However, if start/stop scroll has been disabled by the Console Mode, the CTRL-S, CTRL-Q, and CTRL-P characters are not intercepted. Instead, they are returned in register A, but are not echoed to the console.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If printer echo has been invoked, all characters that are echoed to the console are also sent to the list device, LST:. Function 1 does not return control to the calling program until a non-intercepted character is typed, thus suspending execution if a character is not ready.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 console output}} BDOS function 2: {\b CONSOLE OUTPUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $02 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: ASCII Character \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Console Output function sends the ASCII character from register E to the logical console device, CONOUT:. When the Console Mode is in the default state (see Section 2.2.1), Function 2 expands tab characters, CTRL-1, in columns of 8 characters, checks for stop scroll, CTRL-S, start scroll, CTRL-Q, and echoes characters to the logical list device, LST:, if printer echo, CTRL-P, has been invoked.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 auxiliary input}} BDOS function 3: {\b AUXILIARY INPUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $03 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: ASCII Character \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Auxiliary Input function reads the next character from the logical auxiliary input device, AUXIN:, into register A. Control does not return to the calling program \rquote I the character is read. unti\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 auxiliary output}} BDOS function 4: {\b AUXILIARY OUTPUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $04 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: ASCII Character \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Auxiliary Output function sends the ASCII character from register E to the logical auxiliary output device, AUXOUT:.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 list output}} BDOS function 5: {\b LIST OUTPUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $05 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: ASCII Character \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The List Output function sends the ASCII character in register E to the logical list device, LST:.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 direct console I/O}} BDOS function 6: {\b DIRECT CONSOLE I/O}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $06 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: function/data (see description) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: char/status/no value (see description) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 CP/M 3 supports direct I/O to the logical console, CONIN:, for those specialized applications where unadorned console input and output is required. Use Direct Console I/O carefully because it bypasses all the normal control character functions. Programs that perform direct I/O through the BIOS under previous releases of CP/M should be changed to use direct I/O so that they can be fully supported under future releases of MP/M and CP/M.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A program calls Function 6 by passing one of four different values in register E.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
$FF Console input/status command returns an input character; if no character is ready, a value of zero is returned. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
$FE Console status command (On return, register A contains 00 if no character is ready; otherwise it contains $FF.) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
$FD Console input command, returns an input character; this function will suspend the calling process until a character is ready. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
ASCII Function 6 assumes that register E contains a valid ASCII chararacter and sends it to the console. \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 auxiliary input status}} BDOS function 7: {\b AUXILIARY INPUT STATUS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $07 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Auxiliary Input Status \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Auxiliary Input Status function returns the value $FF in register A if a character is ready for input from the logical auxiliary input device, AUXIN:. If no character is ready for input, the value $00 is returned.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 auxiliary output status}} BDOS function 8: {\b AUXILIARY OUTPUT STATUS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $08 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Auxiliary Output Status \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Auxiliary Output Status function returns the value $FF in register A if the logical auxiliary output device, AUXOUT:, is ready to accept a character for output. If the device is not ready for output, the value $00 is returned.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 print string}} BDOS function 9: {\b PRINT STRING}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $09 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: String Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Print String function sends the character string addressed by register pair DE to the logical console, CONOUT:, until it encounters a delimiter in the string. Usually the delimiter is a dollar sign, $, but it can be changed to any other value by Function 110, Get/Set Output Delimiter. If the Console Mode is in the default state, Function 9 expands tab characters, CTRL-I, in columns of 8 characters. It also checks for stop scroll, CTRL-S, start scroll, CTRL-Q, and echoes to the logical list device, LST:, if printer echo, CTRL-P, has been invoked.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 read console buffer}} BDOS function 10: {\b READ CONSOLE BUFFER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $0A \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: Buffer Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Console Characters in Buffer \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Read Console Buffer function reads a line of edited console input from the logical console, CONIN:, to a buffer that register pair DE addresses. It terminates input and returns to the calling program when it encounters a return, CTRL-M, or a line feed, CTRL-J, character. Function 10 also discards all input characters after the input buffer is filled. In addition, it outputs a bell character, CTRL-G, to the console when it discards a character to signal the user that the buffer is full. The input buffer addressed by DE has the following format:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 where mx is the maximum number of characters which the buffer holds, and nc is the number of characters placed in the buffer. The characters entered by the operator follow the nc value. The value mx must be set prior to making a Function 10 call and may range in value from 1 to 255. Setting mx to zero is equivalent to setting mx to one. The value nc is returned to the calling program and may range from zero to mx. If nc < mx, then uninitialized positions follow the last character, denoted by ?? in the figure. Note that a terminating return or line feed character is not placed in the buffer and not included in the count nc.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If register pair DE is set to zero, Function 10 assumes that an initialized input buffer is located at the current DMA address (see Function 26, Set DMA Address). This allows a program to put a string on the screen for the user to edit. To initialize the input buffer, set characters c1 through cn to the initial value followed by a binary zero terminator.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When a program calls Function 10 with an initialized buffer, Function 10 operates as if the user had typed in the string. When Function 10 encounters the binary zero terminator, it accepts input from the console. At this point, the user can edit the initialized string or accept it as it is by pressing the RETURN key. However, if the initialized string contains a return, CTRL-M, or a linefeed, CTRL-J, character, Function 10 returns to the calling program without giving the user the opportunity to edit the string.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The level of console editing supported by Function 10 differs for the banked and nonbanked versions of CP/M 3. Refer to the CPIM Plus (CPIM Version 3) Operating System User\rquote s Guide for a detailed description of console editing. In the nonbanked version, Function 10 recognizes the following edit control characters.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Nonbanked CP/M 3 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
rub/del Removes and echoes the last character; GENCPM can change this function to CTRL-H \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-C Reboots when at the beginning of line; the Console Mode can disable this function \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-E Causes physical end of line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-H Backspaces one character position; GENCPM can change this function to rub/del \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-J (Line-feed) terminates input line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-M (Return) terminates input line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-P Echoes console output to the list device \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-R Retypes the current line after new line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-U Removes current line after new line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-X Backspaces to beginning of current line \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The banked version of CP/M 3 expands upon the editing provided in the non-banked version. The functionality of the two versions is similar when the cursor is positioned at the end of the line. However, in the banked version, the user can move the cursor anywhere in the current line, insert characters, delete characters, and perform other editing functions. In addition, the banked version saves the previous command line; it can be recalled when the current line is empty. In the banked version, Function 10 recognizes the following edit control characters.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Banked CP/M 3 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
rub/del Removes and echoes the last character if at the end of the line; otherwise deletes the character to the left of the current cursor position; GENCPM can change this function to CTRL-H. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-A Moves cursor one character to the left. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-B Moves cursor to the beginning of the line when not at the beginning; otherwise moves cursor to the end of the line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-C Reboots when at the beginning of line; the Console Mode can disable this function. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-E Causes physical end-of-line; if the cursor is positioned in the middle of a line, the characters at and to the right of the cursor are displayed on the next line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-F Moves cursor one character to the right. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-G Deletes the character at the current cursor position when in the middle of the line; has no effect when the cursor is at the end of the line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-H Backspaces one character position when positioned at the end of the line,; otherwise deletes the character to the left of the cursor; GENCPM can change this function to rub/del. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-J (Line-feed) terminates input; the cursor can be positioned anywhere in the line; the entire input line is accepted; sets the previous line buffer to the input line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-K Deletes all characters to the right of the cursor along with the character at the cursor. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-M (Return) terminates input; the cursor can be positioned anywhere in the line; the entire input line is accepted; sets the previous line buffer to the input line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-P Echoes console output to the list device. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-R Retypes the characters to the left of the cursor on the new line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-U Updates the previous line buffer to contain the characters to the left of the cursor; deletes current line, and advances to new line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-W Recalls previous line if current line is empty; otherwise moves cursor to end-of-line. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
CTRL-X Deletes all characters to the left of the cursor. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 For banked systems, Function 10 uses the console width field defined in the System Control Block. If the console width is exceeded when the cursor is positioned at the end of the line, Function 10 automatically advances to the next line. The beginning of the line can be edited by entering a CTRL-R.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When a character is typed while the cursor is positioned in the middle of the line, the typed character is inserted into the line. Characters at and to the right of the cursor are shifted to the right. If the console width is exceeded, the characters disappear off the right of the screen. However, these characters are not lost. They reappear if characters are deleted out of the line, or if a CTRL-E is typed.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get console status}} BDOS function 11: {\b GET CONSOLE STATUS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $0B \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Console Status \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Get Console Status function checks to see if a character has been typed at the logical console, CONIN:. If the Console Mode is in the default state, Function 11 returns the value $01 in register A when a character is ready. If a character is not ready, it returns a value of $00.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the Console Mode is in CTRL-C Only Status mode, Function 11 returns the value $01 in register A only if a CTRL-C has been typed at the console.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 return version number}} BDOS function 12: {\b RETURN VERSION NUMBER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $0C \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: Version Number \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Return Version Number function provides information that allows version independent programming. It returns a two-byte value in register pair HL: H contains $00 for CP/M and L contains $31, the BDOS file system version number. Function 12 is useful for writing applications programs that must run on multiple versions of CP/M and MP/M.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 reset disk system}} BDOS function 13: {\b RESET DISK SYSTEM}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $0D \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Reset Disk System function restores the file system to a reset state where all the disk drives are set to read-write (see Functions 28 and 29), the default disk is set to drive A, and the default DMA address is reset to $0080. This function can be used, for example, by an application program that requires disk changes during operation. Function 37, Reset Drive, can also be used for this purpose.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 select disk}} BDOS function 14: {\b SELECT DISK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $0E \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: Selected Disk \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Flag \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Select Disk function designates the disk drive named in register E as the default disk for subsequent BDOS file operations. Register E is set to 0 for drive A, 1 for drive B, and so on through 15 for drive P in a full 16-drive system. In addition, Function 14 logs in the designated drive if it is currently in the reset state. Logging-in a drive activates the drive\rquote s directory until the next disk system reset or drive reset operation.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 FCBs that specify drive code zero (dr = $00) automatically reference the currently selected default drive. FCBs with drive code values between 1 and 16, however, gnore the selected default drive and directly reference drives A through P.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, register A contains a zero if the select operation was successful. If a physical error was encountered, the select function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode, a message identifying the error is displayed at the console, and the calling program is terminated. Otherwise, the select function returns to the calling program with register A set to $FF and register H set to one of the following\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 physical error codes: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O Error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 open file}} BDOS function 15: {\b OPEN FILE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $0F \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical or Extended Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Open File function activates the FCB for a file that exists in the disk directory under the currently active user number or user zero. The calling program passes the address of the FCB in register pair DE, with byte 0 of the FCB specifying the drive, bytes 1 through 11 specifying the filename and filetype, and byte 12 specifying the extent. Usually, byte 12 of the FCB is initialized to zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the file is password protected in Read mode, the correct password must be placed in the first eight bytes of the current DMA, or have been previously established as the default password (see Function 106). If the current record field of the FCB, cr, is set to $FF, Function 15 returns the byte count of the last record of the file in the cr field. You can set the last record byte count for a file with Function 30, Set File Attributes. Note that the current record field of the FCB, cr, must be zeroed by the calling program before beginning read or write operations if the file is to be accessed sequentially from the first record.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the current user is non-zero, and the file to be opened does not exist under the current user number, the open function searches user zero for the file. If the file exists under user zero, and has the system attribute, t2\rquote , set, the file is opened under user zero. Write operations are not supported for a file that is opened under user zero in this manner.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the open operation is successful, the user\rquote s FCB is activated for read and write operations. The relevant directory information is copied from the matching directory FCB into bytes d0 through dn of the FCB. If the file is opened under user zero when the current user number is not zero, interface attribute f8\rquote  is set to one in the user\rquote s FCB. In addition, if the referenced file is password protected in Write mode, and the correct password was not passed in the DMA, or did not match the default password, interface attribute f7\rquote  is set to one. Write operations are not supported for an activated FCB if interface attribute f7\rquote  or f8\rquote  is true.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the open operation is successful, the open function also makes an Access date and time stamp for the opened file when the following conditions are satisfied: the referenced drive has a directory label that requests Access date and time stamping, and the FCB extent number field is zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Open File function returns a directory code in register A with the value $00 if the open was successful, or $FF, 255 decimal, if the file was not found. Register H is set to zero in both of these cases. If a physical or extended error was encountered, the Open File function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode, a message identifying the error is displayed at the console and the program is terminated. Otherwise, the Open File function returns to the calling program with register A set to $FF, and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 : Disk I/O Error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 : Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
07 : File password error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 : ? in the FCB filename or filetype field \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 close file}} BDOS function 16: {\b CLOSE FILE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $10 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical or Extended Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Close File function performs the inverse of the Open File function. The calling program passes the address of an FCB in register pair DE. The referenced FCB must have been previously activated by a successful Open or Make function call (see Functions 15 and 22). Interface attribute f5\rquote  specifies how the file is to be closed as shown below:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f5\rquote  = 0 - Permanent close (default mode) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f5\rquote  = 1 - Partial close \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A permanent close operation indicates that the program has completed file operations on the file. A partial close operation updates the directory, but indicates that the file is to be maintained in the open state.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the referenced FCB contains new information because of write operations to the FCB, the close function permanently records the new information in the referenced disk directory. Note that the FCB does not contain new information, and the directory update step is bypassed if only read or update operations have been made to the referenced FCB.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the close function returns a directory code in register A with the value $00 if the close was successful\'84 or $FF, 255 Decimal, if the file was not found. Register H is set to zero in both of these cases. If a physical or extended error is encountered, the close function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode, a message identifying the error is displayed at the console, and the calling program is terminated. Otherwise, the close function returns to the calling program with register A set to $FF and register H set to one of the following physical error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read/only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 search for first}} BDOS function 17: {\b SEARCH FOR FIRST}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $11 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Search For First function scans the directory for a match with the FCB addressed by register pair DE. Two types of searches can be performed. For standard searches, the calling program initializes bytes 0 through 12 of the referenced FCB, with byte 0 specifying the drive directory to be searched, bytes 1 through 11 specifying the file or files to be searched for\'84 and byte 12 specifying the extent. Usually byte 12 is set to zero. An ASCII question mark, 63 decimal, 3F hex, in any of the bytes 1 through 12 matches all entries on the directory in the corresponding position. This facility, called ambiguous reference, can be used to search for multiple files on the directory. When called in the standard mode, the Search function scans for the first file entry in the specified directory that matches the FCB, and belongs to the current user number.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Search For First function also initializes the Search For Next function. After the Search function has located the first directory entry matching the referenced FCB, the Search For Next function can be called repeatedly to locate all remaining matching entries. In terms of execution sequence, however, the Search For Next call must either follow a Search For First or Search For Next call with no other intervening BDOS disk-related function calls.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If byte 0 of the referenced FCB is set to a question mark, the Search function ignores the remainder of the referenced FCB, and locates the first directory entry residing on the current default drive. All remaining directory entries can be located by making multiple Search For Next calls. This type of search operation is not usually made by application programs, but it does provide complete flexibility to scan all current directory values. Note that this type of search operation must be performed to access a drive\rquote s directory label.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Search function returns a Directory Code in register A with the value 0 to 3 if the search is successful, or $FF, 255 Decimal, if a matching directory entry is not found. Register H is set to zero in both of these cases. For successful searches, the current DMA is also filled with the directory record containing the matching entry, and the relative starting position is A * 32 (that is, rotate the A register left 5 bits, or ADD A five times). Although it is not usually required for application programs, the directory information can be extracted from the buffer at this position.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the directory has been initialized for date and time stamping by INITDIR, then an SFCB resides in every fourth directory entry, and successful Directory Codes are restricted to the values 0 to 2. For successful searches, if the matching directory record is an extent zero entry, and if an SFCB resides at offset 96 within the current DMA, contents of (DMA Address + 96) = $21, the SFCB contains the date and time stamp information, and password mode for the file. This information is located at the relative starting position of 97 + (A * 10) within the current DMA in the following format:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
0 - 3 Create or Access Date and Time Stamp Field \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
4 - 7 Update Date and Time Stamp Field \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
8 : Password Mode Field \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If a physical error is encountered, the Search function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode, a message identifying the error is displayed at the console, and the calling program is terminated. Otherwise, the Search function returns to the calling program with register A set to $FF, and register H set to one of the following physical error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 search for next}} BDOS function 18: {\b SEARCH FOR NEXT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $12 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Search For Next function is identical to the Search For First function, except that the directory scan continues from the last entry that was matched. Function 18 returns a Directory code in register A, analogous to Function 17.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note: in execution sequence, a Function 18 call must follow either a Function 17 or another Function 18 call with no other intervening BDOS disk-related function calls.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 delete file}} BDOS function 19: {\b DELETE FILE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $13 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Extended or Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Delete File function removes files or XFCBs that match the FCB addressed in register pair DE. The filename and filetype can contain ambiguous references, that is, question marks in bytes f1\rquote  through t3\rquote , but the dr byte cannot be ambiguous, as it can in the Search and Search Next functions. Interface attribute f5\rquote  specifies the type of delete operation that is performed.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f5\rquote  = 0 - Standard Delete (default mode) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f5\rquote  = 1 - Delete only XFCBs \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If any of the files that the referenced FCB specify are password protected, the correct password must be placed in the first eight bytes of the current DMA buffer, or have been previously established as the default password (see Function 106).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For standard delete operations, the Delete function removes all directory entries belonging to files that match the referenced FCB. All disk directory and data space owned by the deleted files is returned to free space, and becomes available for allocation to other files. Directory XFCBs that were owned by the deleted files are also removed from the directory. If interface attribute f5\rquote  of the FCB is set to 1, Function 19 deletes only the directory XFCBs that match the referenced FCB.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note: if any of the files that match the input FCB specification fall the password check, or are Read-Only, then the Delete function does not delete any files or XFCBS. This applies to both types of delete operations.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In nonbanked systems, file passwords and XFCBs are not supported. Thus, if the Delete function is called with interface attribute f5\rquote  set to true, the Delete function performs no action but returns with register A set to zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Delete function returns a Directory Code in register A with the value 0 if the delete is successful, or $FF, 255 Decimal, if no file that matches the referenced FCB is found. Register H is set to zero in both of these cases. If a physical, or extended error is encountered, the Delete function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is the default mode, a message identifying the error is displayed at the console and the calling program is terminated. Otherwise, the Delete function returns to the calling program with register A set to $FF and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 : Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 : Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
03 : Read-Only file \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 : Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
07 : File password error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 read sequential}} BDOS function 20: {\b READ SEQUENTIAL}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $14 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Read Sequential function reads the next 1 to 128 128-byte records from a file into memory beginning at the current DMA address. The BDOS Multi-Sector Count (see Function 44) determines the number of records to be read. The default is one record. The FCB addressed by register pair DE must have been previously activated by an Open or Make function call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 20 reads each record from byte cr of the extent, then automatically increments the cr field to the next record position. If the cr field overflows, then the function automatically opens the next logical extent and resets the cr field to 0 in preparation for the next read operation. The calling program must set the cr field to 0 following the Open call if the intent is to read sequentially from the beginning of the file. Upon return, the Read Sequential function sets register A to zero if the read operation is successful. Otherwise, register A contains an error code identifying the error as shown below:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Reading unwritten data (end-of-file) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 Invalid FCB \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
10 Media change occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
255 Physical Error; refer to register H \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Error Code 01 is returned if no data exists at the next record position of the file. Usually, the no data situation is encountered at the end of a file. However, it can also occur if an attempt is made to read a data block that has not been previously written, or an extent which has not been created. These situations are usually restricted to files created or appended with the BDOS random write functions (see Functions 34 and 40).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 09 is returned if the FCB is invalidated by a previous BDOS close call that returns an error.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 10 is returned if a media change occurs on the drive after the referenced FCB is activated by a BDOS Open, or Make Call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 255 is returned if a physical error is encountered and the BDOS error mode is Return Error mode, or Return and Display Error mode (see Function 45). If the error mode is the default mode, a message identifying the physical error is displayed at the console, and the calling program is terminated. When a physical error is returned to the calling program, register H contains one of the following error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 On all error returns except for physical error returns, A = 255, Function 20 sets register H to the number of records successfully read before the error is encountered. This value can range from 0 to 127 depending on the current BDOS Multi-Sector Count. It is always set to zero when the Multi-Sector Count is equal to one.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 write sequential}} BDOS function 21: {\b WRITE SEQUENTIAL}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $15 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Write Sequential function writes 1 to 128 128-byte data records, beginning at the current DMA address into the file named by the FCB addressed in register pair DE. The BDOS Multi-Sector Count (see Function 44) determines the number of 128 byte records that are written. The default is one record. The referenced FCB must have been previously activated by a BDOS Open or Make function call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 21 places the record into the file at the position indicated by the cr byte of the FCB, and then automatically increments the cr byte to the next record position. If the cr field overflows, the function automatically opens, or creates the next logical extent, and resets the cr field to 0 in preparation for the next write operation. If Function 21 is used to write to an existing file, then the newly written records overlay those already existing in the file. The calling program must set the cr field to 0 following an Open or Make call if the intent is to write sequentially from the beginning of the file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 21 makes an Update date and time for the file if the following conditions are satisfied: the referenced drive has a directory label that requests date and time stamping, and the file has not already been stamped for update by a previous Make or Write function call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Write Sequential function sets register A to zero if the write operation is successful. Otherwise, register A contains an error code identifying the error as shown below:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 No available directory space \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 No available data block \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 Invalid FCB \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
10 Media change occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
255 Physical Error : refer to register H \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Error Code 01 is returned when the write function attempts to create a new extent that requires a new directory entry, and no available directory entries exist on the selected disk drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 02 is returned when the write command attempts to allocate a new data block to the file, and no unallocated data blocks exist on the selected disk drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 09 is returned if the FCB is invalidated by a previous BDOS close call that returns an error.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 10 is returned if a media change occurs on the drive after the referenced FCB is activated by a BDOS Open or Make call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 255 is returned if a physical error is encountered and the BDOS error mode is Return Error mode, or Return and Display Error mode (see Function 45). If the error mode is the default mode, a message identifying the physical error is displayed at the console, and the calling program is terminated. When a physical error is returned to the calling program, register H contains one of the following error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
03 Read-Only file or File open from user 0 when the current user number is non-zero or File password protected in Write mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 On all error returns, except for physical error returns, A = 255, Function 21 sets register H to the number of records successfully written before the error was encountered. This value can range from 0 to 127 depending on the current BDOS Multi-Sector Count. It is always set to zero when the Multi-Sector Count is set to one.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 make file}} BDOS function 22: {\b MAKE FILE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $16 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical or Extended Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Make File function creates a new directory entry for a file under the current user number. It also creates an XFCB for the file if the referenced drive has a directory label that enables password protection on the drive, and the calling program assigns a password to the file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The calling program passes the address of the FCB in register pair DE, with byte 0 of the FCB specifying the drive, bytes 1 through 11 specifying the filename and filctype, and byte 12 set to the extent number. Usually, byte 12 is set to zero. Byte 32 of the FCB, the cr field, must be initialized to zero, before or after the Make call, if the intent is to write sequentially from the beginning of the file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Interface attribute f6\rquote  specifies whether a password is to be assigned to the created file.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f6\rquote  = 0 - Do not assign password (default) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f6\rquote  = 1 - Assign password to created file \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 When attribute f6\rquote  is set to 1, the calling program must place the password in the first 8 bytes of the current DMA buffer, and set byte 9 of the DMA buffer to the password mode (see Function 102). Note that the Make function only interrogates interface attribute f6\rquote  if passwords are activated on the referenced drive. In nonbanked systems, file passwords are not supported, and attribute f6\rquote  is never interrogated.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Make function returns with an error if the referenced FCB names a file that currently exists in the directory under the current user number.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the Make function is successful, it activates the referenced FCB for file operations by opening the FCB, and initializes both the directory entry and the referenced FCB to an empty file. It also initializes all file attributes to zero. In addition, Function 22 makes a Creation date and time stamp for the file if the following conditions are satisfied: the referenced drive has a directory label that requests Creation date and time stamping and the FCB extent number field is equal to zero. Function 22 also makes an Update stamp if the directory label requests update stamping and the FCB extent field is equal to zero.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the referenced drive contains a directory label that enables password protection, and if interface attribute f6\rquote  has been set to 1, the Make function creates an XFCB for the file. In addition, Function 22 also assigns the password, and password mode placed in the first nine bytes of the DMA, to the XFCB.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Make function returns a directory code in register A with the value 0 if the make operation is successful, or $FF, 255 decimal, if no directory space is available. Register H is set to zero in both of these cases. If a physical or extended error is encountered, the Make function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is the default mode, a message identifying the error is displayed at the console, and the calling program is terminated. Otherwise, the Make function returns to the calling program with register A set to $FF, and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 : Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 : Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 : Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
08 : File already exists \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 : ? in filename or filetype field \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 rename file}} BDOS function 23: {\b RENAME FILE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $17 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical or Extended Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Rename function uses the FCB, addressed by register pair DE, to change all directory entries of the file specified by the filename in the first 16 bytes of the FCB to the filename in the second 16 bytes. If the file specified by the first filename is password protected, the correct password must be placed in the first eight bytes of the current DMA buffer, or have been previously established as the default password (see Function 106). The calling program must also ensure that the filenames specified in the FCB are valid and unambiguous, and that the new filename does not already exist on the drive. Function 23 uses the dr code at byte 0 of the FCB to select the drive. The drive code at byte 16 of the FCB is ignored.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Rename function returns a Directory Code in register A with the value 0 if the rename is successful, or $0FF, 255 Decimal, if the file named by the first filename in the FCB is not found. Register H is set to zero in both of these cases. If a physical or extended error is encountered, the Rename function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is the default mode, a message identifying the error is displayed at the console and the program is terminated. Otherwise, the Rename function returns to the calling program with register A set to $0FF and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
03 Read-Only file \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
07 File password error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
08 File already exists \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 ? in filename or filetype field \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 return login vector}} BDOS function 24: {\b RETURN LOGIN VECTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $18 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: Login Vector \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 24 returns the login vector in register pair HL. The login vector is a 16-bit value with the least significant bit of L corresponding to drive A, and the highorder bit of H corresponding to the 16th drive, labelled P. A 0 bit indicates that the drive is not on-line, while a 1 bit indicates the drive is active. A drive is made active by either an explicit BDOS Select Disk call, number 14, or an implicit selection when a BDOS file operation specifies a non-zero dr byte in the FCB. Function 24 maintains compatibilty with earlier releases since registers A and L contain the same values upon return.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 return current disk}} BDOS function 25: {\b RETURN CURRENT DISK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $19 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Current Disk \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 25 returns the currently selected default disk number in register A. The disk numbers range from 0 through 15 corresponding to drives A through P.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 set dma address}} BDOS function 26: {\b SET DMA ADDRESS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $1A \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: DMA Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 DMA is an acronym for Direct Memory Address, which is often used in connection with disk controllers that directly access the memory of the computer to transfer data to and from the disk subsystem. Under CP/M 3, the current DMA is usually defined as the buffer in memory where a record resides before a disk write, and after a disk read operation. If the BDOS Multi-Sector Count is equal to one (see Function 44), the size of the buffer is 128 bytes. However, if the BDOS Multi-Sector Count is greater than one, the size of the buffer must equal N * 128, where N equals the Multi-Sector Count.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Some BDOS functions also use the current DMA to pass parameters, and to return values. For example, BDOS functions that check and assign file passwords require that the password be placed in the current DMA. As another example, Function 46, Get Disk Free Space, returns its results in the first 3 bytes of the current DMA. When the current DMA is used in this context, the size of the buffer in memory is determined by the specific requirements of the called function.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When a transient program is initiated by the CCP, its DMA address is set to $0080. The BDOS Reset Disk System function, Function 13, also sets the DMA address to $0080. The Set DMA function can change this default value to another memory address. The DMA address is set to the value passed in the register pair DE. The DMA address remains at this value until it is changed by another Set DMA Address, or Reset Disk System call.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get addr(alloc)}} BDOS function 27: {\b GET ADDR(ALLOC)}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $1B \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: ALLOC Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 CP/M 3 maintains an allocation vector in main memory for each active disk drive. Some programs use the information provided by the allocation vector to determine the amount of free data space on a drive. Note, however, that the allocation information might be inaccurate if the drive has been marked Read-Only.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 27 returns in register pair HL, the base address of the allocation vector for the currently selected drive. If a physical error is encountered when the BDOS error mode is one of the return modes (see Function 45), Function 27 returns the value $FFFF in the register pair HL.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In banked CP/M 3 systems, the allocation vector can be placed in bank zero. In this case, a transient program cannot access the allocation vector. However, the BDOS function, Get Disk Free Space (Function 46), can be used to directly return the number of free 128-byte records on a drive. The CP/M 3 utilities that display a drive\rquote s free space, DIR and SHOW, use Function 46 for that purpose.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 write protect disk}} BDOS function 28: {\b WRITE PROTECT DISK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $1C \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Write Protect Disk function provides temporary write protection for the currently selected disk by marking the drive as Read-Only, No program can write to a disk that is in the Read-Only state. A drive reset operation must be performed for a Read-Only drive to restore it to the Read-Write state (see Functions 13 and 37).\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get read-only vector}} BDOS function 29: {\b GET READ-ONLY VECTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: l$D \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: R/O Vector Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 29 returns a bit vector in register pair HL that indicates which drives have the temporary Read-Only bit set. The Read-Only bit can be set only by a BDOS Write Protect Disk call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The format of the bit vector is analogous to that of the login vector returned by Function 24. The least significant bit corresponds to drive A, while the most significant bit corresponds to drive P.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 set file attributes}} BDOS function 30: {\b SET FILE ATTRIBUTES}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $1E \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical or Extended error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 By calling the Set File Attributes function, a program can modify a file\rquote s attributes and set its last record byte count. Other BDOS functions can be called to interrogate these file parameters, but only Function 30 can change them. The file attributes that can be set or reset by Function 30 are fl\rquote  through f4\rquote , Read-Only, t1\rquote , System, t2\rquote , and Archive, t3\rquote . The register pair DE addresses an FCB containing a filename with the appropriate attributes set or reset. The calling program must ensure that it does not specify an ambiguous filename. In addition, if the specified file is password totected, the correct password must be placed in the first eight bytes of the current DMA buffer or have been previously established as the default password (see Function 106).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Interface attribute f6\rquote  specifies whether the last record byte count of the specified file is to be set:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f6\rquote  = 0 - Do not set byte count (default mode) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
f6\rquote  = 1 - Set byte count \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If interface attribute f6\rquote  is set, the calling program must set the cr field of the referenced FCB to the byte count value. A program can access a file\rquote s byte count value with the BDOS Open, Search, or Search Next functions.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 30 searches the referenced directory for entries belonging to the current user number that matches the FCB specified name and type fields. The function then updates the directory to contain the selected indicators, and if interface attribute f6\rquote  is set, the specified byte count value. Note that the last record byte count is maintained in byte 13 of a file\rquote s directory FCBS.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 File attributes t1\rquote , t2\rquote , and t3\rquote  are defined by CP/M 3. (They are described in Section 2.3.4.) Attributes fl\rquote  through f4\rquote  are not presently used, but can be useful for application programs, because they are not involved in the matching program used by the BDOS during Open File and Close File operations. Indicators f5\rquote  through f8\rquote  are reserved for use as interface attributes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, Function 30 returns a Directory Code in register A with the value 0 if the function is successful, or $FF, 255 Decimal, if the file specified by the referenced FCB is not found. Register H is set to zero in both of these cases. If a physical or extended error is encountered\rquote , the Set File Attributes function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is the default mode, a message identifying the error is displayed at the console, and the program is terminated. Otherwise, Function 30 returns to the calling program with reg\rquote ls-Ler A set to $FF, and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Select error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
07 File password error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 ? in filename or filetype field \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 get addr(DPB parms)}} BDOS function 31: {\b GET ADDR(DPB PARMS)}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $1F \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: DPB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 31 returns in register pair HL the address of the BIOS-resident Disk Parameter Block, DPB, for the currently selected drive. (Refer to the CP/M Plus (CP/M Version 3) Operating System System Guide for the format of the DPB). The calling program can use this address to extract the disk parameter values.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If a physical error is encountered when the BDOS error mode is one of the return modes (see Function 45), Function 31 returns the value $FFFF in the register pair HL.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get user code}} {\xe{\v set user code}} BDOS function 32: {\b SET/GET USER CODE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $20 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: $FF (get) or User Code (set) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Current Code or (no value) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A program can change, or interrogate the currently active user number by calling Function 32. If register E = $FF, then the value of the current user number is returned in register A, where the value is in the range of 0 to 15. If register E is not $FF, then the current user number is changed to the value of E, modulo 16.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 read random}} BDOS function 33: {\b READ RANDOM}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $21 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Read Random function is similar to the Read Sequential function except that the read operation takes place at a particular random record number, selected by the 24-bit value constructed from the three byte, r0, r1, r2, field beginning at position 33 of the FCB. Note that the sequence of 24 bits is stored with the least significant byte first, rO, the middle byte next, rl, and the high byte last, r2. The random record number can range from 0 to 262,143. This corresponds to a maximum value of 3 in byte r2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 To read a file with Function 33, the calling program must first open the base extent, extent 0. This ensures that the FCB is properly initialized for subsequent random access operations. The base extent may or may not contain any allocated data. Function 33 reads the record specified by the random record field into the current DMA address. The function automatically sets the logical extent and current record values, but unlike the Read Sequential function, it does not advance the current record number. Thus, a subsequent Read Random call rereads the same record. After a random read operation, a file can be accessed sequentially, starting from the current randomly accessed position. However, the last randomly accessed record is reread or rewritten when switching from random to sequential mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the BDOS Multi-Sector Count is greater than one (see Function 44), the Read Random function reads multiple consecutive records into memory beginning at the current DMA. The rO, rl, and r2 field of the FCB is automatically incremented to read each record. However, the FCBs random record number is restored to the first record\rquote s value upon return to the calling program.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Read Random function sets register A to zero if the read operation was successful. Otherwise, register A contains one of the following error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Reading unwritten data (end-of-file) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
03 Cannot close current extent \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Seek to unwritten extent \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
06 Random record number out of range \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
10 Media change occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
255 Physical Error : refer to register H \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Error Code 01 is returned if no data exists at the next record position of the file. Usually, the no data situation is encountered at the end of a file. However, it can also occur if an attempt is made to read a data block that has not been previously written.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 03 is returned when the Read Random function cannot close the current extent prior to moving to a new extent.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 04 is returned when a read random operation accesses an extent that has not been created.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 06 is returned when byte 35, r2, of the referenced FCB is greater than 3.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 10 is returned if a media change occurs on the drive after the referenced FCB is activated by a BDOS Open or Make Call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 255 is returned if a physical error is encountered, and the BDOS error mode is one of the return modes (see Function 45). If the error mode is the default mode, a message identifying the physical error is displayed at the console, and the calling program is terminated. When a physical error is returned to the calling program, register H contains one of the following error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 On all error returns except for physical errors, A = 255, the Read Random function sets register H to the number of records successfully read before the error is encountered. This value can range from 0 to 127 depending on the current BDOS Multi-Sector Count. It is always set to zero when the Multi-Sector Count is equal to one.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 write random}} BDOS function 34: {\b WRITE RANDOM}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $22 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Write Random function is analogous to the Read Random function, except that data is written to the disk from the current DMA address. If the disk extent or data block where the data is to be written is not already allocated, the BDOS automatically performs the allocation before the write operation continues.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 To write to a file using the Write Random function, the calling program must first open the base extent, extent 0. This ensures that the FCB is properly initialized for subsequent random access operations. If the file is empty, the calling program must create the base extent with the Make File function before calling Function 34. The base extent might or might not contain any allocated data, but it does record the file in the directory, so that the file can be displayed by the DIR utility.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Write Random function sets the logical extent and current record positions to correspond with the random record being written, but does not change the random record number. Thus, sequential read or write operations can follow a random write, with the current record being reread or rewritten as the calling program switches from random to sequential mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 34 makes an Update date and time stamp for the file if the following conditions are satisfied: the referenced drive has a directory label that requests Update date and time stamping if the file has not already been stamped for update by a previous BDOS Make or Write call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the BDOS Multi-Sector Count is greater than one (see Function 44), the Write Random function reads multiple consecutive records into memory beginning at the current DMA. The rO, rl, and r2 field of the FCB is automatically incremented to write each record. However, the FCB\rquote s random record number is restored to the first record\rquote s value when it returns to the calling program. Upon return, the Write Random function sets register A to zero if the write operation is successful. Otherwise, register A contains one of the following error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 No available data block \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
03 Cannot Close current extent \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
05 No available directory space \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
06 Random record number out of range \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
10 Media change occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
255 Physical Error : refer to register H \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Error Code 02 is returned when the write command attempts to allocate a new data block to the file and no unallocated data blocks exist on the selected disk drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 03 is returned when the Write Random function cannot close the current extent prior to moving to a new extent.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 05 is returned when the write function attempts to create a new extent that requires a new directory entry and no available directory entries exist on the selected disk drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 06 is returned when byte 35, r2, of the referenced FCB is greater than 3.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 10 is returned if a media change occurs on the drive after the referenced FCB is activated by a BDOS Open or Make Call.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Error Code 255 is returned if a physical error is encountered and the BDOS error mode is one of the return modes (see Function 45). If the error mode is the default mode, a message identifying the physical error is displayed at the console, and the calling program is terminated. When a physical error is returned to the calling program, it is identified by register H as shown below:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read-Only disk\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
03 Read-Only file or File open from user 0 when the current user number is nonzero or File password protected in Write mode\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 On all error returns, except for physical errors, A = 255, the Write Random function sets register H to the number of records successfully written before the error is encountered. This value can range from 0 to 127 depending on the current BDOS Multi-Sector Count. It is always set to zero when the Multi-Sector Count is equal to one.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 compute file size}} BDOS function 35: {\b COMPUTE FILE SIZE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $23 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Flag \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical or Extended error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Random Record Field Set \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Compute File Size function determines the virtual file size, which is, in effect, the address of the record immediately following the end of the file. The virtual size of a file corresponds to the physical size if the file is written sequentially. If the file is written in random mode, gaps might exist in the allocation, and the file might contain fewer records than the indicated size. For example, if a single record with record number 262,143, the CP/M 3 maximum is written to a file using the Write Random function, then the virtual size of the file is 262,144 records even though only 1 data block \rquote is actually allocated.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 To compute file size, the calling program passes in register pair DE the address of an FCB in random mode format, bytes rO, rl and r2 present. Note that the FCB must contain an unambiguous filename and filetype. Function 35 sets the random record field of the FCB to the random record number + 1 of the last record in the file. If the r2 byte is set to 04, then the file contains the maximum record count 262,144.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A program can append data to the end of an existing file by calling Function 35 to set the random record position to the end of file, and then performing a sequence of random writes starting at the preset record address.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note: the BDOS does not require that the file be open to use Function 35. However, if the file has been written to, it must be closed before calling Function 35. Otherwise, an incorrect file size might be returned.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, Function 35 returns a zero in register A if the file specified by the referenced FCB is found, or an $FF in register A if the file is not found. Register H is set to zero in both of these cases. If a physical error is encountered, Function 35 performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is the default mode, a message identifying the error is displayed at the console and the program is terminated. Otherwise, Function 35 returns to the calling program with register A set to $FF, and register H set to one of the following physical errors:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 set random record}} BDOS function 36: {\b SET RANDOM RECORD}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $24 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Random Record Field Set \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Set Random Record function returns the random record number of the next record to be accessed from a file that has been read or written sequentially to a particular point. This value is returned in the random record field, bytes rO, rl, and r2, of the FCB addressed by the register pair DE. Function 36 can be useful in two ways,\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 First, it is often necessary to initially read and scan a sequential file to extract the positions of various key fields. As each key is encountered, Function 36 is called to compute the random record position for the data corresponding to this key. If the data unit size is 128 bytes, the resulting record number minus one is placed into a table with the key for later retrieval. After scanning the entire file and tabularizing the keys and their record numbers, you can move directly to a particular record by performing a random read using the corresponding random record number that you saved earlier. The scheme is easily generalized when variable record lengths are involved, because the program need only store the buffer-relative byte position along with the key and record number to find the exact starting position of the keyed data at a later time.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A second use of Function 36 occurs when switching from a sequential read or write over to random read or write. A file is sequentially accessed to a particular point in the file, then Function 36 is called to set the record number, and subsequent random read and write operations continue from the next record in the file.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 reset drive}} BDOS function 37: {\b RESET DRIVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $25 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: Drive Vector \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: $00 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Reset Drive function programmatically restores specified drives to the reset state. A reset drive is not logged-in and is in Read-Write status. The passed parameter in register pair DE is a 16-bit vector of drives to be reset, where the least significant bit corresponds to the first drive A, and the high-order bit corresponds to the sixteenth drive, labelled P. Bit values of 1 indicate that the specified drive is to be reset.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 access drive}} BDOS function 38: {\b ACCESS DRIVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $26 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This is an MP/M function that is not supported under CP/M 3. If called, the file system returns a zero In register A indicating that the access request is successful.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 free drive}} BDOS function 39: {\b FREE DRIVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $27 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This is an MP/M function that is not supported under CP/M 3. If called, the file system returns a zero In register A indicating that the free request is successful.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 write random with zero fill}} BDOS function 40: {\b WRITE RANDOM WITH ZERO FILL}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $28 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Write Random With Zero Fill function is identical to the Write Random function (Function 34) with the exception that a previously unallocated data block is filled with zeros before the record is written. If this function has been used to create a file, records accessed by a read random operation that contain all zeros identify unwritten random record numbers. Unwritten random records in allocated data blocks of files created using the Write Random function (Function 34) contain uninitialized data.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 test and write record}} BDOS function 41: {\b TEST AND WRITE RECORD}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $29 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Test and Write Record function is an MP/M function that is not supported under CP/M 3. If called, Function 41 returns with register A set to $FF and register H set to zero.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 lock record}} BDOS function 42: {\b LOCK RECORD}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $2A \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: $00 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Lock Record function is an MP/M II function that is supported under CP/M 3 only to provide compatibility between CP/M 3 and MP/M. It is intended for use in situations where more than one running program has Read-Write access to a common file. Because CP/M 3 is a single-user operating system in which only one program can run at a time, this situation cannot occur. Thus, under CP/M 3, Function 42 performs no action except to return the value $00 in register A indicating that the record lock operation is successful.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 unlock record}} BDOS function 43: {\b UNLOCK RECORD}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $2B \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: $00 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Unlock Record function is an MP/M II function that is supported under CP/M 3 only to provide compatibility between CP/M 3 and MP/M. It is intended for use in situations where more than one running program has Read-Write access to a common file. Because CP/M 3 is a single-user operating system in which only one program can run at a time, this situation cannot occur. Thus, under CP/M 3, Function 43 performs no action except to return the value $00 in register A indicating that the record unlock operation is successful.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 set multi-sector count}} BDOS function 44: {\b SET MULTI-SECTOR COUNT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $2C \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: Number of Sectors \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Return Code \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Set Multi-Sector Count function provides logical record blocking under CP/M 3. It enables a program to read and write from 1 to 128 records of 128 bytes at a time during subsequent BDOS Read and Write functions.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 44 sets the Multi-Sector Count value for the calling program to the value passed in register E. Once set, the specified Multi-Sector Count remains in effect until the calling program makes another Set Multi-Sector Count function call and changes the value. Note that the CCP sets the Multi-Sector Count to one when it initiates a transient program.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Multi-Sector Count affects BDOS error reporting for the BDOS Read and Write functions. If an error interrupts these functions when the Multi-Sector is greater than one, they return the number of records successfully read or written in register H for all errors except for physical errors (A = 255).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, register A is set to zero if the specified value is in the range of 1 to 128. Otherwise, register A is set to $FF.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 set BDOS error mode}} BDOS function 45: {\b SET BDOS ERROR MODE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $2D \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: BDOS Error Mode \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
None \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 45 sets the BDOS error mode for the calling program to the mode specified in register E. If register E is set to $FF, 255 decimal, the error mode is set to Return Error mode. If register E is set to $FE, 254 decimal, the error mode is set to Return and Display mode. If register E is set to any other value, the error mode is set to the default mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The SET BDOS Error Mode function determines how physical and extended errors (see Section 2.2.13) are handled for a program. The Error Mode can exist in three modes: the default mode, Return Error mode, and Return and Display Error mode. In the default mode, the BDOS displays a system message at the console that identifies the error and terminates the calling program. In the return modes, the BDOS sets register A to $FF, 255 decimal, places an error code that identifies the physical or extended error in register H and returns to the calling program. In Return and Display mode, the BDOS displays the system message before returning to the calling program. No system messages are displayed, however, when the BDOS is in Return Error mode.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get disk free space}} BDOS function 46: {\b GET DISK FREE SPACE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $2E \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: Drive \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
First 3 bytes of current DMA buffer \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Flag \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Get Disk Free Space function determines the number of free sectors, 128 byte records, on the specified drive. The calling program passes the drive number in register E, with 0 for drive A, 1 for B, and so on, through 15 for drive P in a full 16drive system. Function 46 returns a binary number in the first 3 bytes of the current DMA buffer. This number is returned in the following format:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 fso fsl fs2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Disk Free Space Field Format\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 fso = low byte\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 fsl = middle byte\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 fs2 = high byte\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note that the returned free space value might be inaccurate if the drive has been marked Read-Only.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, register A is set to zero if the function is successful. However, if the BDOS Error Mode is one of the return modes (see Function 45), and a physical error is encountered, register A is set to $FF, 255 decimal, and register H is set to one of the following values:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 - Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 - Invalid drive error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 chain to program}} BDOS function 47: {\b CHAIN TO PROGRAM}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $2F \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: Chain Flag \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Chain To Program function provides a means of chaining from one program to the next without operator intervention. The calling program must place a command line terminated by a null byte, OOH, in the default DMA buffer. If register E is set to $FF, the CCP initializes the default drive and user number to the current program values when it passes control to the specified transient program. Otherwise, these parameters are set to the default CCP values. Note that Function 108, Get/Set Program Return Code, can be used to pass a two byte value to the chained program.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 47 does not return any values to the calling program and any encountered errors are handled by the CCP.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 flush buffers}} BDOS function 48: {\b FLUSH BUFFERS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $30 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Flag \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 E: Purge Flag\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Flush Buffers function forces the write of any write-pending records contained in internal blocking/deblocking buffers. If register E is set to $FF, this function also purges all active data buffers. Programs that provide write with read verify support need to purge internal buffers to ensure that verifying reads actually access the disk instead of returning data that is resident in internal data buffers. The CP/M 3 PIP utility is an example of such a program.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, register A is set to zero if the flush operation is successful. If a physical error is encountered, the Flush Buffers function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode\'84 a message identifying the error is displayed at the console and the calling program is terminated. Otherwise, the Flush Buffers function returns to the calling program with register A set to $FF and register H set to the following physical error code:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
0 1 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read/only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 get system control bock}} {\xe{\v set system control bock}} BDOS function 49: {\b GET/SET SYSTEM CONTROL BLOCK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $31 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: SCB PB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Returned Byte \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: Returned Word \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 49 allows access to parameters located in the CP/M 3 System Control Block (SCB). The SCB is a 100-byte data structure residing within the BDOS that contains flags and data used by the BDOS, CCP and other system components. Note that Function 49 is a CP/M 3 specific function. Programs intended for both MP/M 11 and CP/M 3 should either avoid the use of this function or isolate calls to this function in CP/M 3 version-dependent sections.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 To use Function 49, the calling program passes the address of a data structure called the SCB parameter block in register pair DE. This data structure identifies the byte or word of the SCB to be updated or returned. The SCB parameter block is defined as:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par SCBPB: DB OFFSET ; Offset within SCB
\par        DB SET ; 0FFH if setting a byte
\par        ; 0FEH if setting a word
\par        ; 001H - 0FDH are reserved
\par        ; 000H if a get operation
\par        DW VALUE ; Byte or word value to be set
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The OFFSET parameter identifies the offset of the field within the SCB to be updated or accessed. The SET parameter determines whether Function 49 is to set a byte or word value in the SCB or if it is to return a byte from the SCB. The VALUE parameter is used only in set calls. In addition, only the first byte of VALUE is referenced in set byte calls.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Use caution when you set SCB fields. Some of these parameters reflect the current state of the operating system. If they are set to invalid values, software errors can result. In general, do not use Function 49 to set a system parameter if another BDOS function can achieve the same result. For example, Function 49 can be called to update the Current DMA Address field within the SCB. This is not equivalent to making a Function 26, Set DMA Address call, and updating the SCB Current DMA field in this way would result in system errors. However, you can use Function 49 to return the Current DMA address. The System Control Block is summarized in {\field{\*\fldinst{\lang1024 REF BMtable_91 \\* MERGEFORMAT }}{\fldrslt{10.1}}}.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtable_91}10.1{\*\bkmkend BMtable_91}: System Control Block}{\field{\*\fldinst TC "10.1 System Control Block" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {system/cpm/scb.csv} \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 If Function 49 is called with the OFFSET parameter of the SCB parameter block greater than $63, the function performs no action but returns with registers A and HL set to zero.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 direct BIOS calls}} BDOS function 50: {\b DIRECT BIOS CALLS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $32 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: BIOS PB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
BIOS RETURN \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 50 provides a direct BIOS call through the BDOS to the BIOS. The calling program passes the address of a data structure called the BIOS Parameter Block (BIOSPB) in register pair DE. The BIOSPB contains the BIOS function number and register contents as shown below:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par BIOSPB: db FUNC ; BIOS function no.
\par         db AREG ; A register contents
\par         dw BCREG ; BC register contents
\par         dw DEREG ; DE register contents
\par         dw HLREG ; HL register contents
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 System Reset (Function 0) is equivalent to Function 50 with a BIOS function number of 1.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note that the register pair BIOSPB fields (BCREG, DEREG, HLREG) arc defined in low byte, high byte order. For example, in the BCREG field, the first byte contains the C register value, the second byte contains the B register value. Under CP/M 3, direct BIOS calls via the BIOS jump vector are only supported for the BIOS Console I/O and List functions. You must use Function 50 to call any other\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 BIOS functions. In addition, Function 50 intercepts BIOS Function 27 (Select Memory) calls and returns with register A set to zero. Refer to the CPIM Plus (CP/M Version 3) Operating System System Guide for the definition of the BIOS functions and their register passing and return conventions.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 load overlay}} BDOS function 59: {\b LOAD OVERLAY}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $3B \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Only transient programs with an RSX header can use the Load Overlay function because BDOS Function 59 is supported by the LOADER module. The calling program must have a header to force the LOADER to remain resident after the program is loaded (see Section 1.3).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 59 loads either an absolute or relocatable module. Relocatable modules are identified by a filetype of PRL. Function 59 does not call the loaded module.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The referenced FCB must be successfully opened before Function 59 is called. The load address is specified in the first two random record bytes of the FCB, rO and rl. The LOADER returns an error if the load address is less than $100, or if performing the requested load operation would overlay the LOADER, or any other Resident System Extensions that have been previously loaded.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When loading relocatable files, the LOADER requires enough room at the load address for the complete PRL file including the header and bit map (see Appendix B). Otherwise an error is returned. Function 59 also returns an error on PRL file load requests if the specified load address is not on a page boundary.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, Function 59 sets register A to zero if the load operation is successful. If the LOADER RSX is not resident in memory because the calling program did not have a RSX header, the BDOS returns with register A set to $FF and register H set to zero. If the LOADER detects an invalid load address, or if insufficient memory is available to load the overlay, Function 59 returns with register A set to $FE. All other error returns are consistent with the error codes returned by BDOS Function 20, Read Sequential.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 call resident system extension}} BDOS function 60: {\b CALL RESIDENT SYSTEM EXTENSION}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $3C \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: RSX PB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 60 is a special BDOS function that you use when you call Resident System Extensions. The RSX subfunction is specified in a structure called the RSX Parameter Block, defined as follows:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par RSXPB: db FUNC ; RSX Function number
\par        db NUMPARMS ; Number of word Parameters
\par        dw PARMETER1 ; Parameter I
\par        dw PARMETER2 ; Parameter 2
\par        . . .
\par        dw PARMETERN ; Parameter n
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 RSX modules filter all BDOS calls and capture RSX function calls that they can handle. If there is no RSX module present in memory that can handle a specific RSX function call, the call is not trapped, and the BDOS returns $FF in registers A and L. RSX function numbers from 0 to 127 are available for CP/M 3 compatible software use. RSX function numbers 128 to 255 are reserved for system use.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 free blocks}} BDOS function 98: {\b FREE BLOCKS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $62 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Error Flag \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Free Blocks function scans all the currently logged-in drives, and for each drive returns to free space all temporarily-allocated data blocks. A temporarily-allocated data block is a block that has been allocated to a file by a BDOS write operation but has not been permanently recorded in the directory by a BDOS close operation. The CCP calls Function 98 when it receives control following a system warm start. Be sure to close your file, particularly any file you have written to, prior to calling Function 98.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In the nonbanked version of CP/M 3, Function 98 frees only temporarily allocated blocks for systems that request double allocation vectors in GENCPM.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, register A is set to zero if Function 98 is successful. If a physical error is encountered, the Free Blocks function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode, a message identifying the error is displayed at the console and the calling program is terminated. Otherwise, the Free Blocks function returns to the calling program with register A set to $FF and register H set to the following physical error code:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 : Invalid drive error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 truncate file}} BDOS function 99: {\b TRUNCATE FILE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $63 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Extended or Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Truncate File function sets the last record of a file to the random record number contained in the referenced FCB. The calling program passes the address of the FCB in register pair DE, with byte 0 of the FCB specifying the drive, bytes 1 through 11 specifying the filename and filetype, and bytes 33 through 35, rO, rl, and r2, specifying the last record number of the file. The last record number is a 24 bit value, stored with the least significant byte first, rO, the middle byte next, rl, and the high byte last, r2. This value can range from 0 to 262,143, which corresponds to a maximum value of 3 in byte r2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the file specified by the referenced FCB is password protected, the correct password must be placed in the first eight bytes of the current DMA buffer, or have been previously established as the default password (see Function 106).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 99 requires that the file specified by the FCB not be open, particularly if the file has been written to. In addition, any activated FCBs naming the file are not valid after Function 99 is called. Close your file before calling Function 99, and then reopen it after the call to continue processing on the file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 99 also requires that the random record number field of the referenced FCB specify a value less than the current file size. In addition, if the file is sparse, the random record field must specify a record in a region of the file where data exists.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, the Truncate function returns a Directory Code in register A with the value 0 if the Truncate function is successful, or $FF, 255 decimal, if the file is not found or the record number is invalid. Register H is set to zero in both of these cases. If a physical or extended error is encountered, the Truncate function performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode, a message identifying the error is displayed at the console and the program is terminated. Otherwise, the Truncate function returns to the calling program with register A set to $FF and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
03 Read-Only file \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
07 File password error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 ? in filename or filetype field \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 set directory label}} BDOS function 100: {\b SET DIRECTORY LABEL}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $64 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical or Extended Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Set Directory Label function creates a directory label, or updates the existing directory label for the specified drive. The calling program passes in register pair DE the address of an FCB containing the name, type, and extent fields to be assigned to the directory label. The name and type fields of the referenced FCB are not used to locate the directory label in the directory; they are simply copied into the updated or created directory label. The extent field of the FCB, byte 12, contains the user\rquote s specificat-on of the directory label data byte. The definition of the directory label data byte is:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
7 - Require passwords for password-protected files (Not supported in nonbanked CP/M 3 systems) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
6 - Perform access date and time stamping \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
5 - Perform update date and time stamping \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
4 - Perform create date and time stamping \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
0 - Assign a new password to the directory label \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If the current directory label is password protected, the correct password must be placed in the first eight bytes of the current DMA, or have been previously established as the default password (see Function 106). If bit 0, the low-order bit, of byte 12 of the FCB is set to 1, it indicates that a new password for the directory label has been placed in the second eight bytes of the current DMA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note that Function 100 is implemented as an RSX, DIRLBL.RSX, in nonbanked CP/M 3 systems. If Function 100 is called in nonbanked systems when the DIRLBL.RSX is not resident an error code of $0FF is returned.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 100 also requires that the referenced directory contain SFCBs to activate date and time stamping on the drive. If an attempt is made to activate date and time stamping when no SFCBs exist, Function 100 returns an error code of $FF in register A and performs no action. The CP/M 3 INITDIR utility initializes a directory for date and time stamping by placing an SFCB record in every fourth entry of the directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 100 returns a Directory Code in register A with the value 0 if the directory label create or update is successful, or $FF, 255 decimal, if no space exists in the referenced directory to create a directory label, or if date and time stamping was requested and the referenced directory did not contain SFCBS. Register H is set to zero in both of these cases. If a physical error or extended error is encountered, Function 100 performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is the default mode, a message identifying the error is displayed at the console and the calling program is terminated. Otherwise, Function 100 returns to the calling program with register A set to $FF and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
07 File password error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 return directory label data}} BDOS function 101: {\b RETURN DIRECTORY LABEL DATA}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $65 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: Drive \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Label Data Byte \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Return Directory Label Data function returns the data byte of the directory label for the specified drive. The calling program passes the drive number in register E with 0 for drive A, 1 for drive B, and so on through 15 for drive P in a full sixteen drive system. The format of the directory label data byte is shown below:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
7 - Require passwords for password protected files \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
6 - Perform access date and time stamping \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
5 - Perform update date and time stamping \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
4 - Perform create date and time stamping \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
0 - Directory label exists on drive \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 101 returns the directory label data byte to the calling program in register A. Register A equal to zero indicates that no directory label exists on the specified drive. If a physical error is encountered by Function 101 when the BDOS Error mode is in one of the return modes (see Function 45), this function returns with register A set to $FF, 25S decimal, and register H set to one of the following:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 read file date stamps and password mode}} BDOS function 102: {\b READ FILE DATE STAMPS AND PASSWORD MODE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $66 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 102 returns the date and time stamp information and password mode for the specified file in byte 12 and bytes 24 through 32 of the specified FCB. The calling program passes in register pair DE, the address of an FCB in which the drive, filename, and filetype fields have been defined.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If Function 102 is successful, it sets the following fields in the referenced FCB:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
byte 12 : Password mode field {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {bit}\tab
7 - Read mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {bit}\tab
6 - Write mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {bit}\tab
4 - Delete mode \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Byte 12 equal to zero indicates the file has not been assigned a password. In nonbanked systems, byte 12 is always set to zero.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
byte 24 - 27 Create or Access time stamp field \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
byte 28 - 31 Update time stamp field \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The date stamp fields are set to binary zeros if a stamp has not been made. The format of the time stamp fields is the same as the format of the date and time structure described in Function 104.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, Function 102 returns a Directory Code in register A with the value zero if the function is successful, or $FF, 255 decimal, if the specified file is not found. Register H is set to zero in both of these cases. If a physical or extended error is encountered, Function 102 performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is in the default mode, a message identifying the error is displayed at the console and the calling program is terminated. Otherwise, Function 102 returns to the calling program with register A set to $FF and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 ? in filename or filetype field \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 write file XFCB}} BDOS function 103: {\b WRITE FILE XFCB}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $67 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: FCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Directory Code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
H: Physical Error \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Write File XFCB function creates a new XFCB or updates the existing XFCB for the specified file. The calling program passes in register pair DE the address of an FCB in which the drive, name, type, and extent fields have been defined. The extent field specifies the password mode and whether a new password is to be assigned to the file. The format of the extent byte is shown below:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 FCB byte 12 (ex) : XFCB password mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
7 - Read mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
6 - Write mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
5 - Delete mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit}\tab
0 - Assign new password to the file \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If the specified file is currently password protected, the correct password must reside in the first eight bytes of the current DMA, or have been previously established as the default password (see Function 106). If bit 0 is set to 1, the new password must reside in the second eight bytes of the current DMA.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Upon return, Function 103 returns a Directory Code in register A with the value zero if the XFCB create or update is successful, or $FF, 255 decimal, if no directory label exists on the specified drive, or the file named in the FCB is not found, or no space exists in the directory to create an XFCB. Function 103 also returns with $FF in register A if passwords are not enabled by the referenced directory\rquote s label. On nonbanked systems, this function always returns with register A = $FF because passwords are not supported. Register H is set to zero in all of these cases. If a physical or extended error is encountered, Function 103 performs different actions depending on the BDOS error mode (see Function 45). If the BDOS error mode is the default mode, a message identifying the error is displayed at the console and the calling program is terminated. Otherwise, Function 103 returns to the calling program with register A set to $FF and register H set to one of the following physical or extended error codes:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 Disk I/O error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
02 Read-Only disk \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
04 Invalid drive error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
07 File password error \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
09 ? in filename or filetype field \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 set date and time}} BDOS function 104: {\b SET DATE AND TIME}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $68 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: DAT Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
none \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Set Date and Time function sets the system internal date and time. The calling program passes the address of a 4-byte structure containing the date and time specification in the register pair DE. The format of the date and time (DAT) data structure is:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {byte}\tab
0 - 1 Date field \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {byte}\tab
2 Hour field \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {byte}\tab
3 Minute field \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The date is represented as a 16-bit integer with day 1 corresponding to January 1, 1978. The time is represented as two bytes: hours and minutes are stored as two BCD digits.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 This function also sets the seconds field of the system date and time to zero.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get date and time}} BDOS function 105: {\b GET DATE AND TIME}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $69 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: DAT Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: seconds \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DAT set \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Get Date and Time function obtains the system internal date and time. The calling program passes in register pair DE, the address of a 4-byte data structure which receives the date and time values. The format of the date and time, DAT, data structure is the same as the format described in Function 104. Function 105 also returns the seconds field of the system date and time in register A as a two digit BCD value.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 set default password}} BDOS function 106: {\b SET DEFAULT PASSWORD}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $6A \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: Password Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
none \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Set Default Password function allows a program to specify a password value before a file protected by the password is accessed. When the file system accesses a password-protected file, it checks the current DMA, and the default password for the correct value. If either value matches the file\rquote s password, full access to the file is allowed. Note that this function performs no action in nonbanked CP/M 3 systems because file passwords are not supported.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 To make a Function 106 call, the calling program sets register pair DE to the address of an 8-byte field containing the password.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 return serial number}} BDOS function 107: {\b RETURN SERIAL NUMBER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $6B \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: Serial Number Field \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Serial number field set \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Function 107 returns the CP/M 3 serial number to the 6-byte field addressed by register pair DE.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get program return code}} {\xe{\v set program return code}} BDOS function 108: {\b GET/SET PROGRAM RETURN CODE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $6C \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: $0FFFF (Get) or Program Return Code (Set) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: Program Return Code or (no value) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 CP/M 3 allows programs to set a return code before terminating. This provides a mechanism for programs to pass an error code or value to a following job step in batch environments. For example, Program Return Codes are used by the CCP in CP/M 3\rquote s conditional command line batch facility. Conditional command lines are command lines that begin with a colon, :. The execution of a conditional command depends on the successful execution of the preceding command. The CCP tests the return code of a terminating program to determine whether it successfully completed or terminated in error. Program return codes can also be used by programs to pass an error code or value to a chained program (see Function 47, Chain To Program).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A program can set or interrogate the Program Return Code by calling Function 108. If re \rquote ster pair DE = $FFFF, then the current Program Return Code is returned in register pair HL. Otherwise, Function 108 sets the Program Return Code to the \rquote value contained in register pair DE. Program Return Codes are defined in {\field{\*\fldinst{\lang1024 REF BMtable_92 \\* MERGEFORMAT }}{\fldrslt{10.2}}}\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtable_92}10.2{\*\bkmkend BMtable_92}: Program Return Codes}{\field{\*\fldinst TC "10.2 Program Return Codes" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {system/cpm/return\\s\\do5({\fs18 c})odes.csv} \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 get console mode}} {\xe{\v set console mode}} BDOS function 109: {\b GET/SET CONSOLE MODE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $6D \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: $FFFF (Get) or Console Mode (Set) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: Console Mode or (no value) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A program can set or interrogate the Console Mode by calling Function 109. If register pair DE = $FFFF, then the current Console Mode is returned in register HL. Otherwise, Function 109 sets the Console Mode to the value contained in register pair DE.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Console Mode is a 16-bit system parameter that determines the action of certain BDOS Console I/O functions. The definition of the Console Mode is:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit 0}\tab
= 1 - CTRL-C only status for Function 1 1.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 = 0 - Normal status for Function 1 1. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit 1}\tab
= 1- Disable stop scroll, CTRL-S, start scroll, CTRL-Q, support.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 = 0-Enable stop scroll, start scroll support. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit 2}\tab
= 1- Raw console output mode. Disables tab expansion for Functions 2, 9 and 111. Also disables printer echo, CTIRL-P, support.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 = 0 - Normal console output mode. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bit 3}\tab
= 1 - Disable CTRL-C program termination\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 = 0 - Enable CTRL-C program termination \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {bits 8,9}\tab
-Console status mode for RSXs that perform console input redirection from a file. These bits determine how the RSX responds to console status requests. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
bit 8 = 0, bit 9 = 0 - conditional status \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
bit 8 = 0, bit 9 = 1 - false status \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
bit 8 = 1, bit 9 = 0 - true status \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
bit 8 = 1, bit 9 = 1 - bypass redirection \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Note that the Console Mode bits are numbered from right to left.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The CCP initializes the Console Mode to zero when it loads a program unless the program has an RSX that overrides the default value. Refer to Section 2.2.1 for detailed information on Console Mode.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 get output delimiter}} {\xe{\v set output delimiter}} BDOS function 110: {\b GET/SET OUTPUT DELIMITER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $6E \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: $FFFF (Get) or \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E: Output Delimiter (Set) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A: Output Delimiter or (no value) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A program can set or interrogate the current Output Delimiter by calling Function 110. If register pair DE = $FFFF, then the current Output Delimiter is returned in register A. Otherwise, Function 110 sets the Output Delimiter to the value contained in register E.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 110 sets the string delimiter for Function 9, Print String. The default delimiter value is a dollar sign, $. The CCP restores the Output Delimiter to the default value when a transient program is loaded.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 print block}} BDOS function 111: {\b PRINT BLOCK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $6F \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: CCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
none \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Print Block function sends the character string located by the Character Control Block, CCB, addressed in register pair DE, to the logical console, CONOUT:. If the Console Mode is in the default state (see Section 2.2.1), Function 111 expands tab characters, CTRL-I, in columns of eight characters. It also checks for stop scroll, CTRL-S, start scroll, CTRL-Q, and echoes to the logical list device, LST:, if printer echo, CTRL-P, has been invoked.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The CCB format is: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {byte}\tab
0 - 1 Address of character string (word value) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {byte}\tab
2 - 3 Length of character string (word value) \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 list block}} BDOS function 112: {\b LIST BLOCK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $70 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: CCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
none \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The List Block function sends the character string located by the Character Control Block, CCB, addressed in register pair DE, to the logical list device, LST:.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The CCB format is: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {byte}\tab
0 - 1 Address of character string (word value) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {byte}\tab
2 - 3 Length of character string (word value) \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 parse filename}} BDOS function 152: {\b PARSE FILENAME}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C: $98 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE: PFCB Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL: Return code \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Parsed file control block \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Parse Filename function parses an ASCII file specification and prepares a File Control Block, FCB. The calling program passes the address of a data structure called the Parse Filename Control Block, PFCB, in register pair DE. The PFCB contains the address of the input ASCII filename string followed by the address of the target FCB as shown below:\par
{\pard\plain\s38\ql\widctlpar\f3\fs22\sl240\slmult1 \sb120 \fi0 
\par  PFCB: DW INPUT ; Address of input ASCII string
\par        DW FCB ; Address of target FCB
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The maximum length of the input ASCII string to be parsed is 128 bytes. The target FCB must be 36 bytes in length.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 152 assumes the input string contains file specifications in the following form:\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \{d:\}filename\{.typ\}\{;password\}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 where items enclosed in curly brackets are optional. Function 152 also accepts isolated drive specifications d: in the input string. When it encounters one, it sets the filename, filetype, and password fields in the FCB to blank.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The Parse Filename function parses the first file specification it finds in the input string. The function first eliminates leading blanks and tabs. The function then assumes that the file specification ends on the first delimiter it encounters that is out of context with the specific field it is parsing. For instance, if it finds a colon, and it is not the second character of the file specification, the colon delimits the entire file specification.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Function 152 recognizes the following characters as detimiters:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
space \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
tab \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
return \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
nut] \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
; (semicolon) - except before password field \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
= (equal) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
{<} (less than) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
{>} (greater than) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
. (period) - except after filename and before filetype \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
: (colon) - except before filename and after drive \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
, (comma) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
{|} (vertical bar) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
[ (left square bracket) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
] (right square bracket) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 If Function 152 encounters a non-graphic character in the range 1 through 31 not listed above, it treats the character as an error. The Parse Filename function initializes the specified FCB shown in {\field{\*\fldinst{\lang1024 REF BMtable_93 \\* MERGEFORMAT }}{\fldrslt{10.3}}}.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtable_93}10.3{\*\bkmkend BMtable_93}: FCB Format}{\field{\*\fldinst TC "10.3 FCB Format" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {system/cpm/fcb.csv} \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 If an error occurs, Function 152 returns an $FFFF in register pair HL.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 On a successful parse, the Parse Filename function checks the next item in the input string. It skips over trailing blanks and tabs and looks at the next character. If the character is a null or carriage return, it returns a 0 indicating the end of the input string. If the character is a delimiter, it returns the address of the delimiter. If the character is not a delimiter, it returns the address of the first trailing blank or tab.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the first non-blank or non-tab character in the input string is a null, 0, or carriage return, the Parse Filename function returns a zero indicating the end of string.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the Parse Filename function is to be used to parse a subsequent file specification in the input string, the returned address must be advanced over the delimiter before placing it in the PFCB.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 10.1.3  BIOS\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb300 \fi0 System Initialization Functions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This section defines the BIOS system initialization routines BOOT, WBOOT, DEVTBL, DEVINI, and DRVTBL.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 BOOT}} BIOS Function 0: BOOT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get Control from Cold Start Loader and Initialize System\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The BOOT entry point gets control from the Cold Start Loader in Bank 0 and is responsible for basic system initialization. Any remaining hardware initialization that is not done by the boot ROMS, the Cold Boot Loader, or the LDRBIOS should be performed by the BOOT routine.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 WBOOT}} BIOS Function 1: WBOOT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get Control When a Warm Start Occurs\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The WBOOT entry point is entered when a warm start occurs. A warm start is performed whenever a user program branches to location 0000H or attempts to return to the CCP.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVTBL}} BIOS Function 20: DEVTBL\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return Address of Character I/O Table\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: HL=address of Chrtbl\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The DEVTBL and DEVINI entry points allow you to support device assignment with a flexible, yet completely optional system. It replaces the IOBYTE facility of CP/M 2.2.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DEVINI}} BIOS Function 21: DEVINI\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialize Character I/O Device\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: C=device number, 0-15\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The DEVINI routine initializes the physical character device specified in register C to the baud rate contained in the appropriate entry of the CHRTBL.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DRVTBL}} BIOS Function 22: DRVTBL\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return Address of Disk Drive Table\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL=Address of Drive Table of Disk Parameter Headers (DPH); Hashing can utilized if specified by the DPHs Referenced by this DRVTBL. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL=$ffff if no Drive Table; GENCPM does not set up buffers. Hashing is supported. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL=$fffe if no Drive Table; GENCPM does not set up buffers. Hashing is not supported. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The first instruction of this subroutine must be an LXI H,<address> where <address> is one of the above returned values. The GENCPM utility accesses the address in this instruction to locate the drive table and the disk parameter data structures to determine which system configuration to use.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Character I/O Functions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This section defines the CP/M 3 character I/O routines CONST, CONIN, CONOUT, LIST, AUXOUT, AUXIN, LISTST, CONOST, AUXIST, and AUXOST. CP/M 3 assumes all simple character I/O operations are performed in eight-bit ASCII, upper and lowercase, with no parity. An ASCII CTRL-Z ($1a) denotes an end-of-file condition for an input device.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In CP/M 3, you can direct each of the five logical character devices to any combination of up to twelve physical devices. Each of the five logical devices has a 16-bit vector in the System Control Block (SCB) . Each bit of the vector represents a physical device where bit 15 corresponds to device zero, and bit 4 is device eleven. Bits 0 through 3 are reserved for future system use.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 CONST}} BIOS Function 2: CONST\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sample the Status of the Console Input Device\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned value: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$ff if a console character is ready to read \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if no console character is ready to read \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Read the status of the currently assigned console device and return $ff in register A if a character is ready to read, and $ff in register A if no console characters are ready.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 CONIN}} BIOS Function 3: CONIN\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read a Character from the Console\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: A=Console Character\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read the next console character into register A with no parity. If no console character is ready, wait until a character is available before returning.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 CONOUT}} BIOS Function 4: CONOUT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Output Character to Console\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: C=Console Character\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Send the character in register C to the console output device. The character is in ASCII with no parity.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LIST}} BIOS Function 5: LIST\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Output Character to List Device\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: C=Character\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Send the character from register C to the listing device. The character is in ASCII with no parity.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 AUXOUT}} BIOS Function 6: AUXOUT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Output a Character to the Auxiliary Output Device\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: C=Character\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Send the character from register C to the currently assigned AUXOUT device. The character is in ASCII with no parity.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 AUXIN}} BIOS Function 7: AUXIN\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read a Character from the Auxiliary Input Device\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: A=Character\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read the next character from the currently assigned AUXIN device into register A with no parity. A returned ASCII CTRL-Z ($1a) reports an end-of-file.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 LISTST}} BIOS Function 15: LISTST\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return the Ready Status of the List Device\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if list device is not ready to accept a character \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$ff if list device is ready to accept a character \par
}{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 CONOST}} BIOS Function 17: CONOST\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return Output Status of Console\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$ff if ready \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if not ready \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The CONOST routine checks the status of the console. CONOST returns an $ff if the console is ready to display another character. This entry point allows for full polled handshaking communications support.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 AUXIST}} BIOS Function 18: AUXIST\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return Input Status of Auxiliary Port\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$ff if ready \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if not ready \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The AUXIST routine checks the input status of the auxiliary port. This entry point allows full polled handshaking for communications support using an auxiliary port.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 AUXOST}} BIOS Function 19: AUXOST\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return Output Status of Auxiliary Port\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$ff if ready \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if not ready \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The AUXOST routine checks the output status of the auxiliary port. This routine allows full polled handshaking for communications support using an auxiliary port.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Disk I/O Functions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This section defines the CP/M 3 BIOS disk I/O routines HOME, SELDSK, SETTRK, SETSEC, SETDMA, READ, WRITE, SECTRN, MULTIO, and FLUSH.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 HOME}} BIOS Function 8: HOME\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Select Track 00 of the Specified Drive\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return the disk head of the currently selected disk to the track 00 position. Usually, you can translate the HOME call into a call on SETTRK with a parameter of 0.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SELDSK}} BIOS Function 9: SELDSK\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Select the Specified Disk Drive\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C=Disk Drive (0-15) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
E=Initial Select Flag \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL=Address of Disk Parameter Header (DPH) if drive exists \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL=0000H if drive does not exist \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Select the disk drive specified in register C for further operations, where register C contains 0 for drive A, 1 for drive B, and so on to 15 for drive P. On each disk select, SELDSK must return in HL the base address of a 25-byte area called the Disk Parameter Header. If there is an attempt to select a nonexistent drive, SELDSK returns HL=$0000 as an error indicator. On entry to SELDSK, you can determine if it is the first time the specified disk is selected. Bit 0, the least significant bit in register E, is set to 0 if the drive has not been previously selected. This information is of interest in systems that read configuration information from the disk to set up a dynamic disk definition table.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETTRK}} BIOS Function 10: SETTRK\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set Specified Track Number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: BC=Track Number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register BC contains the track number for a subsequent disk access on the currently selected drive. Normally, the track number is saved until the next READ or WRITE occurs.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETSEC}} BIOS Function 11: SETSEC\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set Specified Sector Number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: BC=Sector Number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register BC contains the sector number for the subsequent disk access on the currently selected drive. This number is the value returned by SECTRN. Usually, you delay actual sector selection until a READ or WRITE operation occurs.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETDMA}} BIOS Function 12: SETDMA\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set Address for Subsequent Disk I/O\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: BC=Direct Memory Access Address\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register BC contains the DMA (Direct Memory Access) address for the subsequent READ or WRITE operation. For example, if B = $00 and C = $80 when the BDOS calls SETDMA, then the subsequent read operation reads its data starting at $80, or the subsequent write operation gets its data from 80H, until the next call to SETDMA occurs.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 READ}} BIOS Function 13: READ\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read a Sector from the Specified Drive\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if no errors occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$01 if nonrecoverable error condition occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$ff if media has changed \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Assume the BDOS has selected the drive, set the track, set the sector, and specified the DMA address. The READ subroutine attempts to read one sector based upon these parameters, then returns one of the error codes in register A as described above.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If the value in register A is $00, then CP/M 3 assumes that the disk operation completed properly. If an error occurs, the BIOS should attempt several retries to see if the error is recoverable before returning the error code.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If an error occurs in a system that supports automatic density selection, the system should verify the density of the drive. If the density has changed, return a $ff in the accumulator. This causes the BDOS to terminate the current operation and relog in the disk.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 WRITE}} BIOS Function 14: WRITE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write a Sector to the Specified Disk\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: C=Deblocking Codes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if no error occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$01 if physical error occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$02 if disk is Read-Only \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$ff if media has changed \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write the data from the currently selected DMA address to the currently selected drive, track, and sector. Upon each call to WRITE, the BDOS provides the following information in register C: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
0 = deferred write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
1 = nondeferred write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
2 = deferred write to the first sector of a new data block \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This information is provided for those BIOS implementations that do blocking/deblocking in the BIOS instead of the BDOS.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SECTRN}} BIOS Function 16: SECTRN\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Translate Sector Number Given Translate Table Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
BC=Logical Sector Number \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE=Translate Table Address \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Values: HL=Physical Sector Number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SECTRN performs logical sequential sector address to physical sector translation to improve the overall response of CP/M 3.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 MULTIO}} BIOS Function 23: MULTIO\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set Count of Consecutive Sectors for READ or WRITE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: C=Multisector Count\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 To transfer logically consecutive disk sectors to or from contiguous memory locations, the BDOS issues a MULTIO call, followed by a series of READ or WRITE calls. This allows the BIOS to transfer multiple sectors in a single disk operation. The maximum value of the sector count is dependent on the physical sector size, ranging from 128 with 128-byte sectors, to 4 with 4096-byte sectors. Thus, the BIOS can transfer up to 16K directly to or from the TPA with a single operation.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 FLUSH}} BIOS Function 24: FLUSH\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Force Physical Buffer Flushing for User-supported Deblocking\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$00 if no error occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$001 if physical error occurred \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
A=$002 if disk is Read-Only \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The flush buffers entry point allows the system to force physical sector buffer flushing when your BIOS is performing its own record blocking and deblocking. The BDOS calls the FLUSH routine to ensure that no dirty buffers remain in memory.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 10.1.4  Memory Select and Move Functions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This section defines the memory management functions MOVE, XMOVE, SELMEM, and SETBNK.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 MOVE}} BIOS Function 25: MOVE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Memory-to-Memory Block Move\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
HL=Destination address \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
DE=Source address \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
BC=Count \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Values: HL and DE must point to next bytes following move operation\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The BDOS calls the MOVE routine to perform memory to memory block moves to allow use of the Z80 LDIR instruction or special DMA hardware, if available. Note that the arguments in HL and DE are reversed from the Z8O machine instruction, necessitating the use of XCHG instructions on either side of the LDIR. The BDOS uses this routine for all large memory copy operations. On return, the HL and DE registers are expected to point to the next bytes following the move.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Usually, the BDOS expects MOVE to transfer data within the currently selected bank or common memory. However, if the BDOS calls the XMOVE entry point before calling MOVE, the MOVE routine must perform an interbank transfer.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SELMEM}} BIOS Function 27: SELMEM\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Select Memory Bank\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: A=Memory Bank\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values; None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The SELMEM entry point is only present in banked systems. The banked version of the CP/M 3 BDOS calls SELMEM to select the current memory bank for further instruction execution or buffer references. You must preserve or restore all registers other than the accumulator, A, upon exit.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETBNK}} BIOS Function 28: SETBNK\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Specify Bank for DMA Operation\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: A=Memory Bank\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 SETBNK only occurs in the banked version of CP/M 3. SETBNK specifies the bank that the subsequent disk READ or WRITE routine must use for memory transfers. The BDOS always makes a call to SETBNK to identify the DMA bank before performing a READ or WRITE call. Note that the BDOS does not reference banks other than 0 or 1 unless another bank is specified by the BANK field of a Data Buffer Control Block (BCB).\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 XMOVE}} BIOS Function 29: XMOVE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set Banks for Following MOVE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
B=destination bank \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
C=source bank \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Returned Values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 XMOVE is provided for banked systems that support memory-to- memory DMA transfers over the entire extended address range. Systems with this feature can have their data buffers located in an alternate bank instead of in common memory, as is usually required. An XMOVE call affects only the following MOVE call. All subsequent MOVE calls apply to the memory selected by the latest call to SELMEM. After a call to the XMOVE function, the following call to the MOVE function is not more than 128 bytes of data.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb240 \fi0 Clock Support Function\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This section defines the clock support function TIME.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 TIME}} BIOS Function 26: TIME\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get and Set Time\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Entry Parameters: C=Time Get/Set Flag\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Returned values: None\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The BDOS calls the TIME function to indicate to the BIOS whether it has just set the Time and Date fields in the SCB, or whether the BDOS is about to get the Time and Date from the SCB. On entry to the TIME function, a zero in register C indicates that the BIOS should update the Time and Date fields in the SCB. A $ff in register C indicates that the BDOS has just set the Time and Date in the SCB and the BIOS should update its clock. Upon exit, you must restore register pairs HL and DE to their entry values.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 10.2  NextZXOS\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 10.3  NextZXOS\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A ZX Spectrum I/O system supported by the ZX Spectrum Next. This Documentation is largely from Garry Lancaster\rquote s DOCs at https://gitlab.com/thesmog358/tbblue/blob/master/docs/nextzxos/NextZXOS_and_esxDOS_APIs.pdf. Before making any calls disable writes to Layer 2 in the $0000-$3fff area with port $123b.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 10.3.1  +3DOS compatible API\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Generally to make these calls, you need to set up: place ROM 2 at $0000-$3fff, RAM bank 7 at $c000-$ffff, stack below $bfe0, and set up the parameters for the call in the indicated registers. Call the function at its address. Then, restore your system to its previous configuration. In general the carry bit of F is cleared on error with the error code in A. Calls generally affect the contnts of AF, BC, DE, HL, and IX leaving AF\rquote , BC\rquote , DE\rquote , HL\rquote , IY, and SP intact. To simplify, descriptions will assume this is true and only indicate exceptions to the rule.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0056 {\b IDE_STREAM_OPEN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Open stream to a channel\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0059 {\b IDE_STREAM_CLOSE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Close stream and attached channel\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $005c {\b IDE_STREAM_IN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get byte from current stream\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $005f {\b IDE_STREAM_OUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write byte to current stream\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0062 {\b IDE_STREAM_PTR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get or set pointer information for current stream\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A0 {\b IDE_VERSION}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get IDEDOS version number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A3 {\b IDE_INTERFACE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialise card interfaces\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A6 {\b IDE_INIT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialise IDEDOS\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A9 {\b IDE_DRIVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get unit handle\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AC {\b IDE_SECTOR_READ}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Low-level sector read\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AF {\b IDE_SECTOR_WRITE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Low-level sector write\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00B2 {\b IDE_FORMAT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Format a partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00B5 {\b IDE_PARTITION_FIND}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Find named partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00B8 {\b IDE_PARTITION_NEW}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Create partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00BB {\b IDE_PARTITION_INIT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialise partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00BE {\b IDE_PARTITION_ERASE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Delete a partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00C1 {\b IDE_PARTITION_RENAME}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Rename a partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00C4 {\b IDE_PARTITON_READ}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read a partition entry\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00C7 {\b IDE_PARTITION_WRITE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write a partition entry\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00CA {\b IDE_PARTITION_WINFO}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write type-specific partition information\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00CD {\b IDE_PARTITION_OPEN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Open a partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00D0 {\b IDE_PARTITION_CLOSE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Close a partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00D3 {\b IDE_PARTITION_GETINFO}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get byte from type-specific partition information\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00D6 {\b IDE_PARTITION_SETINFO}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set byte in type-specific partition information\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_SWAP_OPEN}} $00D9 (217) {\b IDE_SWAP_OPEN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Open a swap partition (file)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00DC {\b IDE_SWAP_CLOSE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Close a swap partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00DF {\b IDE_SWAP_OUT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write block to swap partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00E2 {\b IDE_SWAP_IN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read block from swap partition\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_SWAP_EX}} $00E5 (231) {\b IDE_SWAP_EX}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Exchange block with swap partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Deprecated, use IDE_SWAP_IN and IDE_SWAP_OUT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00E8 {\b IDE_SWAP_POS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get current block number in swap partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00EB {\b IDE_SWAP_MOVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set current block number in swap partition\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00EE {\b IDE_SWAP_RESIZE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Change block size of swap partition\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_DOS_MAP}} $00F1 (241) {\b IDE_DOS_MAP}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Map drive to partition or physical device\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_DOS_UNMAP}} $00F4 (244) {\b IDE_DOS_UNMAP}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Unmap drive\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_DOS_MAPPING}} $00F7 (247) {\b IDE_DOS_MAPPING}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get drive mapping\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00FA {\b IDE_DOS_UNPERMANENT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Remove permanent drive mapping\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_SNAPLOAD}} $00FD (253) {\b IDE_SNAPLOAD}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Load a snapshot\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0100 {\b DOS_INITIALISE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialise +3DOS\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0103 {\b DOS_VERSION}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get +3DOS issue and version numbers\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DOS_OPEN}} $0106 (262) {\b DOS_OPEN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Create and/or open a file\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0109 {\b DOS_CLOSE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Close a file\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $010C {\b DOS_ABANDON}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Abandon a file\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $010F {\b DOS_REF_HEAD}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Point at the header data for this file\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0112 {\b DOS_READ}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read bytes into memory\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0115 {\b DOS_WRITE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write bytes from memory\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0118 {\b DOS_BYTE_READ}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read a byte\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $011B {\b DOS_BYTE_WRITE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write a byte\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DOS_CATALOG}} $011E (286) {\b DOS_CATALOG}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Catalog disk directory\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DOS_FREE_SPACE}} $0121 (289) {\b DOS_FREE_SPACE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Free space on disk\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0124 {\b DOS_DELETE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Delete a file\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0127 {\b DOS_RENAME}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Rename a file\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $012A {\b DOS_BOOT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Boot an operating system or other program\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $012D {\b DOS_SET_DRIVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set/get default drive\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0130 {\b DOS_SET_USER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set/get default user number\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DOS_GET_POSITION}} $0133 (307) {\b DOS_GET_POSITION}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get file pointer for random access\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0136 {\b DOS_SET_POSITION}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set file pointer for random access\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 DOS_GET_EOF}} $0139 (313) {\b DOS_GET_EOF}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get end of file position for random access\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $013C {\b DOS_GET_1346}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get memory usage in pages 1{\charscalex50\~}3{\charscalex50\~}4{\charscalex50\~}6\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $013F {\b DOS_SET_1346}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Re-allocate memory usage in pages 1{\charscalex50\~}3{\charscalex50\~}4{\charscalex50\~}6\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0142 {\b DOS_FLUSH}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bring disk up to date\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0145 {\b DOS_SET_ACCESS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Change open file\rquote s access mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0148 {\b DOS_SET_ATTRIBUTES}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Change a file\rquote s attributes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $014B {\b DOS_OPEN_DRIVE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Open a drive as a single file\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $014E {\b DOS_SET_MESSAGE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Enable/disable error messages\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0151 {\b DOS_REF_XDPB}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Point at XDPB for low level disk access\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0154 {\b DOS_MAP_B}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Map B: onto unit 0 or 1\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0157 {\b DD_INTERFACE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Is the floppy disk driver interface present?\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $015A {\b DD_INIT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialise disk driver\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $015D {\b DD_SETUP}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Specify drive parameters\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0160 {\b DD_SET_RETRY}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set try/retry count\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0163 {\b DD_READ_SECTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read a sector\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0166 {\b DD_WRITE_SECTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write a sector\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0169 {\b DD_CHECK_SECTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Check a sector\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $016C {\b DD_FORMAT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Format a track\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $016F {\b DD_READ_ID}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read a sector identifier\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0172 {\b DD_TEST_UNSUITABLE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Test media suitability\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0175 {\b DD_LOGIN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Log in disk, initialise XDPB\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0178 {\b DD_SEL_FORMAT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Pre-initialise XDPB for DD FORMAT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $017B {\b DD_ASK_1}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Is unit 1 (external drive) present?\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $017E {\b DD_DRIVE_STATUS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Fetch drive status\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0181 {\b DD_EQUIPMENT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 What type of drive?\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0184 {\b DD_ENCODE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set intercept routine for copy protection\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0187 {\b DD_L_XDPB}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialise an XDPB from a disk specification\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $018A {\b DD_L_DPB}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Initialise a DPB from a disk specification\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $018D {\b DD_L_SEEK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 uPD765A seek driver\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0190 {\b DD_L_READ}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 uPD765A read driver\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0193 {\b DD_L_WRITE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 uPD765A write driver\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0196 {\b DD_L_ON_MOTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Motor on, wait for motor-on time\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0199 {\b DD_L_T_OFF_MOTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Start the motor-off ticker\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $019C {\b DD_L_OFF_MOTOR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Turn the motor off\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01a2 {\b IDE_IDENTIFY}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Return IDE drive identity information\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01a5 {\b IDE_PARTITIONS}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get number of open partitions\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_PATH}} $01b1 (433) {\b IDE_PATH}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Create, delete, change or get directory\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_CAPACITY}} $01b4 (436) {\b IDE_CAPACITY}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get card capacity\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_GET_LFN}} $01b7 (439) {\b IDE_GET_LFN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get long filename\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Obtain a long file name and other file information.\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_BROWSER}} $01ba (442) {\b IDE_BROWSER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 File browser\par
{\xe{\v \pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 IDE_BANK}} $01bd (445) {\b IDE_BANK}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Allocate or free 8K pages in ZX or DivMMC memory\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01c0 {\b IDE_BASIC}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Execute a BASIC command line\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01c3 {\b IDE_WINDOW_LINEIN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Input line from current window stream\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01c6 {\b IDE_WINDOW_STRING}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Output string to current window stream\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01c9 {\b IDE_INTEGER_VAR}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get or set NextBASIC integer variable\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01cc {\b IDE_RTC}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Query the real-time-clock module\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01cf {\b IDE_DRIVER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Access the driver API\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01d2 {\b IDE_MOUNT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Unmount/remount SD cards\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01d2 {\b IDE_MOUNT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Unmount/remount SD cards\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01d5 {\b IDE_MODE}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Query NextBASIC display mode info, or change mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $01d8 {\b IDE_TOKENISER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Convert BASIC between plain text & tokenised forms\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 10.3.2  esxDOS compatible API\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 10.3.3  Next Extensions\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 $0085 {\b DISK_FILEMAP}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Obtain a map of card addresses describing the space occupies by the file. Can be called multiple times if the buffer is filled, continuing from previous.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DISK_STREAM_BYTES}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0087 {\b DISK_STREAM_END}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Stop current streaming operation.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DISK_STREAM_SECTORS}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0086 {\b DISK_STREAM_START}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Start reading from the card in streaming mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DOS_CATALOG}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DOS_CATALOG_NEXT}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b DOS_GETSET_DRIVE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 10.3.4  esxDOS compatible API\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The esxDOS-compatible API is a bit simpler to use than the +3DOS-compatible API.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 To make a call, you only need to set up the entry parameters as indicated and perform a RST $08; DEFB hook_code. On return, registers AF,BC,DE,HL will all be changed. IX,IY and the alternate registers are never changed (except for M_P3DOS).\par
(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Note that the standard 48K BASIC ROM must be paged in to the bottom of memory, but this is the usual situation after starting a machine code program with a USR function call).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Notice that error codes are different from those returned by +3DOS calls, and also the carry flag is SET for an error condition when returning from an esxDOS call (instead of RESET, as is the case for +3DOS).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If desired, you can use the M_GETERR hook to generate a BASIC error report for any error returned, or even use it to generate your own custom BASIC error report.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 All of the calls where a filename is specified will accept long filenames (LFNs) and most will accept wildcards (for an operation such as F_OPEN where a single file is always used, the first matching filename will be used).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A9 {\b F_CHDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Change directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AF {\b F_CHMOD}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Modify file attributes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $009B{\b F_CLOSE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Close a file or directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b F_CLOSEDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A0 {\b F_FGETPOS}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get current file position.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A1 {\b F_FSTAT}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get file information/status.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A2 {\b F_FTRUNC}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Truncate/extend file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b F_GET_CANONICAL_PATH}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A8 {\b F_GETCWD}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get current working directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b F_GETCWD_DRIVE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00B1 {\b F_GETFREE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Gets free space on drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AA {\b F_MKDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Create directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $009A {\b F_OPEN}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Open a file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A3 {\b F_OPENDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Open directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $009A {\b F_OPEN}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Open a file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $009D {\b F_READ}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read bytes from file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A4 {\b F_READDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read next directory entry.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00B0 {\b F_RENAME}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Rename or move a file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A7 {\b F_REWINDDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Rewind directory position to the start of the directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AB {\b F_RMDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Remove directory.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $009F {\b F_SEEK}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Seek to position in file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A6 {\b F_SEEKDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Set current directory position.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AC {\b F_STAT}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get unopened file information/status.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $009C {\b F_SYNC}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Sync file changes to disk.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00A5 {\b F_TELLDIR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get current directory position.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AE {\b F_TRUNC}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Truncate/extend unopened file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $00AD {\b F_UNLINK}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Delete file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $009E {\b F_WRITE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write bytes to file.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_BANK_ALLOC}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_BANK_AVAIL}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_BANK_FREE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_BANK_RESERVE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_BANK_TOTAL}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_BROWSER}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_GET_LFN}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_MODE_GET}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b IDE_MODE_SET}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0088 {\b M_DOSVER}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get API version/mode information.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0092 {\b M_DRVAPI}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Access API for installable drivers.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0095 {\b M_ERRH}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Install error handler for dot command.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $008F {\b M_EXECCMD}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Execute a dot command.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $008E {\b M_GETDATE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get the current date/time.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0093 {\b M_GETERR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $008D {\b M_GETHANDLE}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get the file handle of the currently running dot command\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0089 {\b M_GETSETDRV}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Get or set the default drive.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $0091 {\b M_SETCAPS}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $008B {\b M_TAPEIN}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Tape input redirection control.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 $008C {\b M_TAPEOUT}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Tape output redirection control.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b SLICE_DIRENT}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b EXTENDED_SNA_LOAD}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b P3DOS_COPY_CSTR_TO_PSTR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b P3DOS_COPY_PSTR_TO_CSTR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b P3DOS_CSTR_TO_PSTR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b P3DOS_DOSNAME_FROM_CATNAME}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b P3DOS_EDRV_FROM_PDRV}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b P3DOS_PDRV_FROM_EDRV}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b P3DOS_PSTR_TO_CSTR}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb120 \fi0 Appendix A\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Ports\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs11 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs11 {Table 1.1: ZX Spectrum Ports}{\field{\*\fldinst TC "1.1 ZX Spectrum Ports" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs11 {appendices/ports/ports.csv} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 A.1  8-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $6B ({6B}) DMA Control (Z80 Mode, 3.01.02)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $0F ({0F}) DAC B {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1F ({1F}) Kempston/Mega Drive Joystick 1/DAC A\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = \rdblquote start\rdblquote  button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = A/X button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = C/Z button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Fire/C/Y button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Up \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Down \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Left \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Right \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with Nextreg $05\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $37 ({37}) Kempston/Mega Drive Joystick 2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = \rdblquote start\rdblquote  button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = A/X button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = C/Z button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Fire/C/Y button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Up \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Down \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Left \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Right \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with Nextreg $05\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write ($00 on reset, 3.01.04) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = Select I/O Mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = Bit Bang \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = Clock \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = UART \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = Reserved (don\rquote t use) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Select Joystick Port for Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Left \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Right \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 3-1 = Reserved, must be $00 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Pin 7 state (both ports) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Bit Bang - bit 0 on pin 7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
Clock - clock on pin 7\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 0 = Slow clock (Fsys/2048 = 12.672 kHz)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 1 = Fast clock (Fsys/8 = 3.5 MHz) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
UART - Pin 7 = TX, Pin 9 = RX 0 = ESP\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li1200\fi0 1 = Pi \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 ** A Runt clock may appear in the first cycle\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The I/O mode should be set by writing this port first followed by enabling io mo de on the joysticks with a write to nextreg 0x05.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $3F ({3F}) DAC A {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $4F ({4F}) DAC C {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $57 ({57}) Sprite Attributes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Byte 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = LSB of X coordinate (bit 8 is in byte 3) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Byte 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = LSB of Y coordinate (bit 8 is in byte 5) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Byte 3 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 = Palette Offset \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Enable X Mirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Enable Y Mirror \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Enable Roration \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = By Sprite Type {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Anchor = MSB of X coordinate \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Relative = Enable relative palette offset \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Byte 4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = Enable visibility \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = Enable Byte 5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5-0 = Pattern Index (\ldblquote name\rdblquote ) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Byte 5 (optional)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Anchor {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7-6 = type and pattern {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = 8-bit color \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = relative \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = 4-bit color, lower half of pattern (bytes 0-127) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = 4-bit color, upper half of pattern (byets 128-255) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Attached relative sprite type {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = composite \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = big sprite \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4-3 = X-axis scale factor {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = {1{\u215*}} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = {2{\u215*}} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = {4{\u215*}} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = {8{\u215*}} \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-1 = Y-axis scale factor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = MSB of Y coordinate \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Composite Relative {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = N6\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 8-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Reserved, must be 0 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 4-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = lower half of pattern (bytes 0-127) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = upper half of pattern (bytes 128-255) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4-3 = X-axis scale factor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-1 = Y-axis scale factor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Enable relative pattern offset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Big-sprite Relative {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = N6\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 8-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
Reserved, must be 0 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \li600\fi0 4-bit {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = lower half of pattern (bytes 0-127) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = upper half of pattern (bytes 128-255) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Enable relative pattern offset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $5B ({5B}) Sprite Pattern\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Load data into sprite pattern memory auto-incrementing. Port $303B can be used to set the starting sprite pattern number.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $5F ({5F}) DAC D {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $6B ({6B}) DMA Control (Next Mode, 3.01.02)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $DF ({DF}) DAC A,D {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $E3 ({E3}) divMMC Control\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Disable with bit 2 of Nextreg $09 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = conmem, enable divMMC memory \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = mapram, enable divMMC allRAM mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 3-0 = bank, selected divMMC ram bank for $2000-$3FFF region \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
conmem can be used to manually control divMMC mapping. When enabled\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 $0000-$1FFF contains esxDOS ROM or esxDOS page 3\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 $2000-$3FFF contains esxDOS RAM page selected by bits 3-0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
divMMC automatically maps itself in when instruction fetches hit specific addresses in the ROM. When this happens, the esxDOS ROM (or divMMC bank 3 if mapram is set) appears in $0000-$1FFF and the selected divMMC bank appears as RAM in $2000-$3FFF \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 can only be set, once set only a power cycle can reset it. nextreg $09 bit 3 can be set to reset this bit. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 divMMC automapping is normally disabled by NextZXOS see nextreg $06 bit 4.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $E7 ({E7}) SPI {{\field{\*\fldinst{ EQ  \\x\\to( {CS}) }}{\fldrslt }}
} (SD card, flash, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Disable with bit 2 of Nextreg $09\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $EB ({EB}) SPI {{\field{\*\fldinst{ EQ  \\x\\to( {DATA}) }}{\fldrslt }}
} (SD card, flash, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Disable with bit 2 of Nextreg $09\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $F1 ({F1}) DAC A (precedence over $xxFD) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $F3 ({F3}) DAC B {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $F9 ({F9}) DAC C (precedence over $xxFD) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $FB ({FB}) DAC A,D {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = DAC Value \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 3 of Nextreg $08\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $FE ({FE}) ULA {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-5 = Unused \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = enable ear output \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = enable mic output \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-0 = border colour \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FF ({FF}) Timex Sinclair/Floating Bus {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = memory paging (not on ZX Next) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = Disable generation of interrupts \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5-3 = Hi-res mode color combination {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
000 = Black on white (indexes 0, 135) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
001 = Blue on Yellow (indexes 1, 134) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
010 = Green on Magenta (indexes 2, 133) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
011 = Cyan on Red (indexes 3, 132) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
100 = Red on Cyan (indexes 4, 131) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
101 = Magenta on Green (indexes 5, 130) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
110 = Yellow on Blue (indexes 6, 129) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
111 = White on Black (indexes 7, 128) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-0 = ULA Mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
000 = Normal ULA address \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
001 = Alternate ULA address \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
010 = Hi-color mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
110 = Hi-res mode \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Disable with bit 2 of Nextreg $08\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 A.2  16-bit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $103B ({103B}) I{\up7\fs18 2}C SCL (rtc, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $113B ({113B}) I{\up7\fs18 2}C SDA (rtc, rpi)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $123B ({123B}) Layer 2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Bit 4 = 0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = Video RAM bank select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = first 16k \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = second 16k \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = third 16k \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = first 48k \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Shadow layer 2 select \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Enable layer 2 read paging \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Layer 2 visible (mirrored in register $69) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Enable layer 2 write paging \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Bit 4 = 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = 1 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2-0 = 16k bank relative offset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $133B ({133B}) UART tx\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read: UART Status\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = UART at least half full (3.01.09) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = UART full \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = UART transmit busy \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = UART receive has data \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write: UART Transmit\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $143B ({143B}) UART rx\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read: UART Receive\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write: UART Prescalar {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = select prescalar part {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Bits 6-0 of prescalar \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Bits 13-7 of prescalar \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 6-0 = Prescalar bits \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $153B ({153B}) UART select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = UART select (0 on soft reset) ** {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = ESP \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Pi * \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Prescalar valid in this write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Reserved (0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 2-0 = Bits 16-14 of prescalar (0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Pi GPIO must be configured for UART, see nextreg $A0\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ** Either UART can be redirected to the joystick ports, see port $037\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $153B ({153B}) UART frame (upcoming)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($18 on hard reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = Immediately reset Rx and Tx to idle and empty FIFOs \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = Assert break (Tx=0) when Tx reaches idle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Enable hardware flow control * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 4-3 = Number of bits in a frame {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = 5 bits \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = 6 bits \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = 7 bits \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = 8 bits \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = Enable parity \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Parity {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Even parity \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Odd parity \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Number of stop bits {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = 1 stop bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = 2 stop bits \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Port $183B ({183B}) CTC Channel 0\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $193B ({193B}) CTC Channel 1\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1A3B ({1A3B}) CTC Channel 2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1B3B ({1B3B}) CTC Channel 3\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1C3B ({1C3B}) CTC Channel 4\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1D3B ({1D3B}) CTC Channel 5\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1E3B ({1E3B}) CTC Channel 6\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $183B ({183B}) CTC Channel 7\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $1FFD ({1FFD}) Plus 3 Memory Paging Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-3 = Unused, nust be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = High bit of ROM selection (low bit is in Port $7FFD) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = ROM0 = 128k editor and menu system \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = ROM1 = 128k syntax checker \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = ROM2 = +3DOS \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = ROM3 = 48k BASIC \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Special mode: Low bit of memory configuration number \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Paging mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Normal \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Special \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 You should echo writes to $5B67\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $243B ({243B}) Next Register Select\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $253B ({253B}) Next Register Data\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $303B ({303B}) Sprite Slot/Flags\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Write: Sprite Slot Select\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 select sprite slot for Sprite Attribute and Sprite Pattern ports which independently auto-increment\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read: Sprite status {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-2 = reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = Max sprites per line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = Collision flag \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $7FFD ({7FFD}) Memory Paging Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 6-7 = reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Lock memory paging \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = low bit of ROM Select (high bit is in Port $1FFD) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = ROM0 = 128k editor and menu system \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = ROM1 = 128k syntax checker \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = ROM2 = +3DOS \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = ROM3 = 48k BASIC \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = Shadow screen toggle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 2-0 = LSB of Bank number for slot 4 (MSB is in Port $DFFD) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disable with bit 5 port $7FFD\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $7FFE ({7FFE}) Keyboard 8 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0: \rquote B\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1: \rquote N\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2: \rquote M\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3: Symbol Shift \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4: Space \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $BF3B ({BF3B}) ULAplus register {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = Select register group {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = palette group \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = mode group \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 5-0 = data {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
If palette group, selects index 0-63 in ULAplus palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
If mode group, ignored \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Port $BFF5 ({BFF5}) AY Info (3.01.09\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 (R) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-6 = Active AY chip {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = AY 0 active \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = AY 1 active \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = AY 2 active \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 4-0 = currently selected AY register \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $BFFD ({BFFD}) AY Data\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $BFFE ({BFFE}) Keyboard 7 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = \rquote H\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = \rquote J\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = \rquote K\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = \rquote L\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Enter \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $DFFD ({DFFD}) Next Memory Bank Select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 3-0 = MSB of bank number for slot 4 (LSB is in Port $7FFD) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $DFFE ({DFFE}) Keyboard 6 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = \rquote Y\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = \rquote U\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = \rquote I\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = \rquote O\rquote  \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = \rquote P\rquote  \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $EFF7 ({EFF7}) Pentagon 1024 paging {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = 1 to overlay the bottom 16k with ram from 16k bank 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = 0 to enable Pentagon 1024 mapping and disable bit 5 port 0x7ffd locking, 1 to select standard zx128 mapping ** \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
** Applies only when pentagon 1024 mapping mode is enabled via nextreg 0x8f. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $EFFE ({EFFE}) Keyboard 5 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = \u226?\u8364?\u732?6\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = \u226?\u8364?\u732?7\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = \u226?\u8364?\u732?8\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = \u226?\u8364?\u732?9\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = \u226?\u8364?\u732?0\u226?\u8364?\u8482? \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $F7FE ({F7FE}) Keyboard 4 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = \u226?\u8364?\u732?5\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = \u226?\u8364?\u732?4\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = \u226?\u8364?\u732?3\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = \u226?\u8364?\u732?2\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = \u226?\u8364?\u732?1\u226?\u8364?\u8482? \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FADF ({FADF}) Kempston Mouse Buttons {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-4 = Wheel delta since last read \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = fourth button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = middle button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = left button \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = right button \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FBDF ({FBDF}) Kempston Mouse X {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = X coordinate of mouse \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FBFE ({FBFE}) Keyboard 3 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = \u226?\u8364?\u732?T\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = \u226?\u8364?\u732?R\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = \u226?\u8364?\u732?E\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = \u226?\u8364?\u732?W\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = \u226?\u8364?\u732?Q\u226?\u8364?\u8482? \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FDFE ({FDFE}) Keyboard 2 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = \u226?\u8364?\u732?G\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = \u226?\u8364?\u732?F\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = \u226?\u8364?\u732?D\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = \u226?\u8364?\u732?S\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = \u226?\u8364?\u732?A\u226?\u8364?\u8482? \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FEFE ({FEFE}) Keyboard 1 (read only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 0 = \u226?\u8364?\u732?V\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 1 = \u226?\u8364?\u732?C\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 2 = \u226?\u8364?\u732?X\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 3 = \u226?\u8364?\u732?Z\u226?\u8364?\u8482? \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 4 = Caps Shift \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FF3B ({FF3B}) ULAplus data {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
If palette group, 8-bit (RRRGGGBB) value for current index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
If mode group, bit 1 = enable ULAplus \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FFDF ({FFDF}) Kempston Mouse Y {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = Y coordinate of mouse (0-192) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Port $FFFD ({FFFD}) AY Control and AY register Select (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 7-0 = data in selected register of active AY chip \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Select Chip {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = 1 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 6 = Enable left \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 5 = Enable Right \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 4-2 = Reserved, must be 1 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 1-0 = AY chip select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = Unused \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = AY 2 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = AY 1 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = AY 0 \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Select Register {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bit 7 = 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 6-5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
bits 4-0 = Register Number \par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb180 \fi0 Appendix B\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Registers\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 B.1  ZX Spectrum Next Registers\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The ZX Next stores configuration state in a field of registers. These registers are accessible via two I/O ports or via the special nextreg instructions.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $243B (9275) is used to set the register number, listed below.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Port $253B (9531) is used to access the register value.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Some registers are accessible only during the initialization process.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R) $00 ({00}) {{\f5\u8658*}} Machine ID {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00000001 = DE1A \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00000010 = DE2A \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00000101 = FBLABS \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00000110 = VTRUCCO \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00000111 = WXEDA \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00001000 = EMULATORS \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00001010 = ZX Spectrum Next \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00001011 = Multicore \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
10101010 = ZX Spectrum Next Core on unAmiga \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
10111010 = ZX Spectrum Next Core on SiDi \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
11001010 = ZX Spectrum Next Core on MIST \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
11011010 = ZX Spectrum Next Core on MiSTer \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
11011010 = ZX Spectrum Next Core on unAmiga Reloaded \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
11101010 = ZX Spectrum Next Core on ZX-DOS \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
11111010 = ZX Spectrum Next Anti-brick \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R) $01 ({01}) {{\f5\u8658*}} Core Version {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Major version number \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Minor version number \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
See register $0E for sub minor version number \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $02 ({02}) {{\f5\u8658*}} Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Expansion bus {{\field{\*\fldinst{ EQ  \\x\\to( {RESET}) }}{\fldrslt }}
} Asserted \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Indicates multiface NMI was generated by this nextreg (3.01.09) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Indicates divmmc NMI was generated by this nextreg (3.01.09) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Last reset was Hard reset \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Last reset was Soft reset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Generate/Release Expansion bus {{\field{\*\fldinst{ EQ  \\x\\to( {RESET}) }}{\fldrslt }}
} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Generate multiface NMI (write zero to clear)(3.01.09) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Generate divmmc NMI (write zero to clear)(3.01.09) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = generate Hard reset (reboot) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = generate Soft reset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $03 ({03}) {{\f5\u8658*}} Machine Type\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A write to this register disables the boot rom in config mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 bits 2-0 select machine type when in config mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = (W) Display Timing change enable (allow changes to bits 6-4) (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Display Timing \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Display Timing user lock control \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = No user lock on display timing \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = User lock on display timing \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Apply user lock on display timing (0 on hard reset) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-0 = Machine Type (config mode only)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 determines roms loaded \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Machine Types/Display Timings {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 or 001 = ZX 48K \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 = ZX 128K/+2 (Grey) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 = ZX +2A-B/+3e/Next Native \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 = Pentagon 128K \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Register (W) $04 ({04}) {{\f5\u8658*}} Configuration Mapping {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-0 = 16k SRAM bank mapping* ($00 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
* Maps a 16k SRAM bank over the bottom 16k. Applies only in config mode when the bootrom is disabled \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
** Odd multiples of 256k are unreliable if storing data in sram for the mext core started. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
*** number of useful bits changed from 5 to 7 in coure 3.01.06 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $05 ({05}) {{\f5\u8658*}} Peripheral 1 Settings {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = joystick 1 mode (MSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = joystick 2 mode (MSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = joystick 1 mode (LSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = 50/60 Hz mode (0 = 50Hz, 1 = 60Hz) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = joystick 2 mode (LSB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Scandoubler \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Joystick modes {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
000 = Sinclair 2 (67890) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
001 = Kempston 2 (port $37) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
010 = Kempston 1 (port $1F) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
011 = Megadrive 1 (port $1F) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
100 = Cursor \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
101 = Megadrive 2 (port $37) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
110 = Sinclair 1 (12345) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
111 = I/O Mode (3.01.04) Both joysticks are places in I/O Mode if either is set to I/O Mode. The underlying joystick type is not changed and reads of this register will continue to return the last joystick type. Ehether the joystick is in io mode or not is invisible but this state can be cleared either through reset or by re-writing the gegister with joystick type not equal to 111. Recovery time for a normal joystick read after leaving I/O Mode is at most 64 scan lines. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $06 ({06}) {{\f5\u8658*}} Peripheral 2 Settings {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = F8 CPU Speed Hotkey Enable (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable classic audio mode (beep and tape to internal speaker, other audio to ear and HDMI, 3.01.02) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = F3 50Hz/60Hz Hotkey Enable (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = divMMC Automap/NMI Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = NMI Button Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = PS/2 Mode (0 = keyboard, 1 = mouse) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = PSG Mode (00 = YM, 01 = AY, 11 = hold all PSGs in Reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $07 ({07}) {{\f5\u8658*}} Turbo mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Current Actual CPU Speed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-2 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Current Selected CPU Speed (00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Select CPU Speed \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 CPU Speeds {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
00 = 3.5MHz \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
01 = 7MHz \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
10 = 14MHz \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
11 = 28MHz \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $08 ({08}) {{\f5\u8658*}} Peripheral 3 Settings {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = 128K Banking Unlock (inverse of port $7FFD, bit 5) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Disable RAM and Port Contention (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = PSG Stereo Mode Control (0 = ABC, 1 = ACB) (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable internal speaker (1 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable DACs (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable read of port $FF (Timex) (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Multiple PSGs (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Issue 2 Keyboard \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $09 ({09}) {{\f5\u8658*}} Peripheral 4 setting: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = PSG 2 Mono Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = PSG 1 Mono Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = PSG 0 Mono Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Sprite ID lockstep enable (1 = Nextreg $34 and IO Port $303B are in lockstep, 0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = divMMC mapRAM bit Control (reset bit 7 of port $E3) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = HDMI audio mute (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = scanlines {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = scanlines off \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = scanlines 12.5% \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = scanlines 25% \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = scanlines 50% \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
In Sprite lockstep, NextREG $34 and Port $303B are in lockstep \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $0A ({0A}) {{\f5\u8658*}} Peripheral 5 setting: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Multiface type (00 on hard reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = Multiface +3 (enable port 0x3F, disable port 0xBF) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = Multiface 128 v87.2 (enable port 0xBF, disable port 0x3F) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = Multiface 128 v87.12 (enable port 0x9F, disable port 0x1F) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = Multiface 1 (enable port 0x9F, disable port 0x1F) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = 1 to reverse left and right mouse buttons (3.01.07) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = mouse dpi (00 on hard reset) (3.01.05) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = low dpi \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = default \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = medium dpi \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = high dpi \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Register (R) $0E ({0E}) {{\f5\u8658*}} Core Version (sub minor number) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Core sub minor version number \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
(see register $01 for the major and minor version number) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $10 ({10}) {{\f5\u8658*}} Core Boot\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Drive button pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = NMI button pressed \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reboot FPGA using selected core (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-0 = Core ID \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Core ID with bits 4-0 can only be set in configuration mode \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $11 ({11}) {{\f5\u8658*}} Video Timing (writable in config mode only) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-0 = Mode (VGA = 0..6, HDMI = 7) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 = Base VGA timing, clk28 = 28000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 = VGA setting 1, clk28 = 28571429 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 = VGA setting 2, clk28 = 29464286 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 = VGA setting 3, clk28 = 30000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 = VGA setting 4, clk28 = 31000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 = VGA setting 5, clk28 = 32000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 = VGA setting 6, clk28 = 33000000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 = HDMI, clk28 = 27000000 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
50/60Hz selection depends on bit 2 of register $05 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Only writable in config mode \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $12 ({12}) {{\f5\u8658*}} Layer 2 Active RAM bank {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = RAM bank (point to bank 8 after a Reset, NextZXOS modifies to 9) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $13 ({13}) {{\f5\u8658*}} Layer 2 Shadow RAM bank {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = RAM bank (point to bank 11 after a Reset, NextZXOS modifies to 12) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $14 ({14}) {{\f5\u8658*}} Global transparency color {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Transparency color value ($E3 after a reset) \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Note: this value is 8-bit, so the transparency is compared against only by the MSB bits of the final 9-bit colour)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 (Note2: this only affects Layer 2, ULA and LoRes. Sprites use register $4B for transparency and tilemap uses nextreg $4C)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $15 ({15}) {{\f5\u8658*}} Sprite and Layer System Setup {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = LoRes mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Sprite priority (1 = sprite 0 on top, 0 = sprite 127 on top) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable sprite clipping in over border mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-2 = set layers priorities (000 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 - S L U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 - L S U \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 - S U L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 - L U S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 - U S L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 - U L S \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 - S(U+L) ULA and Layer 2 combined, colours clamped to 7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 - S(U+L-5) ULA and Layer 2 combined, colours clamped to [0,7] \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Sprites Over border (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Sprites (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $16 ({16}) {{\f5\u8658*}} Layer 2 Horizontal Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = X Offset (0-255)(0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $17 ({17}) {{\f5\u8658*}} Layer 2 Vertical Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Y Offset (0-191)(0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $18 ({18}) {{\f5\u8658*}} Layer 2 Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Coords of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write - X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write - X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write - Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write - Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The values are 0,255,0,191 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $19 ({19}) {{\f5\u8658*}} Sprite Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Cood. of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write - X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write - X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write - Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write - Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 The values are 0,255,0,191 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the clip window is enabled for sprites in "over border" mode, the X coords are internally doubled and the clip window origin is moved to the sprite origin inside the border.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $1A ({1A}) {{\f5\u8658*}} Layer 0 (ULA/LoRes) Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Coord. of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write = X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write = X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write = Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write = Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 The values are 0,255,0,191 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $1B ({1B}) {{\f5\u8658*}} Layer 3 (Tilemap) Clip Window Definition {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Coord. of the clip window {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1st write = X1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2nd write = X2 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3rd write = Y1 position \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
4rd write = Y2 position \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 The values are 0,159,0,255 after a Reset\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads do not advance the clip position\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The X coords are internally doubled.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $1C ({1C}) {{\f5\u8658*}} Clip Window Control\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Layer 3 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Layer 0/1 Clip Index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-2 = Sprite clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Layer 2 Clip Index \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 - reset Layer 3 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 - reset Layer 0/1 clip index \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 - reset sprite clip index. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 - reset Layer 2 clip index. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R) $1E ({1E}) {{\f5\u8658*}} Active video line (MSB) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-1 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Active line MSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R) $1F ({1F}) {{\f5\u8658*}} Active video line (LSB) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Active line LSB (0-255) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $22 ({22}) {{\f5\u8658*}} Line Interrupt control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = (R) ULA asserting interrupt \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = (W) Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Disable ULA Interrupt (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Line Interrupt (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = MSB of Line Interrupt line value (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $23 ({23}) {{\f5\u8658*}} Line Interrupt value LSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Line Interrupt line value LSB (0-255)(0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $26 ({26}) {{\f5\u8658*}} ULA Horizontal Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = ULA X Offset (0-255) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $27 ({27}) {{\f5\u8658*}} ULA Vertical Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = ULA Y Offset (0-191) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $28 ({28}) {{\f5\u8658*}} Stored Palette Value and PS/2 Keymap Address MSB\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Stored palette value (see NextREG $44) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = PS/2 Keymap Address MSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $29 ({29}) {{\f5\u8658*}} PS/2 Keymap Address LSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = PS/2 Keymap Address LSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $2A ({2A}) {{\f5\u8658*}} PS/2 Keymap Data MSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = PS/2 Keymap Data MSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $2B ({2B}) {{\f5\u8658*}} PS/2 Keymap Data LSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = PS/2 Keymap Data LSB \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 writing this register auto-increments the address)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $2C ({2C}) {{\f5\u8658*}} DAC B Mirror (Left)/ I{\up7\fs18 2}S Left Sample MSB\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = I{\up7\fs18 2}S Left Sample MSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8-bit sample left DAC ($80 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $2D ({2D}) {{\f5\u8658*}} DAC A+D Mirror (mono/ I{\up7\fs18 2}S Sample LSB\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = I{\up7\fs18 2}S Last Sample LSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8-bit sample DACs A + D ($80 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $2E ({2E}) {{\f5\u8658*}} DAC C Mirror (Right/ I{\up7\fs18 2}S Risht Sample MSB\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Read {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = I{\up7\fs18 2}S Right Sameple MSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8-bit sample Right DACs C ($80 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $2F ({2F}) {{\f5\u8658*}} Layer 3 (Tilemap) Horizontal Scroll Control MSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = X Offset MSB ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Meaningful Range is 0-319 in 40 char mode, 0-639 in 80 char mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $30 ({30}) {{\f5\u8658*}} Layer 3 (Tilemap) Horizontal Scroll Control LSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = X Offset LSB ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Meaningful range is 0-319 in 40 char mode, 0-639 in 80 char mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $31 ({31}) {{\f5\u8658*}} Layer 3 (Tilemap) Vertical Scroll Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Y Offset (0-255) )$00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $32 ({32}) {{\f5\u8658*}} Layer 1,0 (LoRes) Horizontal Scroll Control) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = X Offset (0-255) ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and smoothness as Layer 2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $33 ({33}) {{\f5\u8658*}} Layer 1,0 (LoRes) Vertical Scroll Control) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Y Offset (0-191) ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Layer 1,0 (LoRes) scrolls in "half-pixels" at the same resolution and smoothness as Layer 2.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $34 ({34}) {{\f5\u8658*}} Sprite Number\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Lockstep (NextReg $09 bit 4 set) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pattern address offset (Add 128 to pattern address) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-0 = Sprite number 0-127, Pattern number 0-63 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
effectively performs an out to port $303B \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 No Lockstep (NextReg $09 bit 4 clear) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-0 = Sprite number 0-127 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 This register selects which sprite has its attributes connected to the sprite attribute registers\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $35 ({35}) {{\f5\u8658*}} Sprite Attribute 0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Sprite X coordinate LSB (MSB in NextReg $37) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $36 ({36}) {{\f5\u8658*}} Sprite Attribute 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Sprite Y coordinate LSB (MSB in NextReg $39) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $37 ({37}) {{\f5\u8658*}} Sprite Attribute 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = 4-bit Palette offset \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable horizontal mirror (reverse) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable vertical mirror (reverse) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable 90{{\field{\*\fldinst{ EQ \\s\\up5({\fs18 {\i O}})}}{\fldrslt }}
} Clockwise Rotation \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Normal Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = X coordinate MSB \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Relative Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Palette offset is relative to anchor sprite \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Rotation is applied before mirroring\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $38 ({38}) {{\f5\u8658*}} Sprite Attribute 3 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Visiblity \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Attribute 4 (0 = Attribute 4 effectively $00) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = Sprite Pattern Number \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $39 ({39}) {{\f5\u8658*}} Sprite Attribute 4\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Normal Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = 4-bit pattern switch (0 = 8-bit sprite, 1 = 4-bit sprite) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pattern number bit-7 for 4-bit, 0 for 8-bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Type of attached relative sprites (0 = Composite, 1 = Unified) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-3 = X scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Y scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = MSB of Y coordinate \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Relative, Composite Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pattern number bit-7 for 4-bit, 0 for 8-bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-3 = X scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Y scaling (00 = 1x, 01 = 2x, 10 = 4x, 11 = 8x) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pattern number is relative to anchor \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Relative, Unified Sprites {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7-6 = 01 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pattern number bit-7 for 4-bit, 0 for 8-bit \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-1 = 0000 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pattern number is relative to anchor \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $40 ({40}) {{\f5\u8658*}} Palette Index Select {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Palette Index Number \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Selects the palette index to change the associated colour\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 For ULA only, INKs are mapped to indices 0 through 7, BRIGHT INKs to indices 8 through 15, PAPERs to indices 16 through 23 and BRIGHT PAPERs to indices 24 through 31. In EnhancedULA mode, INKs come from a subset of indices from 0 through 127 and PAPERs from a subset of indices from 128 through 255.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The number of active indices depends on the number of attribute bits assigned to INK and PAPER out of the attribute byte.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In ULAplus mode, the last 64 entries (indices 192 to 255) hold the ULAplus palette. The ULA always takes border colour from PAPER for standard ULA and Enhanced ULA\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $41 ({41}) {{\f5\u8658*}} 8-bit Palette Data {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Colour Entry in RRRGGGBB format \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The lower blue bit of the 9-bit internal colour will be the logical or of bits 0 and 1 of the 8-bit entry. After each write, the palette index auto-increments if aut-increment has been enabled (NextReg $43 bit 7), Reads do not auto-increment.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $42 ({42}) {{\f5\u8658*}} ULANext Attribute Byte Format {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Attribute byte\rquote s INK representation mask (7 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The mask can only indicate a solid sequence of bits on the right side of the attribute byte (1, 3, 7, 15, 31, 63, 127 or 255).\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 INKs are mapped to base index 0 in the palette and PAPERs and border are mapped to base index 128 in the palette.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The 255 value enables the full ink colour mode making all the palette entries INK. PAPER and border both take on the fallback colour (nextreg $4A) in this mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $43 ({43}) {{\f5\u8658*}} Palette Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Disable palette write auto-increment. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Select palette for reading or writing: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
000 = ULA first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
100 = ULA second palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
001 = Layer 2 first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
101 = Layer 2 second palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
010 = Sprite first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
110 = Sprite second palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
011 = Layer 3 first palette \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
111 = Layer 3 second palette \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Select Sprite palette (0 = first palette, 1 = second palette) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Select Layer 2 palette (0 = first palette, 1 = second palette) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Select ULA palette (0 = first palette, 1 = second palette) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable EnhancedULA mode if 1. (0 after a reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $44 ({44}) {{\f5\u8658*}} 9-bit Palette Data\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Non Level 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
1st write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = MSB (RRRGGGBB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
2nd write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = LSB (B) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Level 2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
1st write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = MSB (RRRGGGBB) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
2nd write \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Priority \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = LSB (B) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 9-bit Palette Data is entered in two consecutive writes; the second write autoincrements the palette index if auto-increment is enabled in NextREG $43 bit 7\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 If writing an L2 palette, the second write\rquote s D7 holds the L2 priority bit which if set (1) brings the colour defined at that index on top of all other layers. If you also need the same colour in regular priority (for example: for enviromental masking) you will have to set it up again, this time with no priority.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Reads return the second byte and do not autoincrement. Writes to nextreg $40, $41, $41, or $43 reset to the first write.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $4A ({4A}) {{\f5\u8658*}} Fallback Colour Value {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8-bit colour if all layers are transparent ($E3 on reset) \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 black on reset = 0)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $4B ({4B}) {{\f5\u8658*}} Sprite Transparency Index {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Index value ($E3 if reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 For 4-bit sprites only the bottom 4-bits are relevant.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $4C ({4C}) {{\f5\u8658*}} Level 3 Transparency Index {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Index value ($0F on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $50 ({50}) {{\f5\u8658*}} MMU Slot 0 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $0000 to $1FFF ($ff on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A 255 value causes the ROM to become visible.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $51 ({51}) {{\f5\u8658*}} MMU Slot 1 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $2000 to $3FFF ($ff on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A 255 value causes the ROM to become visible.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $52 ({52}) {{\f5\u8658*}} MMU Slot 2 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $4000 to $5FFF ($0A on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $53 ({53}) {{\f5\u8658*}} MMU Slot 3 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $6000 to $7FFF ($0B on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $54 ({54}) {{\f5\u8658*}} MMU Slot 4 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $8000 to $9FFF ($04 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $55 ({55}) {{\f5\u8658*}} MMU Slot 5 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $A000 to $BFFF ($05 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $56 ({56}) {{\f5\u8658*}} MMU Slot 6 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $C000 to $DFFF ($00 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $57 ({57}) {{\f5\u8658*}} MMU Slot 7 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = 8k RAM page at position $E000 to $FFFF ($01 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Pages can be from 0 to 223 on a fully expanded Next.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Writing to ports $1FFD, $7FFD and $DFFD writes $FF to MMU0 and MMU1 and writes appropriate values to MMU6 and MMU7 to map in the selected 16k bank.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 +3 special modes override the MMUs if used.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $60 ({60}) {{\f5\u8658*}} Copper Data 8-bit Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Byte to write to copper instruction memory \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Note that each copper instruction is two bytes long, after a write, the coppen address is auto-incremented to the next memory position.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 After a write, the index is auto-incremented to the next memory position.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $61 ({61}) {{\f5\u8658*}} Copper Address LSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Copper instruction memory address LSB (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $62 ({62}) {{\f5\u8658*}} Copper Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Start Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
00 = Copper fully stopped \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
01 = Copper start, execute the list from index 0, and loop to the start \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
10 = Copper start, execute the list from last point, and loop to the start \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 = Copper start, execute the list from index 0, and restart the list when the raster reaches position (0,0) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-0 = Copper instruction memory address (MSB) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $63 ({63}) {{\f5\u8658*}} Copper Data 16-bit Write {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Byte to write to copper instruction memory \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The 16-bit value is written in pairs. The first 8-bits are the MSB and are destined for an even copper instruction address. The sesond 8-bits are the LSB and are destined for an odd copper instruction address.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 After each write, the copper address is auto-incremented to the next memory position.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 After a write to an odd address, the all 16-bits are written to copper memory at once.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $64 ({64}) {{\f5\u8658*}} Vertical Line Count Offset (3.01.05) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Offset added to the vertical line counter \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
affects copper, line interrupt and active line count.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 Normally the ula\rquote s pixel row 0 aligns with vertical line count 0. With a non-zero offset, the ula\rquote s pixel row 0 will align with the vertical line offset.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb120 \li600\fi0 Eg, if the offset is 32 then vertical line 32 will correspond to the first pixel row in the ula and vertical line 0 will align with the first pixel row of the tilemap and sprites. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Since a change in offset takes effect when the ula reaches row 0, the change can take up to one frame to occur.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $68 ({68}) {{\f5\u8658*}} ULA Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Disable ULA output (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6-5 = Color blending control for layering modes 6 & 7 (3.01.01) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = ULA as blend colour \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = No blending \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = ULA/Tilemap mix result as blend colour \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = Tilemap as blend colour \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Cancel entries in 8x5 matrix for extended keys (3.01.04) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable ULAplus (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable ULA half pixel scroll (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
may change \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Reserved (must be 0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable stencil mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
When ULA and Layer 3 are enabled, if either are transparent, the result is transparent, otherwise the result is the logical AND of both colours. \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $69 ({69}) {{\f5\u8658*}} Display Control 1 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Layer 2 Enable (Port $123B bit 1 alias) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = ULA Shadow display enable (Port $7FFD bit 3 alias) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = Timex alias (Port $FF alias) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $6A ({6A}) {{\f5\u8658*}} Layer 1,0 (LoRes) Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Radistan (16-colour) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Radistan DFILE switch (xor with bit 0 of port $ff) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Radistsan palette offset (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = ULAplus palette offset (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $6B ({6B}) {{\f5\u8658*}} Layer 3 (Tilemap) Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Layer 3 Enable (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Layer 3 Size control (0 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = 40x32 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = 80x32 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Disable Arrtibute Entry (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = palette select (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Text mode (1-bit tilemap) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Activate 512 tile mode (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Layer 3 on top of ULA (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $6C ({6C}) {{\f5\u8658*}} Default Layer 3 Attribute* {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Palette Offset ($00 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = X mirror (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Y mirror (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Rotate (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Bit 8 of the tile number (512 tile mode) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA over tilemap (256 tile mode) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 *Active tile attribute if bit 5 of nextreg $6B is set.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $6E ({6E}) {{\f5\u8658*}} Layer 3 Tilemap Base Address {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Bank Select (3.01.08) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Bank 5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Bank 7 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = MSB of address of the tilemap in Bank 5 (16k) or 7 (8k) ($2C on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Soft Reset default $2C - This is because the address is $6C00 so the MSB is $6C. But the stored value is only the lower 6 bits so it\rquote s an offset into the 16k Bank 5. To calculate therefore subtract $40 leaving you with $2C.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The value written is an offset into the 16k Bank 5 or the 8k lower half of Bank 7 allowinf the tilemap to be placed at any multiple of 256 bytes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $6F ({6F}) {{\f5\u8658*}} Layer 3 Tile Definitions Base Address {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Select bank (3.01.08) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 = Bank 5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 = Bank 7 \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-0 = MSB of address of the tile definitions in Bank 5 (16k) or 7 (8k) ($0C on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Soft Reset default $0C - This is because the address is $4C00 so the MSB is $4C. But the stored value is only the lower 6 bits so it\rquote s an offset into the 16k Bank 5. To calculate therefore subtract $40 leaving you with $0C.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 The value written is an offset into the 16k Bank 5 or the 8k lower half of Bank 7 allowing the tilemap to be placed at any multiple of 256 bytes.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $70 ({70}) {{\f5\u8658*}} Layer 2 Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 5-4 = Resolution (00 on soft reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = {256{\u215*}192{\u215*}256} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = {320{\u215*}256{\u215*}256} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = {640{\u215*}256{\u215*}16} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = Do not use \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-0 = Palette offset ($0 on soft reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $71 ({71}) {{\f5\u8658*}} Layer 2 X Scroll MSB {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 0 = MSB of X Offset \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $75 ({75}) {{\f5\u8658*}} Sprite Attribute 0 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $35\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $76 ({76}) {{\f5\u8658*}} Sprite Attribute 1 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $36\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $77 ({77}) {{\f5\u8658*}} Sprite Attribute 2 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $37\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $78 ({78}) {{\f5\u8658*}} Sprite Attribute 3 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $38\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $79 ({79}) {{\f5\u8658*}} Sprite Attribute 4 (Auto-incrementing)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 See nextreg $39\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $7F ({7F}) {{\f5\u8658*}} User Register 0 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = User Register ($FF on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Caution NextReg numbers above $7F are inaccessible to the Copper\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $80 ({80}) {{\f5\u8658*}} Expansion Bus Enable\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Immediate {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Expansion Bus Enable (0 on hard reset)(3.01.07) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable ROMCS ROM replacement from divmmc banks 14/15 (experimental, 3.01.03) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = I/O cycle Disable/Ignore {{\field{\*\fldinst{ EQ  \\x\\to( {IORQULA}) }}{\fldrslt }}
} (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Memory cycle Disable/Ignore {{\field{\*\fldinst{ EQ  \\x\\to( {ROMCS}) }}{\fldrslt }}
} (0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 After Soft Reset (Copied into bits 7-4) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Expansion Bus Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable ROMCS ROM replacement from divmmc banks 14/15 (experimental, 3.01.03) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = I/O cycle Disable/Ignore {{\field{\*\fldinst{ EQ  \\x\\to( {IORQULA}) }}{\fldrslt }}
} (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Memory cycle Disable/Ignore {{\field{\*\fldinst{ EQ  \\x\\to( {ROMCS}) }}{\fldrslt }}
} (0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $81 ({81}) {{\f5\u8658*}} Expansion Bus Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = (R) Expansion bus {{\field{\*\fldinst{ EQ  \\x\\to( {ROMCS}) }}{\fldrslt }}
} asserted \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Allow peripherials to override the ULA on some even port reads ($00-$0E)(Rotoronics Wafadrive)(3.01.07) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Disable expansion bus NMI debounce (Opus Discovery)(3.01.07) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = (W) Propagate max CPU clock at all times (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 3-2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Max CPU Speed when Expansion Bus is enabled ($00 on hard reset, currently fixed at $00) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = 3.5 MHz \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = 7 MHz \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = 14 MHz \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = 28 MHz \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 Register (R/W) $82 ({82}) {{\f5\u8658*}} Internal Port decoding control 1/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Kempston Port 2 (Port $37) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Kempston Port 1 (Port $1F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable DMA (Port $6B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable +3 Floating Bus (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable +3 Paging (Port $1FFD) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Next Memory Paging (Port $DFFD) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Paging (Port $7FFD) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Timex (Port $FF) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $83 ({83}) {{\f5\u8658*}} Internal Port decoding control 2/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Layer 2 (Port $123B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Sprites (Ports $57, $5B, $303B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Kempston Mouse (Ports $FADF, $FBDF, $FFDF) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable UART (Ports $133B, $143B, $153B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable SPI (Ports $E7, $EB) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable I{\up7\fs18 2}C (Ports $103B, $113B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Multiface (two variable ports) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable divMMC (Port $E3) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $84 ({84}) {{\f5\u8658*}} Internal Port decoding control 3/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable SPECdrum Mono DAC (Port $DF) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Covox/GS Mono DAC (Port $B3) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pentagon/ATM DAC (Port $FB) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Covox Stereo DAC (Ports $0F, $4F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Profi/Covox Stereo DAC (Ports $3F, $5F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Soundrive DAC Mode 2 (Ports $F1, $F3, $F9, $FB) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Soundrive DAC Mode 1 (Ports $0F, $1F, $4F, $5F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable AY (Ports $FFFD, $BFFD) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $85 ({85}) {{\f5\u8658*}} Internal Port decoding control 4/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable configuration of port decoding on soft reset (3.01.01) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Z80 CTC ports $183B, $193B, $1A3B, $1B3B, $1C3B, $1D3B, $1E3B, and $1F3B \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pentagon 1024 memory port $EFF7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable DMA port $0B (3.01.02) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable ULAplus (Ports $BF3B, $FF3B) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $86 ({86}) {{\f5\u8658*}} Expansion Port decoding control 1/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Kempston Port 2 (Port $37) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Kempston Port 1 (Port $1F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable DMA (Port $6B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable +3 Floating Bus (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable +3 Paging (Port $1FFD) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Next Memory Paging (Port $DFFD) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Paging (Port $7FFD) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Timex (Port $FF) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $87 ({87}) {{\f5\u8658*}} Expansion Port decoding control 2/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Layer 2 (Port $123B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Sprites (Ports $57, $5B, $303B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Kempston Mouse (Ports $FADF, $FBDF, $FFDF) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable UART (Ports $133B, $143B, $153B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable SPI (Ports $E7, $EB) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable I{\up7\fs18 2}C (Ports $103B, $113B) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Multiface (two variable ports) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable divMMC (Port $E3) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $88 ({88}) {{\f5\u8658*}} Expansion Port decoding control 3/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable SPECdrum Mono DAC (Port $DF) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Covox/GS Mono DAC (Port $B3) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pentagon/ATM DAC (Port $FB) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Covox Stereo DAC (Ports $0F, $4F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Profi/Covox Stereo DAC (Ports $3F, $5F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Soundrive DAC Mode 2 (Ports $F1, $F3, $F9, $FB) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Soundrive DAC Mode 1 (Ports $0F, $1F, $4F, $5F) (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable AY (Ports $FFFD, $BFFD) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $89 ({89}) {{\f5\u8658*}} Expansion Port decoding control 4/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable configuration of port decoding on soft reset (3.01.01) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Z80 CTC ports $183B, $193B, $1A3B, $1B3B, $1C3B, $1D3B, $1E3B, and $1F3B \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pentagon 1024 memory port $EFF7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable DMA port $0B (3.01.02) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable ULAplus (Ports $BF3B, $FF3B) (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 The Internal Port Decoding Enables always apply.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 When the Expansion Bus is enabled, the Expansion Bus Port Decoding Enables are logically ANDed with the Internal Enables. A result of 0 for the corresponding bit indicates the internal device is {\i disabled}. If the Expansion Bus is enabled, this allows I/O cycles for disabled ports to propagate to the Expansion Bus, otherwise corresponding I/O cycles to the Expansion Bus are filtered.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $8A ({8A}) {{\f5\u8658*}} Expansion Bus I/O Propagate Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Propagate port $FF I/O Cycles (0 on hard reset, 3.01.02) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Propagate port $1FFD I/O Cycles (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Propagate port $DFFD I/O Cycles (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Propagate port $7FFD I/O Cycles (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Propagate port $FE I/O Cycles (1 on hard reset, 3.01.03: 0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $8C ({8C}) {{\f5\u8658*}} Alternate ROM\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Immediate {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Alt ROM Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Alt ROM visible ONLY during writes (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = 48k ROM Lock (0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 After Soft Reset (copied into bits 7-4) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Alt ROM Enable (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Alt ROM visible ONLY during writes (0 on hard reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = 48k ROM Lock (0 on hard reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $8E ({8E}) {{\f5\u8658*}} Spectrum 128k Memory Mapping (3.01.01) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Bank number bit 3 (port $dffd bit 0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6-4 = Bank number bits 2-0 (port $7ffd bits 2-0) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable change ram page (read as 1) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Paging mode (port $1ffd bit 0) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = Normal paging mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Special paging mode (lot bit of memory configuration) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Normal Paging Mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = ROM selection (port $1ffd bit 1 and $7ffd bit 4) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Special (all RAM) Paging Mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = RAM configuration selection (port $1ffd bits 2-1) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Writes can affect all ports $7ffd, $dffd, and $1ffd\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Writes can always change the ROM/allRAM mapping\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Writes immediately change the current MMU mapping as if by port write.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $8F ({8F}) {{\f5\u8658*}} Memory Mapping Mode (3.01.06) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 1-0 = Mapping mode applied {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = Standard ZX 128k +3 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = Profi (removed in 3.01.09) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = Pentagon 512k \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = Pentagon 1024k (limited to 768k on 1MB machines) \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 * Standard ZX 128k +3 = principally ports $7FFD, $DFFD, and $1FFD\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 * Pentagon 512k = principally port $7FFD\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 * Pentagon 1024k = principally ports $7FFD and $EFF7\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ** The mapping modes affect how ports $7FFD, $DFFD, $1FFD, and $EFF7 carry out memory paging, see ports\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $90 ({90}) {{\f5\u8658*}} Pi GPIO output enable 1/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Pin 7 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Pin 6 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pin 5 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Pin 4 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 3 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 2 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 1 (cannot be enabled) (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 0 (cannot be enabled) (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $91 ({91}) {{\f5\u8658*}} Pi GPIO output enable 2/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Pin 15 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Pin 14 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pin 13 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Pin 12 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 11 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 10 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 9 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 8 (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $92 ({92}) {{\f5\u8658*}} Pi GPIO output enable 3/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Enable Pin 23 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Enable Pin 22 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable Pin 21 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Enable Pin 20 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 19 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 18 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 17 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 16 (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $93 ({93}) {{\f5\u8658*}} Pi GPIO output enable 4/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable Pin 27 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Enable Pin 26 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Enable Pin 25 (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable Pin 24 (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $98 ({98}) {{\f5\u8658*}} Pi GPIO Pin State 1/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pin 7 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pin 6 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pin 5 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Pin 4 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 3 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 2 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 1 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 0 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $99 ({99}) {{\f5\u8658*}} Pi GPIO Pin State 2/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pin 15 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pin 14 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pin 13 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Pin 12 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 11 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 10 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 9 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 8 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $9A ({9A}) {{\f5\u8658*}} Pi GPIO Pin State 3/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Pin 23 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = Pin 22 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Pin 21 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Pin 20 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 19 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 18 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 17 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 16 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $9B ({9B}) {{\f5\u8658*}} Pi GPIO Pin State 4/4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Pin 27 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Pin 26 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Pin 25 Data (1 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Pin 24 Data (1 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $A0 ({A0}) {{\f5\u8658*}} Pi Peripheral Enable {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Enable UART on GPIO 14, 15 (0 on reset)* \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Communication Type (0 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = Rx to GPIO 15, Tx to GPIO 14 (Pi) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = Rx to GPIO 14, Tx to GPIO 15 (Pi Hats) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable I{\up7\fs18 2}C on GPIO 2, 3 (0 on reset)* \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Enable SPI on GPIO 7, 8, 9, 10, 11 (0 on reset)* \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 *Overrides GPIO Enables\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $A2 ({A2}) {{\f5\u8658*}} Pi I{\up7\fs18 2}S Audio Control {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-6 = I{\up7\fs18 2}S State ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00 = I{\up7\fs18 2}S Disabled \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01 = I{\up7\fs18 2}S is mono, source R \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10 = I{\up7\fs18 2}S is mono, source L \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11 = I{\up7\fs18 2}S is stereo \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Audio Flow Direction (0 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0 = PCM_DOUT to Pi, PCM_DIN from Pi (Hats) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1 = PCM_DOUT from Pi, PCM_DIN to Pi (Pi) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Mute left (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Mute right (0 on reset) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Slave mode, Reserved must be 1 (remove in 3.01.05) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Direct I{\up7\fs18 2}S audio to EAR on port $FE (0 on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $A3 ({A3}) {{\f5\u8658*}} Pi I{\up7\fs18 2}S Clock Divide (Master Mode) (removed in 3.01.05) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Clock divide value ($0B on reset) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {{\field{\*\fldinst{ EQ {Divider}= \\F(538461,{Rate})\u8722?1}}{\fldrslt }}
} or {{\field{\*\fldinst{ EQ {Rate}= \\F(538461,{Divider}+1)}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $A8 ({A8}) {{\f5\u8658*}} ESP WiFi GPIO Output Enable {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-3 = Reserved, must be sero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = GPIO2 output enable (fixed at 0, GPIO2 is read-only) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = GPIO0 output enable (fixed at 0, GPIO2 is read-only) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $A9 ({A9}) {{\f5\u8658*}} ESP WiFi GPIO {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-3 = Reserved, must be sero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Read/Write GPIO2 (reset = 1) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Read/Write GPIO0 (reset = 1) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R) $B0 ({B0}) {{\f5\u8658*}} Extended Keys 0 (3.01.04) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = 1 if ; pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = 1 if {\f5\u776.}pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = 1 if , pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = 1 if . pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = 1 if UP pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = 1 if DOWN pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = 1 if LEFT pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = 1 if RIGHT pressed \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R) $B1 ({B1}) {{\f5\u8658*}} Extended Keys 1 (3.01.04) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = 1 if DELETE pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = 1 if EDIT pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = 1 if BREAK pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = 1 if INV VIDEO pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = 1 if TRUE VIDEO pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = 1 if GRAPH pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = 1 if CAPS LOCK pressed \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = 1 if EXTEND pressed \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $C0 ({C0}) {{\f5\u8658*}} Interrupt Control (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = Programmable portion of IM2 vector * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Enable stackless {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} response \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 2-1 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = Maskable interrupt mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 - pulse \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 - IM2 \par
}}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb220 \fi0 * In IM2 mode vector generated is: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = nextreg $C0 bits 7-5 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-1 = Interrupt source {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
0 - line interrupt (highest priority) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
1 - UART 0 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
2 - UART 1 Rx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
3\endash 10 - CTC channels 0-7 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
11 - ULA \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
12 - UART 0 Tx \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 {}\tab
13 - UART 1 Tx (lowest priority) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = 0 \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $C2 ({C2}) {{\f5\u8658*}} {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} Return Address LSB (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C3 ({C3}) {{\f5\u8658*}} {{\field{\*\fldinst{ EQ  \\x\\to( {NMI}) }}{\fldrslt }}
} Return Address MSB (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C4 ({C4}) {{\f5\u8658*}} Interrupt Enable 0 (3.01.08)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($83 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Expansion bus {{\field{\*\fldinst{ EQ  \\x\\to( {INT}) }}{\fldrslt }}
} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 6-2 = Reserved must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (R/W) $C5 ({C5}) {{\f5\u8658*}} Interrupt Enable 1 (3.01.08)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = ctc channel 7 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = ctc channel 6 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = ctc channel 5 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = ctc channel 4 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = ctc channel 3 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = ctc channel 2 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = ctc channel 1 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ctc channel 0 zc/to \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Register (W) $C6 ({C6}) {{\f5\u8658*}} Interrupt Enable 2 (3.01.08)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = UART1 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = UART1 Rx half full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = UART1 Rx available * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = UART0 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = UART0 Rx half full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = UART0 Rx available * \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * For each UART, Rx half full and Rx available are shared interrupts\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $C7 ({C7}) {{\f5\u8658*}} Reserved (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C8 ({C8}) {{\f5\u8658*}} Interrupt Status 0 (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the device generated an interrupt in the past * Writes clear bits where bits are set except in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $C9 ({C9}) {{\f5\u8658*}} Interrupt Status 1 (3.01.09) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = ctc channel 7 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = ctc channel 6 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = ctc channel 5 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = ctc channel 4 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = ctc channel 3 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = ctc channel 2 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = ctc channel 1 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ctc channel 0 zc/to \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the device generated an interrupt in the past * Writes clear bits where bits are set except in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CA ({CA}) {{\f5\u8658*}} Interrupt Status 2 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = UART1 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = UART1 Rx almost full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = UART1 Rx available * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Reserved must be zero \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = UART0 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = UART0 Rx almost full * \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = UART0 Rx available * \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * For each UART Rx half full and Rx available are shared interrupts ** Set bits indicate the device generated an interrupt in the past ** Writes clear bits where bits are set except in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $CB ({CB}) {{\f5\u8658*}} Reserved (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CC ({CC}) {{\f5\u8658*}} DMA Interrupt Enable 0 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-2 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = Line \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = ULA \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the specified interrupt will interrupt a DMA operation when in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CD ({CD}) {{\f5\u8658*}} DMA Interrupt Enable 1 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = CTC channel 7 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = CTC channel 6 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = CTC channel 5 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = CTC channel 4 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = CTC channel 3 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = CTC channel 2 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = CTC channel 1 zc/to \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = CTC channel 0 zc/to \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the corresponding interrupt will interrupt a DMA operation when in IM2 mode\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (R/W) $CE ({CE}) {{\f5\u8658*}} DMA Interrupt Enable 2 (3.01.09) ($00 on reset) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 6 = UART1 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5 = UART1 Rx half full \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = UART1 Rx available \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Reserved, must be 0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = UART0 Tx empty \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1 = UART0 Tx half full \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0 = UART0 Tx available \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 * Set bits indicate the corresponding interrupt will interrupt a DMA operation when in IM2 mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $CF ({CF}) {{\f5\u8658*}} Reserved (3.01.09)\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Register (W) $FF ({FF}) {{\f5\u8658*}} Debug LEDs (DE-1, DE-2 am Multicore only)\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 B.2  AY-3-8912\par
(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $00 (0) {{\f5\u8658*}} Channel A fine tune {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Channel A frequency bits 7-0 \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $01 (1) {{\f5\u8658*}} Channel A coarse tune {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-0 = Channel A frequency bits 11-8 \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $02 (0) {{\f5\u8658*}} Channel B fine tune {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Channel A frequency bits 7-0 \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $03 (1) {{\f5\u8658*}} Channel B coarse tune {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-0 = Channel A frequency bits 11-8 \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $04 (0) {{\f5\u8658*}} Channel C fine tune {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Channel A frequency bits 7-0 \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $05 (1) {{\f5\u8658*}} Channel C coarse tune {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-0 = Channel A frequency bits 11-8 \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $06 (6) {{\f5\u8658*}} Noise period {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 4-0 = Noise period to noise generator \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $07 (7) {{\f5\u8658*}} Mixer control I/O Enable {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
Active low (0=enable, 1= disable) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 7-6: Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 5: Channel C noise enable \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4: Channel B noise enable \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3: Channel A noise enable \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2: Channel C tone enable \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1: Channel B tone enable \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 0: Channel A tone enable \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $0A (10) {{\f5\u8658*}} Channel A amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-5 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 4 = Amplitude mode {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0=fixed amplitude \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1=use envelope generator (bits 0-3 ignored) \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 0-3 = value of fixed amplitude \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $0B (11) {{\f5\u8658*}} Channel B amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
like channel A amplitude \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $0C (12) {{\f5\u8658*}} Channel C amplitude {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 {}\tab
like channel A amplitude \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $0D (13) {{\f5\u8658*}} Envelope period fine {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Envelop period LSB \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $0E (14) {{\f5\u8658*}} Envelope period coarse {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-0 = Envelop period MSB \par
}(\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 R/W) $0F (15) {{\f5\u8658*}} Envelope shape {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bits 7-4 = Reserved \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 3 = Continue {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0=drop to amplitude 0 after 1 cycle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1=use \u226?\u8364?\u732?Hold\u226?\u8364?\u8482? value \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 2 = Attack {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
0=generator counts down \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
1=generator counts up \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bit 1-0 = Alternate & Hold {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
00=generator resets after each cycle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
01=hold final value \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
10=generator reverses direction each cycle \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li1200\fi-300 \bullet\tab
11=hold initial value \par
}}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb460 \fi0 B.3  zxDMA\par
{\fs15 \pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb180 \fi0 \fs15 {zxndma/registers.csv} \par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb120 \fi0 Appendix C\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Extended Opcodes to Mnemonics\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 C.1  Single Byte Opcodes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {wIntelN}{1=,2=,3=,4=,5=, 6=,7=,8=,9=,10=} {wIntelT}{tabular=\emdash l\emdash l\emdash l\emdash r\emdash r\emdash \emdash l\emdash l\emdash l\emdash r\emdash r\emdash , table head=Op\tab
Z80\tab
8080\tab
Sz\tab
T\tab
Op\tab
Z80\tab
8080\tab
Sz\tab
T\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 , table foot=,wIntelN}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {zilogN}{1=,2=,3=,4=, 5=,6=,7=,8=} {zilogT}{tabular=\emdash l\emdash l\emdash r\emdash r\emdash \emdash l\emdash l\emdash r\emdash r\emdash , table head=Op\tab
Mnemonic\tab
Sz\tab
T\tab
Op\tab
Mnemonic\tab
Sz\tab
T\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 , table foot=,zilogN}\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb360 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.1: $00-$1F}{\field{\*\fldinst TC "3.1 $00-$1F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/00-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.2: $20-$3F}{\field{\*\fldinst TC "3.2 $20-$3F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/20-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.3: $40-$5F}{\field{\*\fldinst TC "3.3 $40-$5F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/40-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.4: $60-$7F}{\field{\*\fldinst TC "3.4 $60-$7F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/60-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.5: $80-$9F}{\field{\*\fldinst TC "3.5 $80-$9F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/80-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.6: $A0-$BF}{\field{\*\fldinst TC "3.6 $A0-$BF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/A0-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.7: $C0-$DF}{\field{\*\fldinst TC "3.7 $C0-$DF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/C0-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.8: $E0-$FF}{\field{\*\fldinst TC "3.8 $E0-$FF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [wIntelT]{appendices/opcode/E0-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 C.2  $CBxx Bit Operations\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb420 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.9: $CB00-$CB1F}{\field{\*\fldinst TC "3.9 $CB00-$CB1F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cb00-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.10: $CB20-$CB3F}{\field{\*\fldinst TC "3.10 $CB20-$CB3F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cb20-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.11: $CB40-$CB5F}{\field{\*\fldinst TC "3.11 $CB40-$CB5F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cb40-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.12: $CB60-$CB7F}{\field{\*\fldinst TC "3.12 $CB60-$CB7F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cb60-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.13: $CB80-$CB9F}{\field{\*\fldinst TC "3.13 $CB80-$CB9F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cb80-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.14: $CBA0-$CBBF}{\field{\*\fldinst TC "3.14 $CBA0-$CBBF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cba0-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.15: $CBC0-$CBDF}{\field{\*\fldinst TC "3.15 $CBC0-$CBDF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cbc0-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.16: $CBE0-$CBFF}{\field{\*\fldinst TC "3.16 $CBE0-$CBFF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/cbe0-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 C.3  $DDxx IX\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb420 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.17: $DD00-$DD5F}{\field{\*\fldinst TC "3.17 $DD00-$DD5F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/dd00-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.18: $DD60-$CB8F}{\field{\*\fldinst TC "3.18 $DD60-$CB8F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/dd60-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.19: $DD90-$DDFF}{\field{\*\fldinst TC "3.19 $DD90-$DDFF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/dd90-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 C.4  $EDxx Block/Port\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb420 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.20: $ED00-$ED4F}{\field{\*\fldinst TC "3.20 $ED00-$ED4F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/ed00-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs15 * ZX Spectrum Next extension \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.21: $ED50-$ED8F}{\field{\*\fldinst TC "3.21 $ED50-$ED8F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/ed50-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.22: $ED90-$EDFF}{\field{\*\fldinst TC "3.22 $ED90-$EDFF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/ed90-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \sb120 \fi0 \fs15 * ZX Spectrum Next extension \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 C.5  $FDxx IY\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb420 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.23: $FD00-$FD5F}{\field{\*\fldinst TC "3.23 $FD00-$FD5F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/fd00-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.24: $FD60-$FD8F}{\field{\*\fldinst TC "3.24 $FD60-$FD8F" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/fd60-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.25: $FD90-$FDFF}{\field{\*\fldinst TC "3.25 $FD90-$FDFF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/fd90-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 C.6  $DDCBxx IX Bit Operations\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb420 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.26: $DDCB00-$DDCBFF}{\field{\*\fldinst TC "3.26 $DDCB00-$DDCBFF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/ddcb00-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 C.7  $FDCBxx IY Bit Operations\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb420 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 3.27: $FDCB00-$FDCBFF}{\field{\*\fldinst TC "3.27 $FDCB00-$FDCBFF" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 [zilogT]{appendices/opcode/fdcb00-opcode.csv}{} {\tab
\tab
\tab
\tab
\tab
\tab
\tab
} \par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Appendix D\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Mnemonics to Extended Opcodes\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.1: aci-adc}{\field{\*\fldinst TC "4.1 aci-adc" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/aci-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.2: add}{\field{\*\fldinst TC "4.2 add" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/add-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.3: adi-ani}{\field{\*\fldinst TC "4.3 adi-ani" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/adi-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.4: bit 0-bit 3}{\field{\*\fldinst TC "4.4 bit 0-bit 3" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/bit0-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.5: bit 4-bit 7}{\field{\*\fldinst TC "4.5 bit 4-bit 7" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/bit4-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.6: brlc-cnz}{\field{\*\fldinst TC "4.6 brlc-cnz" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/brlc-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.7: cp-dcr}{\field{\*\fldinst TC "4.7 cp-dcr" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/cp-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.8: dcx-im}{\field{\*\fldinst TC "4.8 dcx-im" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/dcx-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.9: in-inx}{\field{\*\fldinst TC "4.9 in-inx" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/in-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.10: jc-jz}{\field{\*\fldinst TC "4.10 jc-jz" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/jc-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.11: ld (bc),a-ld (iy+x),x}{\field{\*\fldinst TC "4.11 ld (bc),a-ld (iy+x),x" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/ld0-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.12: ld (xx),a-ld a,x}{\field{\*\fldinst TC "4.12 ld (xx),a-ld a,x" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/ld1-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.13: ld b,(hl)-ld c,x}{\field{\*\fldinst TC "4.13 ld b,(hl)-ld c,x" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/ld2-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.14: ld d,(hl)-ld e,x}{\field{\*\fldinst TC "4.14 ld d,(hl)-ld e,x" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/ld3-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.15: ld h,(hl)-ld ixl,x}{\field{\*\fldinst TC "4.15 ld h,(hl)-ld ixl,x" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/ld4-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.16: ld iyh,a-ld sp,xx}{\field{\*\fldinst TC "4.16 ld iyh,a-ld sp,xx" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/ld5-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.17: lda-mirror}{\field{\*\fldinst TC "4.17 lda-mirror" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/lda-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.18: mov a,a-mov d,m}{\field{\*\fldinst TC "4.18 mov a,a-mov d,m" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/mov0-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.19: mov e,a-mov m,l}{\field{\*\fldinst TC "4.19 mov e,a-mov m,l" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/mov1-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.20: mul-otir}{\field{\*\fldinst TC "4.20 mul-otir" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/mul-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.21: out-rc}{\field{\*\fldinst TC "4.21 out-rc" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/out-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.22: res 0-res 3}{\field{\*\fldinst TC "4.22 res 0-res 3" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/res0-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.23: res 4-res 7}{\field{\*\fldinst TC "4.23 res 4-res 7" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/res4-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.24: ret-rp}{\field{\*\fldinst TC "4.24 ret-rp" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/ret-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.25: rr-rz}{\field{\*\fldinst TC "4.25 rr-rz" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/rr-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.26: sbb-scf}{\field{\*\fldinst TC "4.26 sbb-scf" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/sbb-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.27: set 0-set 3}{\field{\*\fldinst TC "4.27 set 0-set 3" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/set0-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.28: set 4-set 7}{\field{\*\fldinst TC "4.28 set 4-set 7" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/set4-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.29: setae-stc}{\field{\*\fldinst TC "4.29 setae-stc" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/setae-mnemonics.csv} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs22\sl240\slmult1 \sb600 \fi0 \par
\fs15 \pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {Table 4.30: sub-xthl}{\field{\*\fldinst TC "4.30 sub-xthl" \\f t}{\fldrslt }}\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \fs15 {appendices/mnemonic/sub-mnemonics.csv} \par
}\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Appendix E\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 File Formats\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 E.1  AKY\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Music file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.2  BAS\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Basic file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.3  BMP\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Windows bitmap. On the ZX Spectrum next, these must be uncompressed and 8 bpp. \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.4  DSK\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disk image \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.5  ESP\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Update file for Wi-Fi module \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.6  GDE\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum Next Guide hypertext file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.7  MC\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A Timex hi-color image. Like .shc, but the bitmap and colour map are stored in display order. \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.8  MLT\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A Timex hi-color image. Like .shc, but the colour map is stored in display order. \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.9  MOD\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Modtracker music file (requires Pi accelerator to play). \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.10  NDR\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Nexdaw music file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.11  NEX\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum Next executable file. \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.12  NXI\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 A version of a 256x192x8 layer 2 image. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-511 - palette data \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 512-49663 - image data \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 E.13  O\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX-80 executable file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.14  P3D\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Disk image file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.15  PT3\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Protracker 3 music file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.16  P\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX-81 executable file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.17  SDH\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Music file (requires Pi accelerator to play) \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.18  SID\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Commodore 64 SID music file (requires Pi accelerator to play) \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.19  SCR\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum screen dump\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In basic form a 6912 byte file containing the bitmap and colour map for a standard spectrum image. May have ULAPlus or ULANext color data appended.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ULAplus {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-6143 - bitmap: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 6144-6911 - colour map: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 6912-6975 - ULAPlus palette data \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ULANext {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-6143 - bitmap: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 6144-6911 - colour map: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
byte 6912 - ULANext mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 6913-between 6228 and 7426 - ULANext palette data, size is dependent on specific ULANext mode and 8 or 9 bit palette entries. {\par
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {mode}\cell}
{\pard\intbl\qr {ink}\cell}
{\pard\intbl\qr {paper}\cell}
{\pard\intbl\qr {8-bit}\cell}
{\pard\intbl\qr {9-bit}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$01}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\qr {128}\cell}
{\pard\intbl\qr {130}\cell}
{\pard\intbl\qr {260}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$03}\cell}
{\pard\intbl\qr {4}\cell}
{\pard\intbl\qr {64}\cell}
{\pard\intbl\qr {68}\cell}
{\pard\intbl\qr {136}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$07}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\qr {32}\cell}
{\pard\intbl\qr {40}\cell}
{\pard\intbl\qr {80}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$0F}\cell}
{\pard\intbl\qr {16}\cell}
{\pard\intbl\qr {16}\cell}
{\pard\intbl\qr {32}\cell}
{\pard\intbl\qr {64}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$1F}\cell}
{\pard\intbl\qr {32}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\qr {40}\cell}
{\pard\intbl\qr {80}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$3F}\cell}
{\pard\intbl\qr {64}\cell}
{\pard\intbl\qr {4}\cell}
{\pard\intbl\qr {68}\cell}
{\pard\intbl\qr {136}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$7F}\cell}
{\pard\intbl\qr {128}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\qr {130}\cell}
{\pard\intbl\qr {260}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$FF}\cell}
{\pard\intbl\qr {256}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {257}\cell}
{\pard\intbl\qr {514}\cell}
\row}
} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 E.20  SHC\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Timex hi-color screen dump\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In basic form the 12,288 byte file containing the bitmap and colour map for a Timex hi-color image. May have ULAPlus or ULANext color data appended.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 ULAplus {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-6143 - bitmap: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 6144-12287 - colour map: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 12288-12351 - ULAPlus palette data \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ULANext {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-6143 - bitmap: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 6144-12287 - colour map: memory order \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
byte 12288 - ULANext mode \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 12289-between 12304 and 12802 - ULANext palette data, size is dependent on specific ULANext mode and 8 or 9 bit palette entries. {\par
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {mode}\cell}
{\pard\intbl\qr {ink}\cell}
{\pard\intbl\qr {paper}\cell}
{\pard\intbl\qr {8-bit}\cell}
{\pard\intbl\qr {9-bit}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$01}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\qr {128}\cell}
{\pard\intbl\qr {130}\cell}
{\pard\intbl\qr {260}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$03}\cell}
{\pard\intbl\qr {4}\cell}
{\pard\intbl\qr {64}\cell}
{\pard\intbl\qr {68}\cell}
{\pard\intbl\qr {136}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$07}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\qr {32}\cell}
{\pard\intbl\qr {40}\cell}
{\pard\intbl\qr {80}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$0F}\cell}
{\pard\intbl\qr {16}\cell}
{\pard\intbl\qr {16}\cell}
{\pard\intbl\qr {32}\cell}
{\pard\intbl\qr {64}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$1F}\cell}
{\pard\intbl\qr {32}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\qr {40}\cell}
{\pard\intbl\qr {80}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$3F}\cell}
{\pard\intbl\qr {64}\cell}
{\pard\intbl\qr {4}\cell}
{\pard\intbl\qr {68}\cell}
{\pard\intbl\qr {136}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$7F}\cell}
{\pard\intbl\qr {128}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\qr {130}\cell}
{\pard\intbl\qr {260}\cell}
\row}
{\trowd\clbrdrr\brdrs\cellx1263\clbrdrl\brdrs\clbrdrr\brdrs\cellx2235\clbrdrl\brdrs\clbrdrr\brdrs\cellx3789\clbrdrl\brdrs\clbrdrr\brdrs\cellx5343\clbrdrl\brdrs\cellx6897
{\pard\intbl\ql {$FF}\cell}
{\pard\intbl\qr {256}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {257}\cell}
{\pard\intbl\qr {514}\cell}
\row}
} \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 E.21  SHR\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Timex hi-resolution screen dump.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 A 12,288 or 12,289 byte file containing a memory dump of the two 6k screen areas used by Timex hi-resolution mode in memory order with an optional byte indicating teh colours used. \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.22  SL2\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum Next layer 2 screen dump\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 In its most basic standard form, this is a 49,152 byte file contaning the memory for the image data. \par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 256x192x8 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-49151 - image data: row dominant \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
optional bytes 49152-49407 or 49663 - palette data (256 bytes for 8-bit entries, 512 bytes for 9-bit entries) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 320x256x8 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-81919 - image data: column dominant \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
optional bytes 81920-82175 or 82431 - palette data (256 bytes for 8-bit entries, 512 bytes for 9-bit entries) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 640x256x4 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-81919 - image data: column dominant, nybbles in adjacent columns \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
optional bytes 81920-81935 or 81951 - palette data (16 bytes for 8-bit entries, 32 bytes for 9-bit entries) \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 E.23  SLR\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum Next low-resolution screen dump.\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 Basic standard form 12,288 byte file contaning the memory for the two 6k areas for 128x96x8 image files\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 192x96x8 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-12287 - image data: row dominant \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
optional bytes 12288-12543 or 12799 - palette data (256 bytes for 8-bit entries, 512 bytes for 9-bit entries) \par
}\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 192x96x4 (Radistan) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
bytes 0-6143 - image data: row dominant \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs22\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
optional bytes 6144-6159 or 6175 - palette data (16 bytes for 8-bit entries, 32 bytes for 9-bit entries) \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 E.24  SNA\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum memory snapshot \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.25  SND\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Music file (requires Pi accelerator to play) \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.26  SNX\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Extended ZX Spectrum memory snapshot to be run in ZX Spectrum Next mode \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.27  SPR\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Sprite file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.28  TAP\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum tape image \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.29  TXT,DOC,ASM,INI,CFG,MD\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Text files \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.30  TZX\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum tape image (able to handle custom tape formats). Requires Pi accelerator to load. \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.31  WAV\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 PCM audio file \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.32  XM\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 XM tracker music file (requires Pi accelerator to play) \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.33  Z3 to Z8\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Inform interactive fiction files \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.34  Z80\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 ZX Spectrum memory snapshot \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 E.35  ZIP\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 Zip compressed file\par
\page
\pard\plain\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb120 \fi0 Appendix F\par
\pard\plain\s2\ql\sb240\sa120\keepn\f0\b\fs40\sl240\slmult1 \sb360 \fi0 Call Tables\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb600 \fi0 F.1  BDOS Call Table\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 F.2  BIOS Call Table\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb420 \fi0 F.3  NextZXOS Calls\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 F.3.1  +3DOS Compatible Calls\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {\b Filesystem Calls}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_VERSION}\cell}
{\pard\intbl\ql {$0103 ({0103})}\cell}
{\pard\intbl\ql {Get +3DOS issue and version numbers}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {*DOS_OPEN}\cell}
{\pard\intbl\ql {$0106 ({0106})}\cell}
{\pard\intbl\ql {Create and/or open a file}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_CLOSE}\cell}
{\pard\intbl\ql {$0109 ({0109})}\cell}
{\pard\intbl\ql {Close a file}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_ABANDON}\cell}
{\pard\intbl\ql {$010C ({010C})}\cell}
{\pard\intbl\ql {Abandon a file}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_REF_HEAD}\cell}
{\pard\intbl\ql {$010F ({010F})}\cell}
{\pard\intbl\ql {Point at the header data for this file}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_READ}\cell}
{\pard\intbl\ql {$0112 ({0112})}\cell}
{\pard\intbl\ql {Read bytes into memory}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_WRITE}\cell}
{\pard\intbl\ql {$0115 ({0115})}\cell}
{\pard\intbl\ql {Write bytes from memory}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_BYTE_READ}\cell}
{\pard\intbl\ql {$0118 ({0118})}\cell}
{\pard\intbl\ql {Read a byte}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_BYTE_WRITE}\cell}
{\pard\intbl\ql {$011B ({011B})}\cell}
{\pard\intbl\ql {Write a byte}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {*DOS_CATALOG}\cell}
{\pard\intbl\ql {$011E ({011E})}\cell}
{\pard\intbl\ql {Catalog disk directory}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {*DOS_FREE_SPACE}\cell}
{\pard\intbl\ql {$0121 ({0121})}\cell}
{\pard\intbl\ql {Free space on disk}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_DELETE}\cell}
{\pard\intbl\ql {$0124 ({0124})}\cell}
{\pard\intbl\ql {Delete a file}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_RENAME}\cell}
{\pard\intbl\ql {$0127 ({0127})}\cell}
{\pard\intbl\ql {Rename a file}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_BOOT}\cell}
{\pard\intbl\ql {$012A ({012A})}\cell}
{\pard\intbl\ql {Boot an operating system or other program}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_SET_DRIVE}\cell}
{\pard\intbl\ql {$012D ({012D})}\cell}
{\pard\intbl\ql {Set/get default drive}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_SET_USER}\cell}
{\pard\intbl\ql {$0130 ({0130})}\cell}
{\pard\intbl\ql {Set/get default user number}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {*DOS_GET_POSITION}\cell}
{\pard\intbl\ql {$0133 ({0133})}\cell}
{\pard\intbl\ql {Get file pointer for random access}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_SET_POSITION}\cell}
{\pard\intbl\ql {$0136 ({0136})}\cell}
{\pard\intbl\ql {Set file pointer for random access}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {*DOS_GET_EOF}\cell}
{\pard\intbl\ql {$0139 ({0139})}\cell}
{\pard\intbl\ql {Get end of file position for random access}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_GET_1346}\cell}
{\pard\intbl\ql {$013C ({013C})}\cell}
{\pard\intbl\ql {Get memory usage in pages 1, 3, 4, 6}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_SET_1346}\cell}
{\pard\intbl\ql {$013F ({013F})}\cell}
{\pard\intbl\ql {Re-allocate memory usage in pages 1, 3, 4, 6}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_FLUSH}\cell}
{\pard\intbl\ql {$0142 ({0142})}\cell}
{\pard\intbl\ql {Bring disk up to date}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_SET_ACCESS}\cell}
{\pard\intbl\ql {$0145 ({0145})}\cell}
{\pard\intbl\ql {Change open file\rquote s access mode}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_SET_ATTRIBUTES}\cell}
{\pard\intbl\ql {$0148 ({0148})}\cell}
{\pard\intbl\ql {Change a file\rquote s attributes}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DOS_SET_MESSAGE}\cell}
{\pard\intbl\ql {$014E ({014E})}\cell}
{\pard\intbl\ql {Enable/disable error messages}\cell}
\row}
}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx974\cellx3300\cellx6898
{\pard\intbl\ql {DD_L_XDPB}\cell}
{\pard\intbl\ql {$0187 ({0187})}\cell}
{\pard\intbl\ql {Initialise an XDPB from a disk specification}\cell}
\row}
{\trowd\cellx974\cellx3300\cellx6898
{\pard\intbl\ql {DD_L_DPB}\cell}
{\pard\intbl\ql {$018A ({018A})}\cell}
{\pard\intbl\ql {Initialise a DPB from a disk specification}\cell}
\row}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b System Calls}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1777\cellx5009\cellx6898
{\pard\intbl\ql {DOS_INITIALISE}\cell}
{\pard\intbl\ql {$0100 ({0100})}\cell}
{\pard\intbl\ql {Initialise +3DOS}\cell}
\row}
}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {IDE_INTERFACE}\cell}
{\pard\intbl\ql {$00A3 ({00A3})}\cell}
{\pard\intbl\ql {Initialise card interfaces}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {IDE_INIT}\cell}
{\pard\intbl\ql {$00A6 ({00A6})}\cell}
{\pard\intbl\ql {Initialise IDEDOS}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {IDE_DRIVE}\cell}
{\pard\intbl\ql {$00A9 ({00A9})}\cell}
{\pard\intbl\ql {Get unit handle}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {*IDE_SECTOR_READ}\cell}
{\pard\intbl\ql {$00AC ({00AC})}\cell}
{\pard\intbl\ql {Low-level sector read}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {*IDE_SECTOR_WRITE}\cell}
{\pard\intbl\ql {$00AF ({00AF})}\cell}
{\pard\intbl\ql {Low-level sector write}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {IDE_PARTITON_READ}\cell}
{\pard\intbl\ql {$00C4 ({00C4})}\cell}
{\pard\intbl\ql {Read a partition entry}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {IDE_PARTITION_OPEN}\cell}
{\pard\intbl\ql {$00CD ({00CD})}\cell}
{\pard\intbl\ql {Open a partition}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {IDE_PARTITION_CLOSE}\cell}
{\pard\intbl\ql {$00D0 ({00D0})}\cell}
{\pard\intbl\ql {Close a partition}\cell}
\row}
{\trowd\cellx1876\cellx4345\cellx6898
{\pard\intbl\ql {IDE_PARTITIONS}\cell}
{\pard\intbl\ql {$01A5 ({01A5})}\cell}
{\pard\intbl\ql {Get number of open partitions}\cell}
\row}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Unimplemented Calls}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1546\cellx4177\cellx6898
{\pard\intbl\ql {DOS_OPEN_DRIVE}\cell}
{\pard\intbl\ql {$014B ({014B})}\cell}
{\pard\intbl\ql {Open a drive as a single file}\cell}
\row}
{\trowd\cellx1546\cellx4177\cellx6898
{\pard\intbl\ql {DOS_MAP_B}\cell}
{\pard\intbl\ql {$0154 ({0154})}\cell}
{\pard\intbl\ql {Map B: onto unit 0 or 1}\cell}
\row}
}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_INTERFACE}\cell}
{\pard\intbl\ql {$0157 ({0157})}\cell}
{\pard\intbl\ql {Is the floppy disk driver interface present?}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_INIT}\cell}
{\pard\intbl\ql {$015A ({015A})}\cell}
{\pard\intbl\ql {Initialise disk driver}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_SETUP}\cell}
{\pard\intbl\ql {$015D ({015D})}\cell}
{\pard\intbl\ql {Specify drive parameters}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_SET_RETRY}\cell}
{\pard\intbl\ql {$0160 ({0160})}\cell}
{\pard\intbl\ql {Set try/retry count}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_READ_SECTOR}\cell}
{\pard\intbl\ql {$0163 ({0163})}\cell}
{\pard\intbl\ql {Read a sector}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_WRITE_SECTOR}\cell}
{\pard\intbl\ql {$0166 ({0166})}\cell}
{\pard\intbl\ql {Write a sector}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_CHECK_SECTOR}\cell}
{\pard\intbl\ql {$0169 ({0169})}\cell}
{\pard\intbl\ql {Check a sector}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_FORMAT}\cell}
{\pard\intbl\ql {$016C ({016C})}\cell}
{\pard\intbl\ql {Format a track}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_READ_ID}\cell}
{\pard\intbl\ql {$016F ({016F})}\cell}
{\pard\intbl\ql {Read a sector identifier}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_TEST_UNSUITABLE}\cell}
{\pard\intbl\ql {$0172 ({0172})}\cell}
{\pard\intbl\ql {Test media suitability}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_LOGIN}\cell}
{\pard\intbl\ql {$0175 ({0175})}\cell}
{\pard\intbl\ql {Log in disk, initialise XDPB}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_SEL_FORMAT}\cell}
{\pard\intbl\ql {$0178 ({0178})}\cell}
{\pard\intbl\ql {Pre-initialise XDPB for DD FORMAT}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_ASK_1}\cell}
{\pard\intbl\ql {$017B ({017B})}\cell}
{\pard\intbl\ql {Is unit 1 & external drive & present?}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_DRIVE_STATUS}\cell}
{\pard\intbl\ql {$017E ({017E})}\cell}
{\pard\intbl\ql {Fetch drive status}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_EQUIPMENT}\cell}
{\pard\intbl\ql {$0181 ({0181})}\cell}
{\pard\intbl\ql {What type of drive?}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_ENCODE}\cell}
{\pard\intbl\ql {$0184 ({0184})}\cell}
{\pard\intbl\ql {Set intercept routine for copy protection}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_L_SEEK}\cell}
{\pard\intbl\ql {$018D ({018D})}\cell}
{\pard\intbl\ql {uPD765A seek driver}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_L_READ}\cell}
{\pard\intbl\ql {$0190 ({0190})}\cell}
{\pard\intbl\ql {uPD765A read driver}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_L_WRITE}\cell}
{\pard\intbl\ql {$0193 ({0193})}\cell}
{\pard\intbl\ql {uPD765A write driver}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_L_ON_MOTOR}\cell}
{\pard\intbl\ql {$0196 ({0196})}\cell}
{\pard\intbl\ql {Motor on, wait for motor-on time}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_L_T_OFF_MOTOR}\cell}
{\pard\intbl\ql {$0199 ({0199})}\cell}
{\pard\intbl\ql {Start the motor-off ticker}\cell}
\row}
{\trowd\cellx1534\cellx3642\cellx6898
{\pard\intbl\ql {DD_L_OFF_MOTOR}\cell}
{\pard\intbl\ql {$019C ({019C})}\cell}
{\pard\intbl\ql {Turn the motor off}\cell}
\row}
}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_FORMAT}\cell}
{\pard\intbl\ql {$00B2 ({00B2})}\cell}
{\pard\intbl\ql {Format a partition}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_NEW}\cell}
{\pard\intbl\ql {$00B8 ({00B8})}\cell}
{\pard\intbl\ql {Create partition}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_INIT}\cell}
{\pard\intbl\ql {$00BB ({00BB})}\cell}
{\pard\intbl\ql {Initialise partition}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_ERASE}\cell}
{\pard\intbl\ql {$00BE ({00BE})}\cell}
{\pard\intbl\ql {Delete a partition}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_RENAME}\cell}
{\pard\intbl\ql {$00C1 ({00C1})}\cell}
{\pard\intbl\ql {Rename a partition}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_WRITE}\cell}
{\pard\intbl\ql {$00C7 ({00C7})}\cell}
{\pard\intbl\ql {Write a partition entry}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_WINFO}\cell}
{\pard\intbl\ql {$00CA ({00CA})}\cell}
{\pard\intbl\ql {Write type-specific partition information}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_GETINFO}\cell}
{\pard\intbl\ql {$00D3 ({00D3})}\cell}
{\pard\intbl\ql {Get byte from type-specific partition information}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_PARTITION_SETINFO}\cell}
{\pard\intbl\ql {$00D6 ({00D6})}\cell}
{\pard\intbl\ql {Set byte in type-specific partition information}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_DOS_UNPERMANENT}\cell}
{\pard\intbl\ql {$00FA ({00FA})}\cell}
{\pard\intbl\ql {Remove permanent drive mapping}\cell}
\row}
{\trowd\cellx1618\cellx3566\cellx6900
{\pard\intbl\ql {IDE_IDENTIFY}\cell}
{\pard\intbl\ql {$01A2 ({01A2})}\cell}
{\pard\intbl\ql {Return IDE drive identity information}\cell}
\row}
}\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 F.3.2  +3DOS compatible error codes\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {\b Recoverable disk errors}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {0}\cell}
{\pard\intbl\ql {rc_ready}\cell}
{\pard\intbl\ql {Drive not ready}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {1}\cell}
{\pard\intbl\ql {rc_wp}\cell}
{\pard\intbl\ql {Disk is write protected}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {2}\cell}
{\pard\intbl\ql {rc_seek}\cell}
{\pard\intbl\ql {Seek fail}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {3}\cell}
{\pard\intbl\ql {rc_crc}\cell}
{\pard\intbl\ql {CRC data error}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {4}\cell}
{\pard\intbl\ql {rc_nodata}\cell}
{\pard\intbl\ql {No data}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {5}\cell}
{\pard\intbl\ql {rc_mark}\cell}
{\pard\intbl\ql {Missing address mark}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {6}\cell}
{\pard\intbl\ql {rc_unrecog}\cell}
{\pard\intbl\ql {Unrecognised disk format}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {7}\cell}
{\pard\intbl\ql {rc_unknown}\cell}
{\pard\intbl\ql {Unknown disk error}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {8}\cell}
{\pard\intbl\ql {rc_diskchg}\cell}
{\pard\intbl\ql {Disk changed whilst +3DOS was using it}\cell}
\row}
{\trowd\cellx232\cellx1784\cellx6900
{\pard\intbl\ql {9}\cell}
{\pard\intbl\ql {rc_unsuit}\cell}
{\pard\intbl\ql {Unsuitable media for drive}\cell}
\row}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Non-recoverable errors}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {20}\cell}
{\pard\intbl\ql {rc_badname}\cell}
{\pard\intbl\ql {Bad filename}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {21}\cell}
{\pard\intbl\ql {rc_badparam}\cell}
{\pard\intbl\ql {Bad parameter}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {22}\cell}
{\pard\intbl\ql {rc_nodrive}\cell}
{\pard\intbl\ql {Drive not found}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {23}\cell}
{\pard\intbl\ql {rc_nofile}\cell}
{\pard\intbl\ql {File not found}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {24}\cell}
{\pard\intbl\ql {rc_exists}\cell}
{\pard\intbl\ql {File already exists}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {25}\cell}
{\pard\intbl\ql {rc_eof}\cell}
{\pard\intbl\ql {End of file}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {26}\cell}
{\pard\intbl\ql {rc_diskfull}\cell}
{\pard\intbl\ql {Disk full}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {27}\cell}
{\pard\intbl\ql {rc_dirfull}\cell}
{\pard\intbl\ql {Directory full}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {28}\cell}
{\pard\intbl\ql {rc_ro}\cell}
{\pard\intbl\ql {Read-only file}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {29}\cell}
{\pard\intbl\ql {rc_number}\cell}
{\pard\intbl\ql {File number not open (or open with wrong access)}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {30}\cell}
{\pard\intbl\ql {rc_denied}\cell}
{\pard\intbl\ql {Access denied}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {31}\cell}
{\pard\intbl\ql {rc_norename}\cell}
{\pard\intbl\ql {Cannot rename between drives}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {32}\cell}
{\pard\intbl\ql {rc_extent}\cell}
{\pard\intbl\ql {Extent missing}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {33}\cell}
{\pard\intbl\ql {rc_uncached}\cell}
{\pard\intbl\ql {Uncached}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {34}\cell}
{\pard\intbl\ql {rc_toobig}\cell}
{\pard\intbl\ql {File too big}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {35}\cell}
{\pard\intbl\ql {rc_notboot}\cell}
{\pard\intbl\ql {Disk not bootable}\cell}
\row}
{\trowd\cellx312\cellx1689\cellx6898
{\pard\intbl\ql {36}\cell}
{\pard\intbl\ql {rc_inuse}\cell}
{\pard\intbl\ql {Drive in use}\cell}
\row}
}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {56}\cell}
{\pard\intbl\ql {rc_invpartition}\cell}
{\pard\intbl\ql {Invalid partition}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {57}\cell}
{\pard\intbl\ql {rc_partexist}\cell}
{\pard\intbl\ql {Partition already exists}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {58}\cell}
{\pard\intbl\ql {rc_notimp}\cell}
{\pard\intbl\ql {Not implemented}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {59}\cell}
{\pard\intbl\ql {rc_partopen}\cell}
{\pard\intbl\ql {Partition open}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {60}\cell}
{\pard\intbl\ql {rc_nohandle}\cell}
{\pard\intbl\ql {Out of handles}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {61}\cell}
{\pard\intbl\ql {rc_notswap}\cell}
{\pard\intbl\ql {Not a swap partition}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {62}\cell}
{\pard\intbl\ql {rc_mapped}\cell}
{\pard\intbl\ql {Drive already mapped}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {63}\cell}
{\pard\intbl\ql {rc_noxdpb}\cell}
{\pard\intbl\ql {No XDPB}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {64}\cell}
{\pard\intbl\ql {rc_noswap}\cell}
{\pard\intbl\ql {No suitable swap partition}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {65}\cell}
{\pard\intbl\ql {rc_invdevice}\cell}
{\pard\intbl\ql {Invalid device}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {67}\cell}
{\pard\intbl\ql {rc_cmdphase}\cell}
{\pard\intbl\ql {Command phase error}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {68}\cell}
{\pard\intbl\ql {rc_dataphase}\cell}
{\pard\intbl\ql {Data phase error}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {69}\cell}
{\pard\intbl\ql {rc_notdir}\cell}
{\pard\intbl\ql {Not a directory}\cell}
\row}
{\trowd\cellx369\cellx2624\cellx6899
{\pard\intbl\ql {74}\cell}
{\pard\intbl\ql {rc_fragmented}\cell}
{\pard\intbl\ql {File is fragmented, use .DEFRAG}\cell}
\row}
}\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 F.3.3  esxDOS Compatible Calls\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb180 \fi0 {\b Low-level calls}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1623\cellx4159\cellx6899
{\pard\intbl\ql {disk_filemap}\cell}
{\pard\intbl\ql {$85 ({85})}\cell}
{\pard\intbl\ql {obtain file allocation map}\cell}
\row}
{\trowd\cellx1623\cellx4159\cellx6899
{\pard\intbl\ql {disk_strmstart}\cell}
{\pard\intbl\ql {$86 ({86})}\cell}
{\pard\intbl\ql {start streaming operation}\cell}
\row}
{\trowd\cellx1623\cellx4159\cellx6899
{\pard\intbl\ql {disk_strmend}\cell}
{\pard\intbl\ql {$87 ({87})}\cell}
{\pard\intbl\ql {end streaming operation}\cell}
\row}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b Miscellaneous calls}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_dosversion}\cell}
{\pard\intbl\ql {$88 ({88})}\cell}
{\pard\intbl\ql {get NextZXOS version/mode information}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_getsetdrv}\cell}
{\pard\intbl\ql {$89 ({89})}\cell}
{\pard\intbl\ql {get/set default drive}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_tapein}\cell}
{\pard\intbl\ql {$8B ({8B})}\cell}
{\pard\intbl\ql {tape redirection control (input)}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_tapeout}\cell}
{\pard\intbl\ql {$8C ({8C})}\cell}
{\pard\intbl\ql {tape redirection control (output)}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_gethandle}\cell}
{\pard\intbl\ql {$8D ({8D})}\cell}
{\pard\intbl\ql {get handle for current dot command}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_getdate}\cell}
{\pard\intbl\ql {$8E ({8E})}\cell}
{\pard\intbl\ql {get current date/time}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_execcmd}\cell}
{\pard\intbl\ql {$8F ({8F})}\cell}
{\pard\intbl\ql {execute a dot command}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_setcaps}\cell}
{\pard\intbl\ql {$91 ({91})}\cell}
{\pard\intbl\ql {set additional capabilities}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_drvapi}\cell}
{\pard\intbl\ql {$92 ({92})}\cell}
{\pard\intbl\ql {access API for installable drivers}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_geterr}\cell}
{\pard\intbl\ql {$93 ({93})}\cell}
{\pard\intbl\ql {get or generate error message}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_p3dos}\cell}
{\pard\intbl\ql {$94 ({94})}\cell}
{\pard\intbl\ql {execute +3DOS/IDEDOS/NextZXOS call}\cell}
\row}
{\trowd\cellx1259\cellx3499\cellx6899
{\pard\intbl\ql {m_errh}\cell}
{\pard\intbl\ql {$95 ({95})}\cell}
{\pard\intbl\ql {register dot command error handler}\cell}
\row}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 {\b File calls}\par
{\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_open}\cell}
{\pard\intbl\ql {$9A ({9A})}\cell}
{\pard\intbl\ql {open file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_close}\cell}
{\pard\intbl\ql {$9B ({9B})}\cell}
{\pard\intbl\ql {close file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_sync}\cell}
{\pard\intbl\ql {$9C ({9C})}\cell}
{\pard\intbl\ql {sync file changes to disk}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_read}\cell}
{\pard\intbl\ql {$9D ({9D})}\cell}
{\pard\intbl\ql {read file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_write}\cell}
{\pard\intbl\ql {$9E ({9E})}\cell}
{\pard\intbl\ql {write file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_seek}\cell}
{\pard\intbl\ql {$9F ({9F})}\cell}
{\pard\intbl\ql {set file position}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_fgetpos}\cell}
{\pard\intbl\ql {$A0 ({A0})}\cell}
{\pard\intbl\ql {get file position}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_fstat}\cell}
{\pard\intbl\ql {$A1 ({A1})}\cell}
{\pard\intbl\ql {get open file information}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_ftruncate}\cell}
{\pard\intbl\ql {$A2 ({A2})}\cell}
{\pard\intbl\ql {truncate/extend open file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_opendir}\cell}
{\pard\intbl\ql {$A3 ({A3})}\cell}
{\pard\intbl\ql {open directory for reading}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_readdir}\cell}
{\pard\intbl\ql {$A4 ({A4})}\cell}
{\pard\intbl\ql {read directory entry}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_telldir}\cell}
{\pard\intbl\ql {$A5 ({A5})}\cell}
{\pard\intbl\ql {get directory position}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_seekdir}\cell}
{\pard\intbl\ql {$A6 ({A6})}\cell}
{\pard\intbl\ql {set directory position}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_rewinddir}\cell}
{\pard\intbl\ql {$A7 ({A7})}\cell}
{\pard\intbl\ql {rewind to start of directory}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_getcwd}\cell}
{\pard\intbl\ql {$A8 ({A8})}\cell}
{\pard\intbl\ql {get current working directory}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_chdir}\cell}
{\pard\intbl\ql {$A9 ({A9})}\cell}
{\pard\intbl\ql {change directory}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_mkdir}\cell}
{\pard\intbl\ql {$AA ({AA})}\cell}
{\pard\intbl\ql {make directory}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_rmdir}\cell}
{\pard\intbl\ql {$AB ({AB})}\cell}
{\pard\intbl\ql {remove directory}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_stat}\cell}
{\pard\intbl\ql {$AC ({AC})}\cell}
{\pard\intbl\ql {get unopen file information}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_unlink}\cell}
{\pard\intbl\ql {$AD ({AD})}\cell}
{\pard\intbl\ql {delete file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_truncate}\cell}
{\pard\intbl\ql {$AE ({AE})}\cell}
{\pard\intbl\ql {truncate/extend unopen file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_chmod}\cell}
{\pard\intbl\ql {$AF ({AF})}\cell}
{\pard\intbl\ql {change file attributes}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_rename}\cell}
{\pard\intbl\ql {$B0 ({B0})}\cell}
{\pard\intbl\ql {rename/move file}\cell}
\row}
{\trowd\cellx1318\cellx3854\cellx6898
{\pard\intbl\ql {f_getfree}\cell}
{\pard\intbl\ql {$B1 ({B1})}\cell}
{\pard\intbl\ql {get free space}\cell}
\row}
}\par
\pard\plain\s80\ql\sb240\sa120\keepn\f0\b\fs22\sl240\slmult1 \sb120 \fi0  List of Figures\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\field{\*\fldinst TOC \\f f }{\fldrslt }}
\page
\pard\plain\s80\ql\sb240\sa120\keepn\f0\b\fs22\sl240\slmult1 \sb180 \fi0  List of Tables\par
\pard\plain\s0\qj\widctlpar\f0\fs22\sl240\slmult1 \sb120 \fi0 \par
{\field{\*\fldinst TOC \\f t }{\fldrslt }}
\page {\field{\*\fldinst{INDEX \\c 2}}{\fldrslt{}}}}}
