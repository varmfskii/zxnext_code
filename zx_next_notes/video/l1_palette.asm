;;; 64 colour palette file format (internal) - version 1.0
;;; copyright (c) 2009 Andrew Owen
;;;
;;; The palette file is stored as a BASIC program with embedded
;;; machine code

header:

	db 0x00 ; program file
	db 0x14, 0x01, "64colour" ; file name
	dw 0x0097 ; data length
	dw 0x0000 ; autostart line
	dw 0x0097 ; program length

basic:
	;; 0 RANDOMIZE USR ((PEEK VAL "2
	;; 3635"+VAL "256"*PEEK VAL "23636"
	;; )+VAL "48"): LOAD "": REM

	db 0x00, 0x00, 0x93, 0x00, 0xf9, 0xc0, 0x28, 0x28
	db 0xbe, 0xb0, 0x22, 0x32, 0x33, 0x36, 0x33, 0x35
	db 0x22, 0x2b, 0xb0, 0x22, 0x32, 0x35, 0x36, 0x22
	db 0x2a, 0xbe, 0xb0, 0x22, 0x32, 0x33, 0x36, 0x33
	db 0x36, 0x22, 0x29, 0x2b, 0xb0, 0x22, 0x34, 0x38
	db 0x22, 0x29, 0x3a, 0xef, 0x22, 0x22, 0x3a, 0xea

start:

	di ; disable interrupts
	ld hl, 38 ; HL = length of code
	add hl, bc ; BC = entry point (start) from BASIC
	ld bc, 0xbf3b ; register select
	ld a, 64 ; mode group
	out (c), a ;
	ld a, 1 ;
	ld b, 0xff ; choose register port
	out (c), a ; turn palette mode on
	xor a ; first register

setreg:

	ld b, 0xbf ; choose register port
	out (c), a ; select register
	ex af, af' ; save current register select
	ld a, (hl) ; get data
	ld b, 0xff ; choose data port
	out (c), a ; set it
	ex af, af' ; restore current register
	inc hl ; advance pointer
	inc a ; increase register
	cp 64 ; are we nearly there yet?
	jr nz, setreg ; repeat until all 64 have been done
	ei ; enable interrupts
	ret ; return

;;; this is where the actual data is stored. The following is an
;;; example palette.

registers:

	db 0x00, 0x02, 0x18, 0x1b, 0xc0, 0xc3, 0xd8, 0xdb ; INK
	db 0x00, 0x02, 0x18, 0x1b, 0xc0, 0xc3, 0xd8, 0xdb ; PAPER
	db 0x00, 0x03, 0x1c, 0x1f, 0xe0, 0xe3, 0xfc, 0xff ; +BRIGHT
	db 0x00, 0x03, 0x1c, 0x1f, 0xe0, 0xe3, 0xfc, 0xff ;
	db 0xdb, 0xd8, 0xc3, 0xc0, 0x1b, 0x18, 0x02, 0x00 ; +FLASH
	db 0xdb, 0xd8, 0xc3, 0xc0, 0x1b, 0x18, 0x02, 0x00 ;
	db 0xff, 0xfc, 0xe3, 0xe0, 0x1f, 0x1c, 0x03, 0x00 ; +BRIGHT/
	db 0xff, 0xfc, 0xe3, 0xe0, 0x1f, 0x1c, 0x03, 0x00 ; +FLASH

terminating_byte:

	db 0x0d 
